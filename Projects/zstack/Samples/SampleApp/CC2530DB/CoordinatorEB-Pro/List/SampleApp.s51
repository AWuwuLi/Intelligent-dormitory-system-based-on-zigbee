///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        27/Jun/2025  14:42:34 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON /
//                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample /
//                          App\Source\SampleApp.c                            /
//    Command line       =  -f "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍ /
//                          µ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZSt /
//                          ack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord /
//                          .cfg" (-DCPU32MHZ -DROOT=__near_func              /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½O /
//                          NENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.c /
//                          fg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00020000         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "D:\Program                /
//                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶Ë /
//                          Êý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\SampleApp\Source\ /
//                          SampleApp.c" -D ZIGBEEPRO -D ZTOOL_P1 -D          /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -D xWDT_IN_PM1 -lC            /
//                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½O /
//                          NENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\CoordinatorEB-Pro\List\" -lA        /
//                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½O /
//                          NENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\CoordinatorEB-Pro\List\"            /
//                          --diag_suppress Pe001,Pa010 -o "D:\Program        /
//                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶Ë /
//                          Êý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\CoordinatorEB-Pro\Obj\" -e --debug              /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\Program               /
//                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶Ë /
//                          Êý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi /
//                          ·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET /
//                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\SOURCE\" -I "D:\Program   /
//                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶Ë /
//                          Êý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\ZMAIN\TI2530DB\" -I "D:\Program        /
//                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶Ë /
//                          Êý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\MT\" -I "D:\Program   /
//                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶Ë /
//                          Êý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I      /
//                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½O /
//                          NENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGE /
//                          T\CC2530EB\" -I "D:\Program                       /
//                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶Ë /
//                          Êý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I   /
//                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½O /
//                          NENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCL /
//                          UDE\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWi /
//                          Fi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONEN /
//                          ET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          STACK\AF\" -I "D:\Program                         /
//                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶Ë /
//                          Êý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\STACK\NWK\" -I        /
//                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½O /
//                          NENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC /
//                          \" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi· /
//                          ¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA /
//                          CK\SAPI\" -I "D:\Program                          /
//                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶Ë /
//                          Êý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\STACK\SYS\" -I        /
//                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½O /
//                          NENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO /
//                          \" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi· /
//                          ¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMA /
//                          C\F8W\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍø /
//                          WiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON /
//                          ENET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\ZMAC\" -I "D:\Program                           /
//                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶Ë /
//                          Êý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\" -I   /
//                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½O /
//                          NENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\ /
//                          SDATA\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍø /
//                          WiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON /
//                          ENET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MAC\INCLUDE\" -I "D:\Program                    /
//                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶Ë /
//                          Êý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I   /
//                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½O /
//                          NENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_L /
//                          EVEL\srf04\" -I "D:\Program                       /
//                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶Ë /
//                          Êý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\S /
//                          INGLE_CHIP\" -Ohz --require_prototypes            /
//    List file          =  D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON /
//                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\CoordinatorEB-Pro\List\SampleApp.s51 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ADD_XSTACK_DISP0_16
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ReSetWifi?relay
        FUNCTION ??ReSetWifi?relay,0203H
        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_SendFlashMessage?relay
        FUNCTION ??SampleApp_SendFlashMessage?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBWEAK P0DIR
        PUBWEAK P2SEL
        PUBLIC ReSetWifi
        FUNCTION ReSetWifi,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,021203H
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 291, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 284, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 47, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_P0
        PUBLIC adc
        PUBLIC flat
        PUBLIC hum_new
        PUBLIC hum_old
        PUBLIC ibusy
        PUBLIC kmg
        PUBLIC relay
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Delay_ms            SYMBOL "Delay_ms"
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
HalUARTWrite        SYMBOL "HalUARTWrite"
osal_memset         SYMBOL "osal_memset"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
LCD_P8x16Str        SYMBOL "LCD_P8x16Str"
strstr              SYMBOL "strstr"
memset              SYMBOL "memset"
sprintf             SYMBOL "sprintf"
strlen              SYMBOL "strlen"
osal_rand           SYMBOL "osal_rand"
aps_FindGroup       SYMBOL "aps_FindGroup"
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
strncpy             SYMBOL "strncpy"
atoi                SYMBOL "atoi"
HalLedBlink         SYMBOL "HalLedBlink"
HalLedSet           SYMBOL "HalLedSet"
DHT11               SYMBOL "DHT11"
LCD_P16x16Ch        SYMBOL "LCD_P16x16Ch"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??DHT11?relay       SYMBOL "?relay", DHT11
??Delay_ms?relay    SYMBOL "?relay", Delay_ms
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??LCD_P16x16Ch?relay SYMBOL "?relay", LCD_P16x16Ch
??LCD_P8x16Str?relay SYMBOL "?relay", LCD_P8x16Str
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??aps_FindGroup?relay SYMBOL "?relay", aps_FindGroup
??aps_RemoveGroup?relay SYMBOL "?relay", aps_RemoveGroup
??atoi?relay        SYMBOL "?relay", atoi
??memset?relay      SYMBOL "?relay", memset
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
??strlen?relay      SYMBOL "?relay", strlen
??strncpy?relay     SYMBOL "?relay", strncpy
??strstr?relay      SYMBOL "?relay", strstr
ReSetWifi           SYMBOL "ReSetWifi"
??ReSetWifi?relay   SYMBOL "?relay", ReSetWifi
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
??SampleApp_SendFlashMessage?relay SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage

        EXTERN Delay_ms
        FUNCTION Delay_ms,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_P8x16Str
        FUNCTION LCD_P8x16Str,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strstr
        FUNCTION strstr,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 291, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strncpy
        FUNCTION strncpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN atoi
        FUNCTION atoi,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DHT11
        FUNCTION DHT11,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_P16x16Ch
        FUNCTION LCD_P16x16Ch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??DHT11?relay
        FUNCTION ??DHT11?relay,00H
        EXTERN ??Delay_ms?relay
        FUNCTION ??Delay_ms?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??LCD_P16x16Ch?relay
        FUNCTION ??LCD_P16x16Ch?relay,00H
        EXTERN ??LCD_P8x16Str?relay
        FUNCTION ??LCD_P8x16Str?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??aps_FindGroup?relay
        FUNCTION ??aps_FindGroup?relay,00H
        EXTERN ??aps_RemoveGroup?relay
        FUNCTION ??aps_RemoveGroup?relay,00H
        EXTERN ??atoi?relay
        FUNCTION ??atoi?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H
        EXTERN ??strncpy?relay
        FUNCTION ??strncpy?relay,00H
        EXTERN ??strstr?relay
        FUNCTION ??strstr?relay,00H
        EXTERN shidu_ge
        EXTERN shidu_shi
        EXTERN wendu_ge
        EXTERN wendu_shi

// D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 #include "OSAL.h"
//    2 #include "ZGlobals.h"
//    3 #include "AF.h"
//    4 #include "aps_groups.h"
//    5 #include "ZDApp.h"
//    6 
//    7 #include "SampleApp.h"
//    8 #include "SampleAppHw.h"
//    9 
//   10 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//   11 
//   12 /* HAL */
//   13 #include "hal_lcd.h"
//   14 #include "hal_led.h"
//   15 #include "hal_key.h"
//   16 #include "MT_UART.h"
//   17 #include "MT_APP.h"
//   18 #include "MT.h"
//   19 #include "DHT11.h"
//   20 #include "stdio.h"
//   21 #include "string.h"
//   22 #include <stdlib.h>
//   23 
//   24 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   25 //ÐèÒªÐÞ¸ÄµÄÊÇÏÂÃæ5ÐÐ
//   26 
//   27 #define  token    "version=2018-10-31&res=products%2F9dBJ0I0C3F%2Fdevices%2Fyinxingru&et=1751180218&method=md5&sign=JLWxKRqwjaSDZIrUqwrgVg%3D%3D" //token¹¤¾ß¼ÆËãÖµ
//   28 #define  devid    "yinxingru"           //ÐÂ°æ±¾onenetÆ½Ì¨Éè±¸id
//   29 #define  proid     "9dBJ0I0C3F"                 //ÐÂ°æ±¾onenetÆ½Ì¨²úÆ·id
//   30 #define  LYSSID    "yinxingru"                   // ÐÞ¸ÄÄãÂ·ÓÉÆ÷µÄSSId
//   31 #define  LYPASSWD  "woshiyxr"  
//   32 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   33 
//   34 #define WIFIRESET   P0_6             // P0.6¿Ú¿ØÖÆwifi reset
//   35 //WIFIÁ¬½ÓÃüÁî
//   36 #define AT_C       "AT\r\n"
//   37 #define CWMODE_C   "AT+CWMODE=1\r\n"    //STAÄ£Ê½
//   38 #define CIPMODE_C  "AT+CIPMODE=0\r\n"   //·ÇÍ¸´«Ä£Ê½
//   39 #define MQTTCONN "AT+MQTTCONN=0,\"mqtts.heclouds.com\",1883,1\r\n"//Á¬½Ómqtt·þÎñÆ÷
//   40 
//   41 #define RELAY P0_6 //¼ÌµçÆ÷¿ØÖÆÒý½Å

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   42 char ibusy = 0;  //ÅÐ¶ÏÊÇ·ñÔÚ·¢ËÍÊý¾Ý
ibusy:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   43 int kmg=0;  
kmg:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   44 uint8 flat = 1;
flat:
        DATA8
        DS 1
        REQUIRE `?<Initializer for flat>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   45 uint8 relay,hum_old,hum_new;  
relay:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
hum_old:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
hum_new:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   46 uint8 adc=0;
adc:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   47 /*********************************************************************
//   48  * MACROS
//   49  */
//   50 
//   51 /*********************************************************************
//   52  * CONSTANTS
//   53  */
//   54 
//   55 /*********************************************************************
//   56  * TYPEDEFS
//   57  */
//   58 
//   59 /*********************************************************************
//   60  * GLOBAL VARIABLES
//   61  */
//   62 
//   63 // Ó¦ÓÃ³ÌÐòÖ§³ÖµÄCluster IDÁÐ±í

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   64 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
//   65 {
//   66   SAMPLEAPP_PERIODIC_CLUSTERID,
//   67   SAMPLEAPP_FLASH_CLUSTERID
//   68 };
//   69 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   70 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SampleApp_ClusterList
//   71 {
//   72   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//   73   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//   74   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   75   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   76   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//   77   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   78   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//   79   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   80   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//   81 };
//   82 
//   83 // This is the Endpoint/Interface description.  It is defined here, but
//   84 // filled-in in SampleApp_Init().  Another way to go would be to fill
//   85 // in the structure here and make it a "const" (in code space).  The
//   86 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   87 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   88 
//   89 /*********************************************************************
//   90  * EXTERNAL VARIABLES
//   91  */
//   92 
//   93 /*********************************************************************
//   94  * EXTERNAL FUNCTIONS
//   95  */
//   96 
//   97 /*********************************************************************
//   98  * LOCAL VARIABLES
//   99  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  100 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  101                           // This variable will be received when
//  102                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  103 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  104 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  105 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  106 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  107 afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  108 afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  109 afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  110 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  111 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  112 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  113 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  114 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  115 
//  116 
//  117 
//  118 /*********************************************************************
//  119  * LOCAL FUNCTIONS
//  120  */
//  121 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  122 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  123 void SampleApp_SendPeriodicMessage( void );
//  124 void SampleApp_SendFlashMessage( uint16 flashTime );
//  125 void ReSetWifi(void);
//  126 void ClearRAM(uint8* ram,uint32 n);
//  127 /*********************************************************************
//  128  * NETWORK LAYER CALLBACKS
//  129  */
//  130 
//  131 /*********************************************************************
//  132  * PUBLIC FUNCTIONS
//  133  */
//  134 
//  135 
//  136 /****************************************************************************
//  137 * Ãû    ³Æ: ReSetWifi()
//  138 * ¹¦    ÄÜ: µÍµçÆ½¸´Î»wifiÄ£¿é
//  139 * Èë¿Ú²ÎÊý: ÎÞ
//  140 * ³ö¿Ú²ÎÊý: ÎÞ
//  141 ****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  142 void ReSetWifi(void)
ReSetWifi:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ReSetWifi
        CODE
//  143 {
        FUNCALL ReSetWifi, Delay_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  144   //P0DIR |= 0x40;                  //P0.6¶¨ÒåÎªÊä³ö
//  145   //WIFIRESET = 0;                  //µÍµçÆ½¸´Î»---------------------
//  146  //Delay_ms(500);
//  147  // WIFIRESET = 1;                  //¸ßµçÆ½¹¤×÷------------
//  148   Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
//  149 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//  150 /*********************************************************************
//  151  * @fn      SampleApp_Init
//  152  *
//  153  * @brief   Initialization function for the Generic App Task.
//  154  *          This is called during initialization and should contain
//  155  *          any application specific initialization (ie. hardware
//  156  *          initialization/setup, table initialization, power up
//  157  *          notificaiton ... ).
//  158  *
//  159  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  160  *                    used to send messages and set timers.
//  161  *
//  162  * @return  none
//  163  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  164 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  165 { 
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R1
        MOV     R6,A
//  166   
//  167   unsigned char tmp[10];
//  168   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  169   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  170   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  171   
//  172   MT_UartInit();                  //´®¿Ú³õÊ¼»¯
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  173   MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  174   HalUARTWrite(0, "CoordinatorZB\r\n", 15);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xf
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "CoordinatorZB\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "CoordinatorZB\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  175   osal_memset(tmp,0,10);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  176   tmp[0] = HAL_UART_DMA+0x30;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x31
        MOVX    @DPTR,A
//  177   tmp[1] = HAL_UART_ISR+0x30;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x32
        MOVX    @DPTR,A
//  178   tmp[2] = HAL_UART_USB+0x30;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x30
        MOVX    @DPTR,A
//  179   HalUARTWrite(0, tmp, 6);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  180     
//  181    P2SEL &= 0xfe;                  //P0_7ÅäÖÃ³ÉÍ¨ÓÃio ÎÂÊª¶È
        ANL     0xf5,#0xfe
//  182    ReSetWifi();
        ; Setup parameters for call to function Delay_ms
        LCALL   ?Subroutine2 & 0xFFFF
//  183    Delay_ms(1000);                //µÈ´ýÄ£¿éÆô¶¯
//  184    
//  185    HalUARTWrite(1,"AT\r\n",strlen("AT\r\n")); //·¢ËÍAT¼ì²âWiFiÄ£¿é
//  186 
//  187   // Device hardware initialization can be added here or in main() (Zmain.c).
//  188   // If the hardware is application specific - add it here.
//  189   // If the hardware is other parts of the device add it in main().
//  190 
//  191  #if defined ( BUILD_ALL_DEVICES )
//  192   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  193   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  194   // together - if they are - we will start up a coordinator. Otherwise,
//  195   // the device will start as a router.
//  196   if ( readCoordinatorJumper() )
//  197     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  198   else
//  199     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  200 #endif // BUILD_ALL_DEVICES
//  201 
//  202 #if defined ( HOLD_AUTO_START )
//  203   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  204   //  from starting the device and wait for the application to
//  205   //  start the device.
//  206   ZDOInitDevice(0);
//  207 #endif
//  208 
//  209 //  Setup for the periodic message's destination address
//  210 //  Broadcast to everyone
//  211 //  SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
//  212 //  SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
//  213 //  SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
//  214   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
??CrossCallReturnLabel_0:
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  215   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  216   SampleApp_Periodic_DstAddr.addr.shortAddr = 0x0000; 
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  217   
//  218 
//  219   // Setup for the flash command's destination address - Group 1
//  220   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        INC     A
        MOVX    @DPTR,A
//  221   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  222   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  223   
//  224   SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
        MOV     DPTR,#SampleApp_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  225   SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  226   SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
        MOV     DPTR,#SampleApp_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  227 
//  228   // Fill out the endpoint description.
//  229   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  230   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  231   SampleApp_epDesc.simpleDesc
//  232             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  233   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  234 
//  235   // Register the endpoint description with the AF
//  236   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  237 
//  238   // Register for all key events - This app will handle all key events
//  239   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  240 
//  241   // By default, all devices start out in Group 1
//  242   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  243   osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  244   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  245 
//  246 #if defined ( LCD_SUPPORTED )
//  247   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "SampleApp">` & 0xff
        MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  248 #endif
//  249 }
        MOV     A,#0xa
        CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        REQUIRE P2SEL
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Valid
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  250 
//  251 
//  252 /*********************************************************************
//  253  * @fn      SampleApp_ProcessEvent
//  254  *
//  255  * @brief   Generic Application Task event processor.  This function
//  256  *          is called to process all events for the task.  Events
//  257  *          include timers, messages and any other user defined events.
//  258  *
//  259  * @param   task_id  - The OSAL assigned task ID.
//  260  * @param   events - events to process.  This is a bit map and can
//  261  *                   contain more than one event.
//  262  *
//  263  * @return  none
//  264  */
//  265 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  266 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  267 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 280, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 280, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 282, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 282, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 280, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 280, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 284, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 284, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 280, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 280, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 282, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 282, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 256
        MOV     DPL,#0x0
        MOV     DPH,#-0x1
        LCALL   ?ADD_XSTACK_DISP0_16
        CFI CFA_XSP16 add(XSP16, 278)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  268   char ATSTRCSTX[256];  //mqttÁ¬½Ó»º´æ
//  269   afIncomingMSGPacket_t *MSGpkt;
//  270   (void)task_id;  // Intentionally unreferenced parameter
//  271   kmg++;
        MOV     DPTR,#kmg
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  272   if(kmg>3000)
        MOV     DPTR,#kmg
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x47
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0xb
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??SampleApp_ProcessEvent_0
//  273   {
//  274      kmg=0;
        MOV     DPTR,#kmg
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  275      SystemReset();
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??SampleApp_ProcessEvent_1:
        SJMP    ??SampleApp_ProcessEvent_1
//  276   }
//  277   if ( events & SYS_EVENT_MSG )
??SampleApp_ProcessEvent_0:
        MOV     A,R7
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_2 & 0xFFFF
//  278   {
//  279     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     ?V0 + 10,#`?<Constant "9dBJ0I0C3F">` & 0xff
        MOV     ?V0 + 11,#(`?<Constant "9dBJ0I0C3F">` >> 8) & 0xff
        MOV     ?V0 + 6,#`?<Constant "MQTTCONNECTED">` & 0xff
        MOV     ?V0 + 7,#(`?<Constant "MQTTCONNECTED">` >> 8) & 0xff
        MOV     ?V0 + 4,#`?<Constant "OK">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "OK">` >> 8) & 0xff
        MOV     ?V0 + 8,#`?<Constant "yinxingru">` & 0xff
        MOV     ?V0 + 9,#(`?<Constant "yinxingru">` >> 8) & 0xff
        SJMP    ??CrossCallReturnLabel_5
//  280     while ( MSGpkt )
//  281     {
//  282       switch ( MSGpkt->hdr.event )
//  283       {
//  284         // Received when a key is pressed
//  285         case KEY_CHANGE:
//  286           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  287           LCD_P8x16Str(0, 0, "2022442778.com ");
//  288           break;
//  289 
//  290         // Received when a messages is received (OTA) for this endpoint
//  291         case AF_INCOMING_MSG_CMD:
//  292           SampleApp_MessageMSGCB( MSGpkt );
//  293           break;
//  294       case CMD_SERIAL_MSG:
//  295         mtOSALSerialData_t *p = (mtOSALSerialData_t *)MSGpkt;
//  296         HalUARTWrite(HAL_UART_PORT_0, &p->msg[1], p->msg[0]); 
//  297         //°Ñ½ÓÊÕµ½µÄÊý¾Ý´®¿Ú1´òÓ¡³öÀ´ Ç°ÃæÊÇ×Ö·û´® ºóÃæÊÇ³¤¶È
//  298         if(flat==6) //ÊÕµ½WIFIºÍÆ½Ì¨½»»¥Êý¾Ý
//  299         LCD_P8x16Str(0, 4, "Get UART1 Data .");
//  300         LCD_P8x16Str(0, 6, "                ");
//  301         LCD_P8x16Str(0, 6, LYSSID);
//  302         if(flat==1) //·¢ATÃüÁî Ä£Ê½ÔOÖÃSTA
//  303         {
//  304            if(strstr((char const *)(&p->msg[1]),"OK"))
//  305            {
//  306               HalUARTWrite(1,CWMODE_C,strlen(CWMODE_C));
//  307               HalUARTWrite(0, "ZIGBEE-WIFI OK\r\n", 16);
//  308               flat=2;
//  309               Delay_ms(500);
//  310            }
//  311            else if(strstr((char const *)(&p->msg[1]),"MQTTCONNECTED"))  //Ê§°Ü¾ÍÖØÆô
//  312            {
//  313        
//  314               flat=5;    
//  315            }
//  316             else if(strstr((char const *)(&p->msg[1]),"ERROR"))  //Ê§°Ü¾ÍÖØÆô
//  317            {
//  318               ReSetWifi();//ÖØÆôWiFi
//  319               Delay_ms(1000);
//  320               HalUARTWrite(1,"AT\r\n",4);
//  321               flat=1;    
//  322            }
//  323         }
//  324          else if(flat==2) //Á´½ÓWiFiÂ·ÓÉÆ÷
//  325         {
//  326            if(strstr((char const *)(&p->msg[1]),"OK"))
//  327            {
//  328               memset(ATSTRCSTX,0,256);
//  329               sprintf(ATSTRCSTX,"AT+CWJAP=\"%s\",\"%s\"\r\n",LYSSID,LYPASSWD);
//  330               HalUARTWrite(1,(unsigned char*)ATSTRCSTX, strlen(ATSTRCSTX));//Á¬½Ó±¾µØWiFi
//  331               flat=3;
//  332               Delay_ms(1000);Delay_ms(1000);
//  333            }
//  334         }
//  335         
//  336          else if(flat==3) //ÔOÖÃé°lATÃüÁîÄ£Ê½´«ÊäÄ£Ê½
//  337         {
//  338            if(strstr((char const *)(&p->msg[1]),"OK"))
//  339            { 
//  340              //ÉèÖÃÆÕÍ¨´«ÊäÄ£Ê½ Ò²¾ÍÊÇ°lATÃüÁîÄ£Ê½      
//  341              HalUARTWrite(1,CIPMODE_C, strlen(CIPMODE_C));
//  342             
//  343              flat=4;
//  344              Delay_ms(500);
//  345            }
//  346            else 
//  347            {
//  348               ReSetWifi();//ÖØÆôWiFi
//  349               Delay_ms(1000);
//  350               HalUARTWrite(1,"AT\r\n",4);
//  351               flat=1;    
//  352            }
//  353         }
//  354         else if(flat==4)  
//  355         {
//  356            if(strstr((char const *)(&p->msg[1]),"OK"))
//  357            {
//  358              //·¢ËÍATÖ¸Áî ÉèÖÃmqttµÇÂ¼ÐÅÏ¢ ÅäÖÃÃØè ºÍÔOäidºÍ®aÆ·id Ë¼Í¨ÐÅ
//  359              memset(ATSTRCSTX,0,256);
//  360              sprintf(ATSTRCSTX,"AT+MQTTUSERCFG=0,1,\"%s\",\"%s\",\"%s\",0,0,\"\"\r\n",devid,proid,token);
//  361              HalUARTWrite(1,(unsigned char*)ATSTRCSTX, strlen(ATSTRCSTX));
//  362              Delay_ms(1000);
//  363              //·¢ËÍATÖ¸Áî µÇÂ¼mqtt
//  364              HalUARTWrite(1,MQTTCONN, strlen(MQTTCONN));//Ë¼ßB½Óµ½ONENETß@ÊÇONENETµÄÓòÃû
//  365              flat=5;
//  366              Delay_ms(500);
//  367            }
//  368         }
//  369          else if(flat==5) 
//  370         {
//  371            if(strstr((char const *)(&p->msg[1]),"MQTTCONNECTED"))
//  372            {   
//  373              //·¢ËÍATÖ¸Áî£¬¶©ÔÄmqttÖ÷Ìâ
//  374              memset(ATSTRCSTX,0,256);
//  375              sprintf(ATSTRCSTX,"AT+MQTTSUB=0,\"$sys/%s/%s/thing/property/post/reply\",1\r\n",proid,devid);
//  376              HalUARTWrite(1,(unsigned char*)ATSTRCSTX, strlen(ATSTRCSTX));
//  377              flat=6;
//  378              Delay_ms(500);
//  379            }
//  380         }
//  381 
//  382          break;
//  383         // Received whenever the device changes state in the network
//  384         case ZDO_STATE_CHANGE:  //Ð­µ÷Æ÷²»Ö´ÐÐ¶¨Ê±·¢ËÍÃüÁî
//  385           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_3:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  386           if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||//Ð­µ÷Æ÷²»Ö´ÐÐ¶¨Ê±·¢ËÍÃüÁî
//  387                  (SampleApp_NwkState == DEV_ROUTER)
//  388               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_4
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_5
//  389           {
//  390             // Start sending the periodic message in a regular interval.
//  391             osal_start_timerEx( SampleApp_TaskID,
//  392                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  393                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x48
        MOV     R5,#0xb
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  394           }
//  395           else
//  396           {
//  397             // Device is no longer in the network
//  398           }
//  399           break;
//  400 
//  401         default:
//  402           break;
//  403       }
//  404       Delay_ms(10);
??SampleApp_ProcessEvent_5:
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Delay_ms?relay
//  405       // Release the memory
//  406       osal_msg_deallocate( (uint8 *)MSGpkt );
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_msg_deallocate?relay
//  407 
//  408       // Next - if one is available
//  409       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_6 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        DEC     A
        JZ      ??SampleApp_ProcessEvent_7
        ADD     A,#-0x19
        JZ      ??SampleApp_ProcessEvent_8
        ADD     A,#0x5a
        JZ      ??SampleApp_ProcessEvent_9
        ADD     A,#-0x11
        JZ      ??SampleApp_ProcessEvent_3
        SJMP    ??SampleApp_ProcessEvent_5
??SampleApp_ProcessEvent_9:
        ; Setup parameters for call to function SampleApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SampleApp_HandleKeys?relay
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant "2022442778.com ">` & 0xff
        MOV     R5,#(`?<Constant "2022442778.com ">` >> 8) & 0xff
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??LCD_P8x16Str?relay
        SJMP    ??SampleApp_ProcessEvent_5
??SampleApp_ProcessEvent_8:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_5
??SampleApp_ProcessEvent_7:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        ; Setup parameters for call to function HalUARTWrite
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_35:
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_10
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant "Get UART1 Data .">` & 0xff
        MOV     R5,#(`?<Constant "Get UART1 Data .">` >> 8) & 0xff
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??LCD_P8x16Str?relay
??SampleApp_ProcessEvent_10:
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant "                ">` & 0xff
        MOV     R5,#(`?<Constant "                ">` >> 8) & 0xff
        MOV     R2,#0x6
        MOV     R1,#0x0
        LCALL   ??LCD_P8x16Str?relay
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,?V0 + 8
        MOV     R5,?V0 + 9
        MOV     R2,#0x6
        MOV     R1,#0x0
        LCALL   ??LCD_P8x16Str?relay
        MOV     DPTR,#flat
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_ProcessEvent_11
        ; Setup parameters for call to function strstr
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ      ??SampleApp_ProcessEvent_12
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xd
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CWMODE=1\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CWMODE=1\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "ZIGBEE-WIFI OK\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "ZIGBEE-WIFI OK\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV     A,#0x2
??SampleApp_ProcessEvent_13:
        MOVX    @DPTR,A
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
??SampleApp_ProcessEvent_14:
        LCALL   ??Delay_ms?relay
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
??SampleApp_ProcessEvent_12:
        ; Setup parameters for call to function strstr
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        JZ      ??SampleApp_ProcessEvent_15
        MOV     DPTR,#flat
        MOV     A,#0x5
??SampleApp_ProcessEvent_16:
        MOVX    @DPTR,A
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
??SampleApp_ProcessEvent_15:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "ERROR">` & 0xff
        MOV     R5,#(`?<Constant "ERROR">` >> 8) & 0xff
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_27:
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
??SampleApp_ProcessEvent_17:
        ; Setup parameters for call to function Delay_ms
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     DPTR,#flat
        MOV     A,#0x1
        SJMP    ??SampleApp_ProcessEvent_16
??SampleApp_ProcessEvent_11:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??SampleApp_ProcessEvent_18
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_24:
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 280)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 278)
        ; Setup parameters for call to function sprintf
        MOV     ?V0 + 0,#`?<Constant "woshiyxr">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "woshiyxr">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 280)
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 282)
        MOV     R4,#`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 278)
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     A,#0x3
        MOVX    @DPTR,A
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x18
        MOV     R3,A
        LCALL   ??Delay_ms?relay
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LJMP    ??SampleApp_ProcessEvent_14 & 0xFFFF
??SampleApp_ProcessEvent_18:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??SampleApp_ProcessEvent_19
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_25:
        JZ      ??SampleApp_ProcessEvent_17
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPMODE=0\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPMODE=0\\r\\n">` >> 8) & 0xff
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,#0x4
        LJMP    ??SampleApp_ProcessEvent_13 & 0xFFFF
??SampleApp_ProcessEvent_19:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??SampleApp_ProcessEvent_20
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_26:
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 280)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 278)
        ; Setup parameters for call to function sprintf
        MOV     ?V0 + 0,#`?<Constant "version=2018-10-31&re...">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "version=2018-10-31&re...">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 280)
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 282)
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 284)
        MOV     R4,#`?<Constant "AT+MQTTUSERCFG=0,1,\\"%...">` & 0xff
        MOV     R5,#(`?<Constant "AT+MQTTUSERCFG=0,1,\\"%...">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 278)
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Delay_ms?relay
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2b
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+MQTTCONN=0,\\"mqtts....">` & 0xff
        MOV     R3,#(`?<Constant "AT+MQTTCONN=0,\\"mqtts....">` >> 8) & 0xff
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV     A,#0x5
        LJMP    ??SampleApp_ProcessEvent_13 & 0xFFFF
??SampleApp_ProcessEvent_20:
        MOVX    A,@DPTR
        XRL     A,#0x5
        JZ      $+5
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
        ; Setup parameters for call to function strstr
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_28:
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 280)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 278)
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 280)
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 282)
        MOV     R4,#`?<Constant "AT+MQTTSUB=0,\\"$sys/%s...">` & 0xff
        MOV     R5,#(`?<Constant "AT+MQTTSUB=0,\\"$sys/%s...">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 278)
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        LCALL   ?Subroutine3 & 0xFFFF
//  410     }
??CrossCallReturnLabel_32:
        MOV     A,#0x6
        LJMP    ??SampleApp_ProcessEvent_13 & 0xFFFF
//  411 
//  412     // return unprocessed events
//  413     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_6:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_21:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_22
//  414   }
//  415 
//  416   // Send a message out - This event is generated by a timer
//  417   //  (setup in SampleApp_Init()). Ð­µ÷Æ÷²»Ö´ÐÐ¶¨Ê±·¢ËÍº¯Êý
//  418   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_2:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_23
//  419   {
//  420     // Send the periodic message
//  421     SampleApp_SendPeriodicMessage();
        ; Setup parameters for call to function SampleApp_SendPeriodicMessage
        LCALL   ??SampleApp_SendPeriodicMessage?relay
//  422 
//  423     // Setup to send message again in normal period (+ a little jitter)
//  424     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  425         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x48
        MOV     R4,A
        CLR     A
        ADDC    A,#0xb
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  426 
//  427     // return unprocessed events
//  428     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_21
//  429   }
//  430 
//  431   // Discard unknown events
//  432   return 0;
??SampleApp_ProcessEvent_23:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_22:
        MOV     DPL,#0x0
        MOV     DPH,#0x1
        LCALL   ?ADD_XSTACK_DISP0_16
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
        REQUIRE _A_IEN0
        REQUIRE WDCTL
//  433 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV     ?V0 + 13,R3
        MOV     A,R2
        ORL     A,?V0 + 13
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_3
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_24
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_25
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_26
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_27
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_28
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??strstr?relay
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        LCALL   ?Subroutine12 & 0xFFFF
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30
??CrossCallReturnLabel_23:
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        MOV     R1,#0x1
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        LCALL   ??HalUARTWrite?relay
        MOV     DPTR,#flat
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_31
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_32
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 278)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
        ; Setup parameters for call to function Delay_ms
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Delay_ms?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49
//  434 
//  435 /*********************************************************************
//  436  * Event Generation Functions
//  437  */
//  438 /*********************************************************************
//  439  * @fn      SampleApp_HandleKeys
//  440  *
//  441  * @brief   Handles all key events for this device.
//  442  *
//  443  * @param   shift - true if in shift/alt.
//  444  * @param   keys - bit field for key events. Valid entries:
//  445  *                 HAL_KEY_SW_2
//  446  *                 HAL_KEY_SW_1
//  447  *
//  448  * @return  none
//  449  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  450 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  451 {
        FUNCALL SampleApp_HandleKeys, SampleApp_SendFlashMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  452   (void)shift;  // Intentionally unreferenced parameter
//  453   
//  454   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_HandleKeys_0
//  455   {
//  456     /* This key sends the Flash Command is sent to Group 1.
//  457      * This device will not receive the Flash Command from this
//  458      * device (even if it belongs to group 1).
//  459      */
//  460     SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
        ; Setup parameters for call to function SampleApp_SendFlashMessage
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??SampleApp_SendFlashMessage?relay
//  461   }
//  462 
//  463   if ( keys & HAL_KEY_SW_2 )
??SampleApp_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??SampleApp_HandleKeys_1
//  464   {
//  465     /* The Flashr Command is sent to Group 1.
//  466      * This key toggles this device in and out of group 1.
//  467      * If this device doesn't belong to group 1, this application
//  468      * will not receive the Flash command sent to group 1.
//  469      */
//  470     aps_Group_t *grp;
//  471     grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
//  472     if ( grp )
        ; Setup parameters for call to function aps_FindGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_FindGroup?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SampleApp_HandleKeys_2
//  473     {
//  474       // Remove from the group
//  475       aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
        ; Setup parameters for call to function aps_RemoveGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_RemoveGroup?relay
        SJMP    ??SampleApp_HandleKeys_1
//  476     }
//  477     else
//  478     {
//  479       // Add to the flash group
//  480       aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
??SampleApp_HandleKeys_2:
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
        CFI EndBlock cfiBlock50
//  481     }
//  482   }
//  483 }
??SampleApp_HandleKeys_1:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock51
//  484 
//  485 /*********************************************************************
//  486  * LOCAL FUNCTIONS
//  487  */
//  488 
//  489 /*********************************************************************
//  490  * @fn      SampleApp_MessageMSGCB
//  491  *
//  492  * @brief   Data message processor callback.  This function processes
//  493  *          any incoming data - probably from other devices.  So, based
//  494  *          on cluster ID, perform the intended action.
//  495 *
//  496  * @param   none
//  497  *
//  498  * @return  none
//  499  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  500 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock52 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  501 {
        FUNCALL SampleApp_MessageMSGCB, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 285, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 285, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 285, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 285, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strncpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 285, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strncpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 285, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strncpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 285, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strncpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 285, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 285, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 291, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 291, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 291, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 291, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 285, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 285, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 283, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 283, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 267
        MOV     DPL,#-0xb
        MOV     DPH,#-0x2
        LCALL   ?ADD_XSTACK_DISP0_16
        CFI CFA_XSP16 add(XSP16, 283)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  502   uint16 flashTime;
//  503   char HttpData[256];
//  504   char check[3];//Õâ¸öÊý×éÓÃÓÚ¼ì²éÎÂÊª¶ÈÊý¾ÝÊÇ·ñÕýÈ·ÒÔ¼°ÓÃÓÚºÏ²¢¶à¸öÖÕ¶ËÊý¾ÝµÄÖÐ¼ä±äÁ¿
//  505   char tem[3];
//  506   char hum[3];
//  507   char guang[2];
//  508   //char kaiguan[2];
//  509   uint8 led1_flag;
//  510   P0DIR |= 0x40; // ÅäÖÃP0.6ÎªÊä³ö
        ORL     0xfd,#0x40
//  511   memset(HttpData,0,256);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 285)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 283)
//  512   memset(tem,0,3);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 2,#0x3
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 285)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 283)
//  513   memset(hum,0,3);
        ; Setup parameters for call to function memset
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 285)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 283)
//  514   switch ( pkt->clusterId )
        MOV     A,?V0 + 0
        ADD     A,#0x21
        MOV     R6,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_2
        CODE
//  515   {
//  516     case SAMPLEAPP_P2P_CLUSTERID:
//  517 
//  518       break;    
//  519     case SAMPLEAPP_PERIODIC_CLUSTERID:
//  520       HalUARTWrite(0, "\r\n================\r\n", 20);                          //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
??SampleApp_MessageMSGCB_1:
        MOV     ?V0 + 2,#`?<Constant "\\r\\n================\\r\\n">` & 0xff
        MOV     ?V0 + 3,#(`?<Constant "\\r\\n================\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  521       HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength);                      //Êä³ö½ÓÊÕµ½µÄÊý¾Ý{"tem1":23,"hum1":58} ³¤¶ÈÊÇ21
        MOV     A,?V0 + 0
        ADD     A,#0x1f
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function HalUARTWrite
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  522       HalUARTWrite(0, "\r\n================\r\n", 20);                          //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  523       LCD_P8x16Str(0, 6, "                ");
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant "                ">` & 0xff
        MOV     R5,#(`?<Constant "                ">` >> 8) & 0xff
        MOV     R2,#0x6
        MOV     R1,#0x0
        LCALL   ??LCD_P8x16Str?relay
//  524       LCD_P8x16Str(0, 6, LYPASSWD);
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant "woshiyxr">` & 0xff
        MOV     R5,#(`?<Constant "woshiyxr">` >> 8) & 0xff
        MOV     R2,#0x6
        MOV     R1,#0x0
        LCALL   ??LCD_P8x16Str?relay
//  525       if(ibusy==1) //»¹ÔÚ·¢Êý¾ÝµÄÊ±ºò·µ»Ø
        MOV     DPTR,#ibusy
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     $+5
        LJMP    ??SampleApp_MessageMSGCB_3 & 0xFFFF
//  526         return ;
//  527        //tcpÁ¬½Ó³É¹¦²¢ÇÒÊÕµ½ÖÕ¶ËÊý¾ÝºóÏòÆ½Ì¨·¢ËÍÎÂÊª¶È
//  528       if(flat==6)
        MOV     DPTR,#flat
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_4 & 0xFFFF
//  529       {
//  530         //flagµÄ×÷ÓÃÊÇÉè±¸¸ÕÉÏµçµÚÒ»´Î¶ÁÈ¡Êý¾ÝÊ±£¬¶Á³öµÄÊý¾ÝÎª¡°01¡±£¬²»ÕýÈ·ÇÒ»á±»ÉÏ´«£¬Ìí¼ÓflagºóÉè±¸»áÔÚµÚ¶þ´Î²Å¿ªÊ¼ÉÏ´«Êý¾Ý
//  531         if(pkt->cmd.DataLength==30)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,#0x1e
        JNZ     ??SampleApp_MessageMSGCB_5
        INC     DPTR
        MOVX    A,@DPTR
??SampleApp_MessageMSGCB_5:
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_6 & 0xFFFF
//  532         {
//  533           //memset(check,0,3);
//  534           //strncpy(check,(char const *)pkt->cmd.Data+8,2);         
//  535           if(1)//(check[0]!='0'&&check[1]!='1') //È¥³ýÎÂ¶È01 
//  536           {
//  537             //memset(check,0,3);
//  538             //strncpy(check,(char const *)pkt->cmd.Data+18,2);
//  539             if(1)//(check[0]!='0'&&check[1]!='1') //È¥³ýÊª¶È01
//  540             {
//  541                 ibusy = 1;  //½øÈë·¢Éäº¯Êý ¿ªÊ¼Ã¦Âµ
        MOV     DPTR,#ibusy
        MOV     A,#0x1
        MOVX    @DPTR,A
//  542                 //°Ñ½ÓÊÕµ½µÄÏûÏ¢½øÐÐÒ»¸ö×Ö·û´®½ØÈ¡²Ù×÷£¬½ØÈ¡×Ö·û´®µ±ÖÐµÄÎÂÊª¶ÈÊýÖµ
//  543                 memset(check,0,3);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 285)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 283)
//  544                 strncpy(check,(char const *)pkt->cmd.Data+5,1); //µÃµ½ÖÕ¶Ë¼¸
        ; Setup parameters for call to function strncpy
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 285)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x5
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 283)
//  545                 
//  546                 if(check[0]=='1') //ÖÕ¶Ë1µÄÊý¾Ý
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x31
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_7 & 0xFFFF
//  547                 {
//  548                   strncpy(tem,(char const *)pkt->cmd.Data+8,2);
        ; Setup parameters for call to function strncpy
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 285)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x8
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 283)
//  549                   strncpy(hum,(char const *)pkt->cmd.Data+18,2);
        ; Setup parameters for call to function strncpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 285)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x12
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 283)
//  550                   strncpy(guang,(char const *)pkt->cmd.Data+28,1);
        ; Setup parameters for call to function strncpy
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 285)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x1c
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 283)
//  551                   hum_new = atoi(hum);
        ; Setup parameters for call to function atoi
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??atoi?relay
        MOV     A,R2
        MOV     DPTR,#hum_new
        MOVX    @DPTR,A
//  552                   //P0DIR |= 0x40;
//  553                   if( hum_new >= 70 /*&& hum_old < 80*/)
        CLR     C
        SUBB    A,#0x46
        JC      ??SampleApp_MessageMSGCB_8
//  554                   {
//  555                     //relay ^= 1;
//  556                     //RELAY = relay;
//  557                     RELAY = 1;
        SETB    0x80.6
//  558                     HalLedBlink(HAL_LED_2, 3, 50, 500);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x3
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
        SJMP    ??SampleApp_MessageMSGCB_9
//  559                   }
//  560                   else
//  561                   {
//  562                     //relay ^= 1;
//  563                     //RELAY = relay;
//  564                     RELAY = 0;
??SampleApp_MessageMSGCB_8:
        CLR     0x80.6
//  565                     //HalLedBlink(HAL_LED_2, 3, 50, 500);
//  566                   }
//  567                   
//  568                   sprintf(HttpData,"AT+MQTTPUB=0,\"$sys/%s/%s/thing/property/post\",\"{\\\"id\\\":\\\"2313\\\"\\\,\\\"version\\\":\\\"1.0\\\"\\\,\\\"params\\\":{\\\"temperature\\\":{\\\"value\\\":%d}\\\,\\\"humidity\\\":{\\\"value\\\":%d}}}\",0,0\r\n",proid,devid, atoi(tem), atoi(hum));
??SampleApp_MessageMSGCB_9:
        ; Setup parameters for call to function atoi
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??atoi?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,#`?<Constant "9dBJ0I0C3F">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "9dBJ0I0C3F">` >> 8) & 0xff
        MOV     ?V0 + 2,#`?<Constant "yinxingru">` & 0xff
        MOV     ?V0 + 3,#(`?<Constant "yinxingru">` >> 8) & 0xff
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 285)
        ; Setup parameters for call to function atoi
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 287)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 289)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 291)
        MOV     R4,#`?<Constant "AT+MQTTPUB=0,\\"$sys/%s...">` & 0xff
        MOV     R5,#(`?<Constant "AT+MQTTPUB=0,\\"$sys/%s...">` >> 8) & 0xff
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 283)
//  569                   HalUARTWrite(1,(unsigned char *) HttpData,strlen(HttpData));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  570                   Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
//  571                   sprintf(HttpData,"AT+MQTTPUB=0,\"$sys/%s/%s/thing/property/post\",\"{\\\"id\\\":\\\"2313\\\"\\\,\\\"version\\\":\\\"1.0\\\"\\\,\\\"params\\\":{\\\"adc\\\":{\\\"value\\\":%d}\\\,\\\"guang\\\":{\\\"value\\\":%d}}}\",0,0\r\n",proid,devid, adc, atoi(guang));
        ; Setup parameters for call to function atoi
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 285)
        MOV     DPTR,#adc
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 287)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 289)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 291)
        MOV     R4,#`?<Constant "AT+MQTTPUB=0,\\"$sys/%s...">_1` & 0xff
        MOV     R5,#(`?<Constant "AT+MQTTPUB=0,\\"$sys/%s...">_1` >> 8) & 0xff
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 283)
//  572                   HalUARTWrite(1,(unsigned char *) HttpData,strlen(HttpData));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  573                     
//  574                 }
??CrossCallReturnLabel_15:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  575                 
//  576                 
//  577                 memset(check,0,3);
??SampleApp_MessageMSGCB_7:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 285)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 283)
//  578                 //HalUARTWrite(1,(unsigned char *) HttpData,strlen(HttpData));
//  579                 ibusy = 0;//Ã¦Âµ½áÊø 
        MOV     DPTR,#ibusy
        CLR     A
        MOVX    @DPTR,A
//  580             }
//  581           }
//  582          
//  583         }
//  584        
//  585         LCD_P8x16Str(0, 4, "Send NET Data ..");
??SampleApp_MessageMSGCB_6:
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant "Send NET Data ..">` & 0xff
        MOV     R5,#(`?<Constant "Send NET Data ..">` >> 8) & 0xff
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??LCD_P8x16Str?relay
//  586 
//  587       }
//  588       else
//  589       {
//  590         SystemReset();
//  591       }
//  592       break;
        SJMP    ??SampleApp_MessageMSGCB_0
??SampleApp_MessageMSGCB_4:
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??SampleApp_MessageMSGCB_10:
        SJMP    ??SampleApp_MessageMSGCB_10
//  593 
//  594     case SAMPLEAPP_FLASH_CLUSTERID:
//  595        
//  596           led1_flag = (uint8)pkt->cmd.Data[0];
//  597          /* if(led1_flag == 1)
//  598             HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
//  599           else
//  600             HalLedBlink(HAL_LED_2, 3, 50, 500);*/
//  601           HalLedSet(HAL_LED_1,led1_flag);
??SampleApp_MessageMSGCB_2:
        ; Setup parameters for call to function HalLedSet
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  602         
//  603       break;
//  604   }
//  605   P0DIR &= 0xbf;
??SampleApp_MessageMSGCB_0:
        ANL     0xfd,#0xbf
//  606 }
??SampleApp_MessageMSGCB_3:
        MOV     DPL,#0xb
        MOV     DPH,#0x1
        LCALL   ?ADD_XSTACK_DISP0_16
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock52
        REQUIRE P0DIR
        REQUIRE _A_P0
        REQUIRE _A_IEN0
        REQUIRE WDCTL

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 285)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 283)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??atoi?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 285)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 285)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 285)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 285)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strncpy?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 283)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 283)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0xb
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 280)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 280)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 280)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 285)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 285)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 285)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 285)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 285)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72
//  607 
//  608 /*********************************************************************
//  609  * @fn      SampleApp_SendPeriodicMessage
//  610  *
//  611  * @brief   Send the periodic message.
//  612  *
//  613  * @param   none
//  614  *
//  615  * @return  none
//  616  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  617 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock73 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  618 {
        FUNCALL SampleApp_SendPeriodicMessage, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, DHT11
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 27
        MOV     A,#-0x1b
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  619   byte i, temp[3], humidity[3], strTemp[21];
//  620   Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
//  621   DHT11();             //»ñÈ¡ÎÂÊª¶È
        ; Setup parameters for call to function DHT11
        LCALL   ??DHT11?relay
//  622   Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
//  623   //½«ÎÂÊª¶ÈµÄ×ª»»³É×Ö·û´®,¹©LCDÏÔÊ¾  
//  624   temp[0] = wendu_shi+0x30;
        MOV     DPTR,#wendu_shi
        MOVX    A,@DPTR
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  625   temp[1] = wendu_ge+0x30;
        MOV     DPTR,#wendu_ge
        MOVX    A,@DPTR
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  626   temp[2] = '\0';
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  627   humidity[0] = shidu_shi+0x30;
        MOV     DPTR,#shidu_shi
        MOVX    A,@DPTR
        ADD     A,#0x30
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  628   humidity[1] = shidu_ge+0x30;
        MOV     DPTR,#shidu_ge
        MOVX    A,@DPTR
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  629   humidity[2] = '\0';
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  630   //½«Êý¾ÝÕûºÏºó·½±ã·¢¸øÐ­µ÷Æ÷ÏÔÊ¾
//  631   //{"temp": ,"hum": }
//  632 //  osal_memcpy(strTemp, temp, 2); 
//  633 //  osal_memcpy(&strTemp[2], "  ", 2);
//  634 //  osal_memcpy(&strTemp[4], humidity, 3);
//  635   
//  636    osal_memcpy(strTemp,"{\"temp1\":", 9); 
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "{\\"temp1\\":">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "{\\"temp1\\":">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  637    osal_memcpy(&strTemp[9],temp, 2);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  638    osal_memcpy(&strTemp[11],",\"hum1\":", 8);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant ",\\"hum1\\":">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant ",\\"hum1\\":">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  639    osal_memcpy(&strTemp[19],humidity, 2);
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  640    osal_memcpy(&strTemp[21],"}", 1);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "}">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "}">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  641   
//  642   //»ñµÃµÄÎÂÊª¶ÈÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾
//  643   HalUARTWrite(0, "T&H:", 4);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "T&H:">` & 0xff
        MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  644   HalUARTWrite(0, strTemp, 22);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x16
        MOV     R5,#0x0
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  645   HalUARTWrite(0, "\n",1);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  646 
//  647   //Êä³öµ½LCDÏÔÊ¾
//  648   for(i=0; i<3; i++)
//  649   {   
//  650     if(i==0)
//  651     {
//  652       LCD_P16x16Ch(i*16,4,i*16);
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0x0
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??LCD_P16x16Ch?relay
//  653       LCD_P16x16Ch(i*16,6,(i+3)*16);
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0x30
        MOV     R2,#0x6
        MOV     R1,#0x0
        LCALL   ??LCD_P16x16Ch?relay
//  654     }
        MOV     R7,#0x1
//  655     else
//  656     {
//  657       LCD_P16x16Ch(i*16,4,i*16);
??SampleApp_SendPeriodicMessage_0:
        MOV     A,R7
        SWAP    A
        ANL     A,#0xf0
        MOV     R6,A
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,A
        MOV     R2,#0x4
        MOV     R1,A
        LCALL   ??LCD_P16x16Ch?relay
//  658       LCD_P16x16Ch(i*16,6,i*16);        
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     A,R6
        MOV     R3,A
        MOV     R2,#0x6
        MOV     R1,A
        LCALL   ??LCD_P16x16Ch?relay
//  659     }
//  660   } 
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x3
        JC      ??SampleApp_SendPeriodicMessage_0
//  661   LCD_P8x16Str(44, 4, temp);
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x4
        MOV     R1,#0x2c
        LCALL   ??LCD_P8x16Str?relay
//  662   LCD_P8x16Str(44, 6, humidity);
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x6
        MOV     R1,#0x2c
        LCALL   ??LCD_P8x16Str?relay
//  663   
//  664     if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  665                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  666                        22,
//  667                        strTemp,
//  668                        &SampleApp_TransID,
//  669                        AF_DISCV_ROUTE,
//  670                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     ?V0 + 0,#0x16
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  671   {
//  672   }
//  673   else
//  674   {
//  675     // Error occurred in request to send.
//  676   }
//  677 }
        MOV     A,#0x1b
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond74 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker79 Using cfiCommon1
        CFI (cfiPicker79) NoFunction
        CFI (cfiPicker79) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiPicker79
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
        CFI Block cfiCond80 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker86 Using cfiCommon1
        CFI (cfiPicker86) NoFunction
        CFI (cfiPicker86) Picker
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiPicker86
//  678 
//  679 /*********************************************************************
//  680  * @fn      SampleApp_SendFlashMessage
//  681  *
//  682  * @brief   Send the flash message to group 1.
//  683  *
//  684  * @param   flashTime - in milliseconds
//  685  *
//  686  * @return  none
//  687  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  688 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
        CFI Block cfiBlock87 Using cfiCommon0
        CFI Function SampleApp_SendFlashMessage
        CODE
//  689 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  690   uint8 buffer[3];
//  691   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  692   buffer[1] = LO_UINT16( flashTime );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  693   buffer[2] = HI_UINT16( flashTime );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  694 
//  695   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  696                        SAMPLEAPP_FLASH_CLUSTERID,
//  697                        3,
//  698                        buffer,
//  699                        &SampleApp_TransID,
//  700                        AF_DISCV_ROUTE,
//  701                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  702   {
//  703   }
//  704   else
//  705   {
//  706     // Error occurred in request to send.
//  707   }
//  708 }
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock87

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for flat>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReSetWifi?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReSetWifi

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendFlashMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendFlashMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CoordinatorZB\\r\\n">`:
        DB "CoordinatorZB\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT\\r\\n">`:
        DB "AT\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SampleApp">`:
        DB "SampleApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "2022442778.com ">`:
        DB "2022442778.com "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Get UART1 Data .">`:
        DB "Get UART1 Data ."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "                ">`:
        DB "                "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "yinxingru">`:
        DB "yinxingru"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OK">`:
        DB "OK"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWMODE=1\\r\\n">`:
        DB "AT+CWMODE=1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZIGBEE-WIFI OK\\r\\n">`:
        DB "ZIGBEE-WIFI OK\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MQTTCONNECTED">`:
        DB "MQTTCONNECTED"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ERROR">`:
        DB "ERROR"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">`:
        DB "AT+CWJAP=\"%s\",\"%s\"\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "woshiyxr">`:
        DB "woshiyxr"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPMODE=0\\r\\n">`:
        DB "AT+CIPMODE=0\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+MQTTUSERCFG=0,1,\\"%...">`:
        DB "AT+MQTTUSERCFG=0,1,\"%s\",\"%s\",\"%s\",0,0,\"\"\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "9dBJ0I0C3F">`:
        DB "9dBJ0I0C3F"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "version=2018-10-31&re...">`:
        DB 76H, 65H, 72H, 73H, 69H, 6FH, 6EH, 3DH
        DB 32H, 30H, 31H, 38H, 2DH, 31H, 30H, 2DH
        DB 33H, 31H, 26H, 72H, 65H, 73H, 3DH, 70H
        DB 72H, 6FH, 64H, 75H, 63H, 74H, 73H, 25H
        DB 32H, 46H, 39H, 64H, 42H, 4AH, 30H, 49H
        DB 30H, 43H, 33H, 46H, 25H, 32H, 46H, 64H
        DB 65H, 76H, 69H, 63H, 65H, 73H, 25H, 32H
        DB 46H, 79H, 69H, 6EH, 78H, 69H, 6EH, 67H
        DB 72H, 75H, 26H, 65H, 74H, 3DH, 31H, 37H
        DB 35H, 31H, 31H, 38H, 30H, 32H, 31H, 38H
        DB 26H, 6DH, 65H, 74H, 68H, 6FH, 64H, 3DH
        DB 6DH, 64H, 35H, 26H, 73H, 69H, 67H, 6EH
        DB 3DH, 4AH, 4CH, 57H, 78H, 4BH, 52H, 71H
        DB 77H, 6AH, 61H, 53H, 44H, 5AH, 49H, 72H
        DB 55H, 71H, 77H, 72H, 67H, 56H, 67H, 25H
        DB 33H, 44H, 25H, 33H, 44H, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+MQTTCONN=0,\\"mqtts....">`:
        DB "AT+MQTTCONN=0,\"mqtts.heclouds.com\",1883,1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+MQTTSUB=0,\\"$sys/%s...">`:
        DB 41H, 54H, 2BH, 4DH, 51H, 54H, 54H, 53H
        DB 55H, 42H, 3DH, 30H, 2CH, 22H, 24H, 73H
        DB 79H, 73H, 2FH, 25H, 73H, 2FH, 25H, 73H
        DB 2FH, 74H, 68H, 69H, 6EH, 67H, 2FH, 70H
        DB 72H, 6FH, 70H, 65H, 72H, 74H, 79H, 2FH
        DB 70H, 6FH, 73H, 74H, 2FH, 72H, 65H, 70H
        DB 6CH, 79H, 22H, 2CH, 31H, 0DH, 0AH, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n================\\r\\n">`:
        DB "\015\012================\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+MQTTPUB=0,\\"$sys/%s...">`:
        DB 41H, 54H, 2BH, 4DH, 51H, 54H, 54H, 50H
        DB 55H, 42H, 3DH, 30H, 2CH, 22H, 24H, 73H
        DB 79H, 73H, 2FH, 25H, 73H, 2FH, 25H, 73H
        DB 2FH, 74H, 68H, 69H, 6EH, 67H, 2FH, 70H
        DB 72H, 6FH, 70H, 65H, 72H, 74H, 79H, 2FH
        DB 70H, 6FH, 73H, 74H, 22H, 2CH, 22H, 7BH
        DB 5CH, 22H, 69H, 64H, 5CH, 22H, 3AH, 5CH
        DB 22H, 32H, 33H, 31H, 33H, 5CH, 22H, 5CH
        DB 2CH, 5CH, 22H, 76H, 65H, 72H, 73H, 69H
        DB 6FH, 6EH, 5CH, 22H, 3AH, 5CH, 22H, 31H
        DB 2EH, 30H, 5CH, 22H, 5CH, 2CH, 5CH, 22H
        DB 70H, 61H, 72H, 61H, 6DH, 73H, 5CH, 22H
        DB 3AH, 7BH, 5CH, 22H, 74H, 65H, 6DH, 70H
        DB 65H, 72H, 61H, 74H, 75H, 72H, 65H, 5CH
        DB 22H, 3AH, 7BH, 5CH, 22H, 76H, 61H, 6CH
        DB 75H, 65H, 5CH, 22H, 3AH, 25H, 64H, 7DH
        DB 5CH, 2CH, 5CH, 22H, 68H, 75H, 6DH, 69H
        DB 64H, 69H, 74H, 79H, 5CH, 22H, 3AH, 7BH
        DB 5CH, 22H, 76H, 61H, 6CH, 75H, 65H, 5CH
        DB 22H, 3AH, 25H, 64H, 7DH, 7DH, 7DH, 22H
        DB 2CH, 30H, 2CH, 30H, 0DH, 0AH, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+MQTTPUB=0,\\"$sys/%s...">_1`:
        DB 41H, 54H, 2BH, 4DH, 51H, 54H, 54H, 50H
        DB 55H, 42H, 3DH, 30H, 2CH, 22H, 24H, 73H
        DB 79H, 73H, 2FH, 25H, 73H, 2FH, 25H, 73H
        DB 2FH, 74H, 68H, 69H, 6EH, 67H, 2FH, 70H
        DB 72H, 6FH, 70H, 65H, 72H, 74H, 79H, 2FH
        DB 70H, 6FH, 73H, 74H, 22H, 2CH, 22H, 7BH
        DB 5CH, 22H, 69H, 64H, 5CH, 22H, 3AH, 5CH
        DB 22H, 32H, 33H, 31H, 33H, 5CH, 22H, 5CH
        DB 2CH, 5CH, 22H, 76H, 65H, 72H, 73H, 69H
        DB 6FH, 6EH, 5CH, 22H, 3AH, 5CH, 22H, 31H
        DB 2EH, 30H, 5CH, 22H, 5CH, 2CH, 5CH, 22H
        DB 70H, 61H, 72H, 61H, 6DH, 73H, 5CH, 22H
        DB 3AH, 7BH, 5CH, 22H, 61H, 64H, 63H, 5CH
        DB 22H, 3AH, 7BH, 5CH, 22H, 76H, 61H, 6CH
        DB 75H, 65H, 5CH, 22H, 3AH, 25H, 64H, 7DH
        DB 5CH, 2CH, 5CH, 22H, 67H, 75H, 61H, 6EH
        DB 67H, 5CH, 22H, 3AH, 7BH, 5CH, 22H, 76H
        DB 61H, 6CH, 75H, 65H, 5CH, 22H, 3AH, 25H
        DB 64H, 7DH, 7DH, 7DH, 22H, 2CH, 30H, 2CH
        DB 30H, 0DH, 0AH, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Send NET Data ..">`:
        DB "Send NET Data .."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "{\\"temp1\\":">`:
        DB "{\"temp1\":"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant ",\\"hum1\\":">`:
        DB ",\"hum1\":"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "}">`:
        DB "}"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "T&H:">`:
        DB "T&H:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "\\n">`:
        DB "\012"

        END
//  709 
//  710 
//  711 
//  712 /*********************************************************************
//  713 *********************************************************************/
// 
// 2 628 bytes in segment BANKED_CODE
//    42 bytes in segment BANK_RELAYS
//     5 bytes in segment SFR_AN
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//   883 bytes in segment XDATA_ROM_C
//    72 bytes in segment XDATA_Z
// 
// 2 671 bytes of CODE  memory
//   883 bytes of CONST memory
//     0 bytes of DATA  memory (+ 5 bytes shared)
//    73 bytes of XDATA memory
//
//Errors: none
//Warnings: 9
