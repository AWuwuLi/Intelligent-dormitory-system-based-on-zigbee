###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         27/Jun/2025  14:47:04 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC #
#                          2530-2.3.0-1.4.0\Components\mt\MT_UART.c           #
#    Command line       =  -f "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ #
#                          ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg #
#                          " (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f  #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"  #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00020000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Components\mt\MT_UART.c" -D      #
#                          ZIGBEEPRO -D NWK_AUTO_POLL -D xMT_TASK -D          #
#                          ZTOOL_P1 -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC "D:\Program                #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\E #
#                          ndDeviceEB-2\List\" -lA "D:\Program                #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\E #
#                          ndDeviceEB-2\List\" --diag_suppress Pe001,Pa010    #
#                          -o "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ #
#                          ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB-2\Obj\" -e --debug       #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\Program                #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\" #
#                           -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍ #
#                          µ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZSta #
#                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\SOURCE\" -I "D:\Program          #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\ZMAIN\TI2530DB\" -I "D:\Program            #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MT\" -I "D:\Program       #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I          #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC #
#                          2530EB\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍø #
#                          WiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\O #
#                          SAL\MCU\CCSOC\" -I "D:\Program                     #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I         #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"    #
#                          -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ #
#                          ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ #
#                          " -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢Ë #
#                          Íµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZSt #
#                          ack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi· #
#                          ¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ #
#                          SAPI\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWi #
#                          Fi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENE #
#                          T\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\SYS\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍø #
#                          WiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S #
#                          TACK\ZDO\" -I "D:\Program                          #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\ZMAC\F8W\" -I             #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I     #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADD #
#                          R\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi· #
#                          ¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVIC #
#                          ES\SDATA\" -I "D:\Program                          #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MAC\INCLUDE\" -I          #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVE #
#                          L\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi· #
#                          ¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LO #
#                          W_LEVEL\srf04\" -I "D:\Program                     #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGL #
#                          E_CHIP\" -Ohz --require_prototypes                 #
#    List file          =  D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\EndDeviceEB-2\List\MT_UART.lst           #
#    Object file        =  D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\EndDeviceEB-2\Obj\MT_UART.r51            #
#                                                                             #
#                                                                             #
###############################################################################

D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_UART.c
      1          /***************************************************************************************************
      2            Filename:       MT_UART.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:  This module handles anything dealing with the serial port.
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "hal_uart.h"
     46          #include "MT.h"
     47          #include "MT_UART.h"
     48          #include "OSAL_Memory.h"
     49          
     50          
     51          /***************************************************************************************************
     52           * MACROS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           * CONSTANTS
     57           ***************************************************************************************************/
     58          /* State values for ZTool protocal */
     59          #define SOP_STATE      0x00
     60          #define CMD_STATE1     0x01
     61          #define CMD_STATE2     0x02
     62          #define LEN_STATE      0x03
     63          #define DATA_STATE     0x04
     64          #define FCS_STATE      0x05
     65          
     66          /***************************************************************************************************
     67           *                                         GLOBAL VARIABLES
     68           ***************************************************************************************************/
     69          /* Used to indentify the application ID for osal task */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          byte App_TaskID;
   \                     App_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          
     72          /* ZTool protocal parameters */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          uint8 state;
   \                     state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8  CMD_Token[2];
   \                     CMD_Token:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          uint8  LEN_Token;
   \                     LEN_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8  FSC_Token;
   \                     FSC_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          mtOSALSerialData_t  *pMsg;
   \                     pMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          uint8  tempDataLen;
   \                     tempDataLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          
     80          #if defined (ZAPP_P1) || defined (ZAPP_P2)
     81          uint16  MT_UartMaxZAppBufLen;
     82          bool    MT_UartZAppRxStatus;
     83          #endif
     84          
     85          
     86          /***************************************************************************************************
     87           *                                          LOCAL FUNCTIONS
     88           ***************************************************************************************************/
     89          
     90          /***************************************************************************************************
     91           * @fn      MT_UartInit
     92           *
     93           * @brief   Initialize MT with UART support
     94           *
     95           * @param   None
     96           *
     97           * @return  None
     98          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          void MT_UartInit ()
   \                     MT_UartInit:
    100          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    101            halUARTCfg_t uartConfig;
    102          
    103            /* Initialize APP ID */
    104            App_TaskID = 0;
   \   000009   90....       MOV     DPTR,#App_TaskID
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
    105          
    106            /* UART Configuration */
    107            uartConfig.configured           = TRUE;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    108            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   7404         MOV     A,#0x4
   \   00001B   F0           MOVX    @DPTR,A
    109            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
    110            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   000023   7403         MOV     A,#0x3
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   7480         MOV     A,#-0x80
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
    111            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   00002E   740A         MOV     A,#0xa
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   04           INC     A
   \   000037   F0           MOVX    @DPTR,A
    112            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   000038   7412         MOV     A,#0x12
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   04           INC     A
   \   000041   F0           MOVX    @DPTR,A
    113            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \   000042   7405         MOV     A,#0x5
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   7406         MOV     A,#0x6
   \   000049   F0           MOVX    @DPTR,A
    114            uartConfig.intEnable            = TRUE;
   \   00004A   7416         MOV     A,#0x16
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   7401         MOV     A,#0x1
   \   000051   F0           MOVX    @DPTR,A
    115          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    116            uartConfig.callBackFunc         = MT_UartProcessZToolData;
   \   000052   741B         MOV     A,#0x1b
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   74..         MOV     A,#??MT_UartProcessZToolData?relay & 0xff
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   74..         MOV     A,#(??MT_UartProcessZToolData?relay >> 8) & 0xff
   \   00005D   F0           MOVX    @DPTR,A
    117          #elif defined (ZAPP_P1) || defined (ZAPP_P2)
    118            uartConfig.callBackFunc         = MT_UartProcessZAppData;
    119          #else
    120            uartConfig.callBackFunc         = NULL;
    121          #endif
    122          
    123            /* Start UART */
    124          #if defined (MT_UART_DEFAULT_PORT)
    125            HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
   \   00005E                ; Setup parameters for call to function HalUARTOpen
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   7900         MOV     R1,#0x0
   \   00006A   12....       LCALL   ??HalUARTOpen?relay
    126            HalUARTOpen (1, &uartConfig);
   \   00006D                ; Setup parameters for call to function HalUARTOpen
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   AA82         MOV     R2,DPL
   \   000075   AB83         MOV     R3,DPH
   \   000077   7901         MOV     R1,#0x1
   \   000079   12....       LCALL   ??HalUARTOpen?relay
    127          #else
    128            /* Silence IAR compiler warning */
    129            (void)uartConfig;
    130          #endif
    131          
    132            /* Initialize for ZApp */
    133          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    134            /* Default max bytes that ZAPP can take */
    135            MT_UartMaxZAppBufLen  = 1;
    136            MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
    137          #endif
    138          
    139          }
   \   00007C   741D         MOV     A,#0x1d
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000081                REQUIRE ?Subroutine0
   \   000081                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    140          
    141          /***************************************************************************************************
    142           * @fn      MT_SerialRegisterTaskID
    143           *
    144           * @brief   This function registers the taskID of the application so it knows
    145           *          where to send the messages whent they come in.
    146           *
    147           * @param   void
    148           *
    149           * @return  void
    150           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void MT_UartRegisterTaskID( byte taskID )
   \                     MT_UartRegisterTaskID:
    152          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    153            App_TaskID = taskID;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#App_TaskID
   \   000008   F0           MOVX    @DPTR,A
    154          }
   \   000009   80..         SJMP    ?Subroutine0
    155          
    156          /***************************************************************************************************
    157           * @fn      SPIMgr_CalcFCS
    158           *
    159           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    160           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    161           *
    162           * @param   byte *msg_ptr - message pointer
    163           * @param   byte len - length (in bytes) of message
    164           *
    165           * @return  result byte
    166           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    167          byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
   \                     MT_UartCalcFCS:
    168          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
    169            byte x;
    170            byte xorResult;
    171          
    172            xorResult = 0;
   \   000006   7900         MOV     R1,#0x0
    173          
    174            for ( x = 0; x < len; x++, msg_ptr++ )
   \   000008   7800         MOV     R0,#0x0
   \   00000A   800E         SJMP    ??MT_UartCalcFCS_0
    175              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_1:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   C9           XCH     A,R1
   \   000012   69           XRL     A,R1
   \   000013   F9           MOV     R1,A
   \   000014   08           INC     R0
   \   000015   A3           INC     DPTR
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \                     ??MT_UartCalcFCS_0:
   \   00001A   E8           MOV     A,R0
   \   00001B   C3           CLR     C
   \   00001C   9C           SUBB    A,R4
   \   00001D   40ED         JC      ??MT_UartCalcFCS_1
    176          
    177            return ( xorResult );
   \   00001F   80..         SJMP    ?Subroutine0
    178          }
    179          
    180          
    181          /***************************************************************************************************
    182           * @fn      MT_UartProcessZToolData
    183           *
    184           * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
    185           *          |  1  |     1        |    2    |  0-Len   |   1   |
    186           *
    187           *          Parses the data and determine either is SPI or just simply serial data
    188           *          then send the data to correct place (MT or APP)
    189           *
    190           * @param   port     - UART port
    191           *          event    - Event that causes the callback
    192           *
    193           *
    194           * @return  None
    195           ***************************************************************************************************/
    196          //typedef struct
    197          //{
    198          //  osal_event_hdr_t  hdr; //¶¼ÊÇÕâÖÖÍ·²¿
    199          //  uint8             *msg;
    200          //} mtOSALSerialData_t; //´®¿ÚÊý¾ÝÏûÏ¢µÄÀàÐÍ
    201          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    202          void MT_UartProcessZToolData ( uint8 port, uint8 event )
   \                     MT_UartProcessZToolData:
    203          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
    204          
    205            uint8 *p;
    206          
    207            uint8 len = Hal_UART_RxBufLen(port); //ÏÈ»ñÈ¡ÐèÒª½ÓÊÕµÄÊý¾Ý³¤¶È
   \   000007                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000007   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   00000A   EA           MOV     A,R2
   \   00000B   F8           MOV     R0,A
    208          
    209            if (len <= 0) //Èç¹ûÃ»ÓÐÊý¾Ý½ÓÊÕÔòÖ±½Ó·µ»Ø
   \   00000C   606E         JZ      ??MT_UartProcessZToolData_0
    210              return;
    211          
    212           
    213            pMsg = (mtOSALSerialData_t *)osal_msg_allocate(sizeof(mtOSALSerialData_t)+len+1); 
   \   00000E   8882         MOV     DPL,R0
   \   000010   AE82         MOV     R6,DPL
   \   000012                ; Setup parameters for call to function osal_msg_allocate
   \   000012   2406         ADD     A,#0x6
   \   000014   FA           MOV     R2,A
   \   000015   E4           CLR     A
   \   000016   3400         ADDC    A,#0x0
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   ??osal_msg_allocate?relay
   \   00001C   90....       MOV     DPTR,#pMsg
   \   00001F   EA           MOV     A,R2
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   EB           MOV     A,R3
   \   000023   F0           MOVX    @DPTR,A
    214             pMsg->msg[2] = port; 
   \   000024   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   F0           MOVX    @DPTR,A
    215            //×¼±¸ÏûÏ¢µÄ»º³åÇø£¬len±íÊ¾´®¿ÚÊý¾Ý³¤¶È£¬ ¶à¼ÓµÄÒ»¸ö×Ö½ÚÓÃÓÚ´æ·Å´Ë´Î½ÓÊÕµÄÊý¾Ý³¤¶È¡£ 
    216            pMsg->msg = (uint8 *)(pMsg+1); //msgÖ¸ÏòÊý¾ÝµÄ¿ªÊ¼´æ·ÅÎ»ÖÃ
   \   00002C   90....       MOV     DPTR,#pMsg
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   2405         ADD     A,#0x5
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   3400         ADDC    A,#0x0
   \   000037   F9           MOV     R1,A
   \   000038   90....       MOV     DPTR,#pMsg
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F583         MOV     DPH,A
   \   000041   8A82         MOV     DPL,R2
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    217            p = &(pMsg->msg[1]); //±£ÁôÒ»¸ö×Ö½ÚÎ»ÖÃÓÃÓÚ´æ·Å½ÓÊÕµÄÊý¾Ý³¤¶È
    218            len = HalUARTRead (port, p, len); //½ÓÊÕÊý¾Ý  
   \   00004A                ; Setup parameters for call to function HalUARTRead
   \   00004A   EE           MOV     A,R6
   \   00004B   FC           MOV     R4,A
   \   00004C   7D00         MOV     R5,#0x0
   \   00004E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   2401         ADD     A,#0x1
   \   000056   FA           MOV     R2,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   3400         ADDC    A,#0x0
   \   00005B   FB           MOV     R3,A
   \   00005C   A9..         MOV     R1,?V0 + 0
   \   00005E   12....       LCALL   ??HalUARTRead?relay
    219            pMsg->msg[0] = len;  //¼ÇÂ¼Êý¾Ý³¤¶È¡£ ´æ·ÅµÄ¸ñÊ½: "ÏûÏ¢½á¹¹ÌåÄÚÈÝ" £« "³¤¶È" + "½ÓÊÕµ½µÄÊý¾ÝÄÚÈÝ"
   \   000061   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000064   EA           MOV     A,R2
   \   000065   F0           MOVX    @DPTR,A
    220            pMsg->hdr.event = CMD_SERIAL_MSG; //ÉèÖÃÏûÏ¢ÀàÐÍ
   \   000066   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000069   7401         MOV     A,#0x1
   \   00006B   F0           MOVX    @DPTR,A
    221          
    222            osal_msg_send( App_TaskID, (byte *)pMsg ); //·¢³öÏûÏ¢
   \   00006C                ; Setup parameters for call to function osal_msg_send
   \   00006C   90....       MOV     DPTR,#pMsg
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   FA           MOV     R2,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   FB           MOV     R3,A
   \   000074   90....       MOV     DPTR,#App_TaskID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   12....       LCALL   ??osal_msg_send?relay
    223          }
   \                     ??MT_UartProcessZToolData_0:
   \   00007C   7F04         MOV     R7,#0x4
   \   00007E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#pMsg
   \   000003                REQUIRE ??Subroutine4_0
   \   000003                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000008   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartRegisterTaskID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartRegisterTaskID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartCalcFCS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartCalcFCS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartProcessZToolData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartProcessZToolData
    224          //void MT_UartProcessZToolData ( uint8 port, uint8 event )
    225          //{
    226          //  uint8  ch;
    227          //  uint8  bytesInRxBuffer;
    228          //  
    229          //  (void)event;  // Intentionally unreferenced parameter
    230          //
    231          //  while (Hal_UART_RxBufLen(port))
    232          //  {
    233          //    HalUARTRead (port, &ch, 1);
    234          //
    235          //    switch (state)
    236          //    {
    237          //      case SOP_STATE:
    238          //        if (ch == MT_UART_SOF)
    239          //          state = LEN_STATE;
    240          //        break;
    241          //
    242          //      case LEN_STATE:
    243          //        LEN_Token = ch;
    244          //
    245          //        tempDataLen = 0;
    246          //
    247          //        /* Allocate memory for the data */
    248          //        pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) +
    249          //                                                        MT_RPC_FRAME_HDR_SZ + LEN_Token );
    250          //
    251          //        if (pMsg)
    252          //        {
    253          //          /* Fill up what we can */
    254          //          pMsg->hdr.event = CMD_SERIAL_MSG;
    255          //          pMsg->msg = (uint8*)(pMsg+1);
    256          //          pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
    257          //          state = CMD_STATE1;
    258          //        }
    259          //        else
    260          //        {
    261          //          state = SOP_STATE;
    262          //          return;
    263          //        }
    264          //        break;
    265          //
    266          //      case CMD_STATE1:
    267          //        pMsg->msg[MT_RPC_POS_CMD0] = ch;
    268          //        state = CMD_STATE2;
    269          //        break;
    270          //
    271          //      case CMD_STATE2:
    272          //        pMsg->msg[MT_RPC_POS_CMD1] = ch;
    273          //        /* If there is no data, skip to FCS state */
    274          //        if (LEN_Token)
    275          //        {
    276          //          state = DATA_STATE;
    277          //        }
    278          //        else
    279          //        {
    280          //          state = FCS_STATE;
    281          //        }
    282          //        break;
    283          //
    284          //      case DATA_STATE:
    285          //
    286          //        /* Fill in the buffer the first byte of the data */
    287          //        pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch;
    288          //
    289          //        /* Check number of bytes left in the Rx buffer */
    290          //        bytesInRxBuffer = Hal_UART_RxBufLen(port);
    291          //
    292          //        /* If the remain of the data is there, read them all, otherwise, just read enough */
    293          //        if (bytesInRxBuffer <= LEN_Token - tempDataLen)
    294          //        {
    295          //          HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
    296          //          tempDataLen += bytesInRxBuffer;
    297          //        }
    298          //        else
    299          //        {
    300          //          HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
    301          //          tempDataLen += (LEN_Token - tempDataLen);
    302          //        }
    303          //
    304          //        /* If number of bytes read is equal to data length, time to move on to FCS */
    305          //        if ( tempDataLen == LEN_Token )
    306          //            state = FCS_STATE;
    307          //
    308          //        break;
    309          //
    310          //      case FCS_STATE:
    311          //
    312          //        FSC_Token = ch;
    313          //
    314          //        /* Make sure it's correct */
    315          //        if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token))
    316          //        {
    317          //          osal_msg_send( App_TaskID, (byte *)pMsg );
    318          //        }
    319          //        else
    320          //        {
    321          //          /* deallocate the msg */
    322          //          osal_msg_deallocate ( (uint8 *)pMsg );
    323          //        }
    324          //
    325          //        /* Reset the state, send or discard the buffers at this point */
    326          //        state = SOP_STATE;
    327          //
    328          //        break;
    329          //
    330          //      default:
    331          //       break;
    332          //    }
    333          //  }
    334          //}
    335          
    336          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    337          /***************************************************************************************************
    338           * @fn      MT_UartProcessZAppData
    339           *
    340           * @brief   | SOP | CMD  |   Data Length   | FSC  |
    341           *          |  1  |  2   |       1         |  1   |
    342           *
    343           *          Parses the data and determine either is SPI or just simply serial data
    344           *          then send the data to correct place (MT or APP)
    345           *
    346           * @param   port    - UART port
    347           *          event   - Event that causes the callback
    348           *
    349           *
    350           * @return  None
    351           ***************************************************************************************************/
    352          void MT_UartProcessZAppData ( uint8 port, uint8 event )
    353          {
    354          
    355            osal_event_hdr_t  *msg_ptr;
    356            uint16 length = 0;
    357            uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
    358          
    359            /*
    360               If maxZAppBufferLength is 0 or larger than current length
    361               the entire length of the current buffer is returned.
    362            */
    363            if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
    364            {
    365              length = MT_UartMaxZAppBufLen;
    366            }
    367            else
    368            {
    369              length = rxBufLen;
    370            }
    371          
    372            /* Verify events */
    373            if (event == HAL_UART_TX_FULL)
    374            {
    375              // Do something when TX if full
    376              return;
    377            }
    378          
    379            if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
    380            {
    381              if ( App_TaskID )
    382              {
    383                /*
    384                   If Application is ready to receive and there is something
    385                   in the Rx buffer then send it up
    386                */
    387                if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
    388                {
    389                  /* Disable App flow control until it processes the current data */
    390                   MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
    391          
    392                  /* 2 more bytes are added, 1 for CMD type, other for length */
    393                  msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
    394                  if ( msg_ptr )
    395                  {
    396                    msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
    397                    msg_ptr->status = length;
    398          
    399                    /* Read the data of Rx buffer */
    400                    HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
    401          
    402                    /* Send the raw data to application...or where ever */
    403                    osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
    404                  }
    405                }
    406              }
    407            }
    408          }
    409          
    410          /***************************************************************************************************
    411           * @fn      SPIMgr_ZAppBufferLengthRegister
    412           *
    413           * @brief
    414           *
    415           * @param   maxLen - Max Length that the application wants at a time
    416           *
    417           * @return  None
    418           *
    419           ***************************************************************************************************/
    420          void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
    421          {
    422            /* If the maxLen is larger than the RX buff, something is not right */
    423            if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
    424              MT_UartMaxZAppBufLen = maxLen;
    425            else
    426              MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
    427          }
    428          
    429          /***************************************************************************************************
    430           * @fn      SPIMgr_AppFlowControl
    431           *
    432           * @brief
    433           *
    434           * @param   status - ready to send or not
    435           *
    436           * @return  None
    437           *
    438           ***************************************************************************************************/
    439          void MT_UartAppFlowControl ( bool status )
    440          {
    441          
    442            /* Make sure only update if needed */
    443            if (status != MT_UartZAppRxStatus )
    444            {
    445              MT_UartZAppRxStatus = status;
    446            }
    447          
    448            /* App is ready to read again, ProcessZAppData have to be triggered too */
    449            if (status == MT_UART_ZAPP_RX_READY)
    450            {
    451              MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
    452            }
    453          
    454          }
    455          
    456          #endif //ZAPP
    457          
    458          /***************************************************************************************************
    459          ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                ISTACK PSTACK XSTACK
     --------                ------ ------ ------
     MT_UartCalcFCS              2      0      0
     MT_UartInit                 2      0     29
       -> HalUARTOpen            4      0     58
       -> HalUARTOpen            4      0     58
     MT_UartProcessZToolData     1      0     12
       -> Hal_UART_RxBufLen      0      0     24
       -> osal_msg_allocate      0      0     24
       -> HalUARTRead            0      0     24
       -> osal_msg_send          0      0     24
     MT_UartRegisterTaskID       2      0      0


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     App_TaskID                         1
     state                              1
     CMD_Token                          2
     LEN_Token                          1
     FSC_Token                          1
     pMsg                               2
     tempDataLen                        1
     MT_UartInit                      129
     ?Subroutine0                       7
     MT_UartRegisterTaskID             11
     MT_UartCalcFCS                    33
     MT_UartProcessZToolData          129
     ?Subroutine2                       4
     ?Subroutine3                       3
     ??Subroutine4_0                    9
     ?Subroutine1                       9
     ??MT_UartInit?relay                6
     ??MT_UartRegisterTaskID?relay      6
     ??MT_UartCalcFCS?relay             6
     ??MT_UartProcessZToolData?relay    6

 
 334 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   9 bytes in segment XDATA_Z
 
 358 bytes of CODE  memory
   9 bytes of XDATA memory

Errors: none
Warnings: none
