###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         27/Jun/2025  14:47:06 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\EndDeviceEB2.c                           #
#    Command line       =  -f "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ #
#                          ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg #
#                          " (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f  #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"  #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00020000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\EndDeviceEB2.c" -D ZIGBEEPRO -D         #
#                          NWK_AUTO_POLL -D xMT_TASK -D ZTOOL_P1 -D           #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC "D:\Program                #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\E #
#                          ndDeviceEB-2\List\" -lA "D:\Program                #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\E #
#                          ndDeviceEB-2\List\" --diag_suppress Pe001,Pa010    #
#                          -o "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ #
#                          ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB-2\Obj\" -e --debug       #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\Program                #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\" #
#                           -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍ #
#                          µ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZSta #
#                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\SOURCE\" -I "D:\Program          #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\ZMAIN\TI2530DB\" -I "D:\Program            #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MT\" -I "D:\Program       #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I          #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC #
#                          2530EB\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍø #
#                          WiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\O #
#                          SAL\MCU\CCSOC\" -I "D:\Program                     #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I         #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"    #
#                          -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ #
#                          ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ #
#                          " -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢Ë #
#                          Íµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZSt #
#                          ack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi· #
#                          ¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ #
#                          SAPI\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWi #
#                          Fi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENE #
#                          T\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\SYS\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍø #
#                          WiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S #
#                          TACK\ZDO\" -I "D:\Program                          #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\ZMAC\F8W\" -I             #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I     #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADD #
#                          R\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi· #
#                          ¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVIC #
#                          ES\SDATA\" -I "D:\Program                          #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MAC\INCLUDE\" -I          #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVE #
#                          L\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi· #
#                          ¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LO #
#                          W_LEVEL\srf04\" -I "D:\Program                     #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGL #
#                          E_CHIP\" -Ohz --require_prototypes                 #
#    List file          =  D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\EndDeviceEB-2\List\EndDeviceEB2.lst      #
#    Object file        =  D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\EndDeviceEB-2\Obj\EndDeviceEB2.r51       #
#                                                                             #
#                                                                             #
###############################################################################

D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB2.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.cs tx
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED  AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "DHT11.h"
     78          #include "stdio.h"
     79          #include "string.h"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          uint8 led1_flag = 0;
   \                     led1_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          uint8 led2_flag = 0;
   \                     led2_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     84          /*********************************************************************
     85           * MACROS
     86           */
     87          
     88          /*********************************************************************
     89           * CONSTANTS
     90           */
     91          
     92          /*********************************************************************
     93           * TYPEDEFS
     94           */
     95          
     96          /*********************************************************************
     97           * GLOBAL VARIABLES
     98           */
     99          
    100          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    101          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    102              {
    103                  SAMPLEAPP_PERIODIC_CLUSTERID,
    104                  SAMPLEAPP_FLASH_CLUSTERID};
    105          

   \                                 In  segment XDATA_ROM_C, align 1
    106          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    107              {
    108                  SAMPLEAPP_ENDPOINT,             //  int Endpoint;
    109                  SAMPLEAPP_PROFID,               //  uint16 AppProfId[2];
    110                  SAMPLEAPP_DEVICEID,             //  uint16 AppDeviceId[2];
    111                  SAMPLEAPP_DEVICE_VERSION,       //  int   AppDevVer:4;
    112                  SAMPLEAPP_FLAGS,                //  int   AppFlags:4;
    113                  SAMPLEAPP_MAX_CLUSTERS,         //  uint8  AppNumInClusters;
    114                  (cId_t *)SampleApp_ClusterList, //  uint8 *pAppInClusterList;
    115                  SAMPLEAPP_MAX_CLUSTERS,         //  uint8  AppNumInClusters;
    116                  (cId_t *)SampleApp_ClusterList  //  uint8 *pAppInClusterList;
    117          };
    118          
    119          // This is the Endpoint/Interface description.  It is defined here, but
    120          // filled-in in SampleApp_Init().  Another way to go would be to fill
    121          // in the structure here and make it a "const" (in code space).  The
    122          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    124          
    125          /*********************************************************************
    126           * EXTERNAL VARIABLES
    127           */
    128          
    129          /*********************************************************************
    130           * EXTERNAL FUNCTIONS
    131           */
    132          
    133          /*********************************************************************
    134           * LOCAL VARIABLES
    135           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 SampleApp_TaskID; // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137                                  // This variable will be received when
    138                                  // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 SampleApp_TransID; // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          afAddrType_t SampleApp_Periodic_DstAddr; // ?
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t SampleApp_Flash_DstAddr;    // ï¿½ï¿½
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t SampleApp_P2P_DstAddr;      // ?
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    148          
    149          
    150          
    151          /*********************************************************************
    152           * LOCAL FUNCTIONS
    153           */
    154          void SampleApp_HandleKeys(uint8 shift, uint8 keys);
    155          void SampleApp_MessageMSGCB(afIncomingMSGPacket_t *pckt);
    156          void SampleApp_SendPeriodicMessage(void);
    157          void SampleApp_SendFlashMessage(uint16 flashTime);
    158          /*********************************************************************
    159           * NETWORK LAYER CALLBACKS
    160           */
    161          
    162          /*********************************************************************
    163           * PUBLIC FUNCTIONS
    164           */
    165          
    166          /*********************************************************************
    167           * @fn      SampleApp_Init
    168           *
    169           * @brief   Initialization function for the Generic App Task.
    170           *          This is called during initialization and should contain
    171           *          any application specific initialization (ie. hardware
    172           *          initialization/setup, table initialization, power up
    173           *          notificaiton ... ).
    174           *
    175           * @param   task_id - the ID assigned by OSAL.  This ID should be
    176           *                    used to send messages and set timers.
    177           *
    178           * @return  none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void SampleApp_Init(uint8 task_id)
   \                     SampleApp_Init:
    181          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    182          
    183            unsigned char tmp[10];
    184            SampleApp_TaskID = task_id;
   \   00000C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000F   F0           MOVX    @DPTR,A
    185            SampleApp_NwkState = DEV_INIT;
   \   000010   90....       MOV     DPTR,#SampleApp_NwkState
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    186            SampleApp_TransID = 0;
   \   000016   90....       MOV     DPTR,#SampleApp_TransID
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    187          
    188            MT_UartInit();                  //   ? ?
   \   00001B                ; Setup parameters for call to function MT_UartInit
   \   00001B   12....       LCALL   ??MT_UartInit?relay
    189            MT_UartRegisterTaskID(task_id); //? ?
   \   00001E                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00001E   EE           MOV     A,R6
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??MT_UartRegisterTaskID?relay
    190            HalUARTWrite(0, "EndDevice-2\r\n", 13);
   \   000023                ; Setup parameters for call to function HalUARTWrite
   \   000023   7C0D         MOV     R4,#0xd
   \   000025   7D00         MOV     R5,#0x0
   \   000027   7A..         MOV     R2,#`?<Constant "EndDevice-2\\r\\n">` & 0xff
   \   000029   7B..         MOV     R3,#(`?<Constant "EndDevice-2\\r\\n">` >> 8) & 0xff
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   12....       LCALL   ??HalUARTWrite?relay
    191            osal_memset(tmp, 0, 10);
   \   000030                ; Setup parameters for call to function osal_memset
   \   000030   7C0A         MOV     R4,#0xa
   \   000032   7D00         MOV     R5,#0x0
   \   000034   7900         MOV     R1,#0x0
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   AA82         MOV     R2,DPL
   \   00003E   AB83         MOV     R3,DPH
   \   000040   12....       LCALL   ??osal_memset?relay
    192            tmp[0] = HAL_UART_DMA + 0x30;
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   7431         MOV     A,#0x31
   \   00004B   F0           MOVX    @DPTR,A
    193            tmp[1] = HAL_UART_ISR + 0x30;
   \   00004C   7401         MOV     A,#0x1
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7432         MOV     A,#0x32
   \   000053   F0           MOVX    @DPTR,A
    194            tmp[2] = HAL_UART_USB + 0x30;
   \   000054   7402         MOV     A,#0x2
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   7430         MOV     A,#0x30
   \   00005B   F0           MOVX    @DPTR,A
    195            HalUARTWrite(0, tmp, 6);
   \   00005C                ; Setup parameters for call to function HalUARTWrite
   \   00005C   7C06         MOV     R4,#0x6
   \   00005E   7D00         MOV     R5,#0x0
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   7900         MOV     R1,#0x0
   \   00006C   12....       LCALL   ??HalUARTWrite?relay
    196            P0SEL &= 0x7f; // P0_7   ï¿½ï¿½ ?  io
   \   00006F   53F37F       ANL     0xf3,#0x7f
    197          
    198            // Device hardware initialization can be added here or in main() (Zmain.c).
    199            // If the hardware is application specific - add it here.
    200            // If the hardware is other parts of the device add it in main().
    201          
    202          #if defined(BUILD_ALL_DEVICES)
    203            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    204            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    205            // together - if they are - we will start up a coordinator. Otherwise,
    206            // the device will start as a router.
    207            if (readCoordinatorJumper())
    208              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    209            else
    210              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    211          #endif // BUILD_ALL_DEVICES
    212          
    213          #if defined(HOLD_AUTO_START)
    214            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    215            //  from starting the device and wait for the application to
    216            //  start the device.
    217            ZDOInitDevice(0);
    218          #endif
    219          
    220            // Setup for the periodic message's destination address
    221            // Broadcast to everyone
    222            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000072   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000075   7402         MOV     A,#0x2
   \   000077   F0           MOVX    @DPTR,A
    223            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000078   A3           INC     DPTR
   \   000079   7414         MOV     A,#0x14
   \   00007B   F0           MOVX    @DPTR,A
    224            SampleApp_Periodic_DstAddr.addr.shortAddr = 0x0000;
   \   00007C   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00007F   E4           CLR     A
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   F0           MOVX    @DPTR,A
    225          
    226            // Setup for the flash command's destination address - Group 1
    227            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000083   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000086   04           INC     A
   \   000087   F0           MOVX    @DPTR,A
    228            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000088   A3           INC     DPTR
   \   000089   7414         MOV     A,#0x14
   \   00008B   F0           MOVX    @DPTR,A
    229            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00008C   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00008F   7401         MOV     A,#0x1
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   \   000093   E4           CLR     A
   \   000094   F0           MOVX    @DPTR,A
    230          
    231            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast; // ?
   \   000095   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000098   740F         MOV     A,#0xf
   \   00009A   F0           MOVX    @DPTR,A
    232            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00009B   A3           INC     DPTR
   \   00009C   7414         MOV     A,#0x14
   \   00009E   F0           MOVX    @DPTR,A
    233            SampleApp_P2P_DstAddr.addr.shortAddr = 0xFFFF; //    ï¿½ï¿½
   \   00009F   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   0000A2   74FF         MOV     A,#-0x1
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   F0           MOVX    @DPTR,A
    234          
    235            // Fill out the endpoint description.
    236            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   0000A7   90....       MOV     DPTR,#SampleApp_epDesc
   \   0000AA   7414         MOV     A,#0x14
   \   0000AC   F0           MOVX    @DPTR,A
    237            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   0000AD   A3           INC     DPTR
   \   0000AE   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   0000B4   F0           MOVX    @DPTR,A
    238            SampleApp_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   0000B5   A3           INC     DPTR
   \   0000B6   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   0000BC   F0           MOVX    @DPTR,A
    239            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   0000BD   A3           INC     DPTR
   \   0000BE   E4           CLR     A
   \   0000BF   F0           MOVX    @DPTR,A
    240          
    241            // Register the endpoint description with the AF
    242            afRegister(&SampleApp_epDesc);
   \   0000C0                ; Setup parameters for call to function afRegister
   \   0000C0   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   0000C2   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   0000C4   12....       LCALL   ??afRegister?relay
    243          
    244            // Register for all key events - This app will handle all key events
    245            RegisterForKeys(SampleApp_TaskID);
   \   0000C7                ; Setup parameters for call to function RegisterForKeys
   \   0000C7   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F9           MOV     R1,A
   \   0000CC   12....       LCALL   ??RegisterForKeys?relay
    246          
    247            // By default, all devices start out in Group 1
    248            SampleApp_Group.ID = 0x0001;
   \   0000CF   90....       MOV     DPTR,#SampleApp_Group
   \   0000D2   7401         MOV     A,#0x1
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   E4           CLR     A
   \   0000D7   F0           MOVX    @DPTR,A
    249            osal_memcpy(SampleApp_Group.name, "Group 1", 7);
   \   0000D8                ; Setup parameters for call to function osal_memcpy
   \   0000D8   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000DB   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000DE   F5..         MOV     ?V0 + 2,A
   \   0000E0   78..         MOV     R0,#?V0 + 0
   \   0000E2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E5   7C07         MOV     R4,#0x7
   \   0000E7   7D00         MOV     R5,#0x0
   \   0000E9   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000EB   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000ED   12....       LCALL   ??osal_memcpy?relay
   \   0000F0   7403         MOV     A,#0x3
   \   0000F2   12....       LCALL   ?DEALLOC_XSTACK8
    250            aps_AddGroup(SAMPLEAPP_ENDPOINT, &SampleApp_Group);
   \   0000F5                ; Setup parameters for call to function aps_AddGroup
   \   0000F5   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000F7   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000F9   7914         MOV     R1,#0x14
   \   0000FB   12....       LCALL   ??aps_AddGroup?relay
    251          
    252          #if defined(LCD_SUPPORTED)
    253            HalLcdWriteString("SampleApp", HAL_LCD_LINE_1);
   \   0000FE                ; Setup parameters for call to function HalLcdWriteString
   \   0000FE   7901         MOV     R1,#0x1
   \   000100   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   000102   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   000104   12....       LCALL   ??HalLcdWriteString?relay
    254          #endif
    255          }
   \   000107   740A         MOV     A,#0xa
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010C   7F03         MOV     R7,#0x3
   \   00010E   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000111                REQUIRE P0SEL
    256          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          uint16 SampleApp_ProcessEvent(uint8 task_id, uint16 events)
   \                     SampleApp_ProcessEvent:
    258          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
    259            afIncomingMSGPacket_t *MSGpkt;
    260            (void)task_id; // Intentionally unreferenced parameter
    261          
    262            if (events & SYS_EVENT_MSG)
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   7003         JNZ     $+5
   \   00000E   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    263            {
    264              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(SampleApp_TaskID);
   \   000011                ; Setup parameters for call to function osal_msg_receive
   \   000011   8030         SJMP    ??SampleApp_ProcessEvent_1
    265              while (MSGpkt)
    266              {
    267                switch (MSGpkt->hdr.event)
    268                {
    269                // Received when a key is pressed
    270                case KEY_CHANGE:
    271                  SampleApp_HandleKeys(((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys);
    272                  break;
    273          
    274                case CMD_SERIAL_MSG:
    275                  mtOSALSerialData_t *p = (mtOSALSerialData_t *)MSGpkt; // ä¸²å£æ°æ®æé
                         ^
Warning[Pe1072]: a declaration cannot have a label

        switch (MSGpkt->hdr.event)
        ^
"D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB2.c",267  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "p" (declared at line 275 of "D:\Program
                      field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigb
                      ee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0-1.4.0\Projects
                      \zstack\Samples\SampleApp\CC2530DB\EndDeviceEB2.c")
            variable "data_ptr" (declared at line 277 of "D:\Program
                      field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigb
                      ee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0-1.4.0\Projects
                      \zstack\Samples\SampleApp\CC2530DB\EndDeviceEB2.c")
    276                  HalUARTWrite(HAL_UART_PORT_0, &p->msg[1], p->msg[0]); // åä¸²å?åéæ°æ?        uint8 len = p->msg[0];                                // è·åæ°æ®é¿åº¦
    277                  uint8 *data_ptr = &p->msg[1];                         // æåå®éæ°æ®
    278                  if (memcmp(data_ptr, "OFF", strlen("OFF")) == 0)
    279                  {
    280                    HalLedSet(HAL_LED_3, HAL_LED_MODE_ON);
    281                  }
    282                  else if (memcmp(data_ptr, "ON", strlen("ON")) == 0)
   \                     ??SampleApp_ProcessEvent_2:
   \   000013                ; Setup parameters for call to function memcmp
   \   000013   75..02       MOV     ?V0 + 4,#0x2
   \   000016   75..00       MOV     ?V0 + 5,#0x0
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   7C..         MOV     R4,#`?<Constant "ON">` & 0xff
   \   000020   7D..         MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   AB..         MOV     R3,?V0 + 1
   \   000026   12....       LCALL   ??memcmp?relay
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002E   8B..         MOV     ?V0 + 1,R3
   \   000030   EA           MOV     A,R2
   \   000031   45..         ORL     A,?V0 + 1
   \   000033   7007         JNZ     ??SampleApp_ProcessEvent_3
    283                  {
    284                    HalLedSet(HAL_LED_3, HAL_LED_MODE_OFF);
   \   000035                ; Setup parameters for call to function HalLedSet
   \   000035   7A00         MOV     R2,#0x0
   \                     ??SampleApp_ProcessEvent_4:
   \   000037   7904         MOV     R1,#0x4
   \   000039   12....       LCALL   ??HalLedSet?relay
    285                  }
    286                  break;
    287          
    288                default:
    289                  break;
    290                }
    291          
    292                // Release the memory
    293                osal_msg_deallocate((uint8 *)MSGpkt);
   \                     ??SampleApp_ProcessEvent_3:
   \   00003C                ; Setup parameters for call to function osal_msg_deallocate
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ??osal_msg_deallocate?relay
    294          
    295                // Next - if one is available
    296                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(SampleApp_TaskID);
   \   000043                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000043   90....       MOV     DPTR,#SampleApp_TaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   ??osal_msg_receive?relay
   \   00004B   8A..         MOV     ?V0 + 0,R2
   \   00004D   8B..         MOV     ?V0 + 1,R3
   \   00004F   AE..         MOV     R6,?V0 + 0
   \   000051   AF..         MOV     R7,?V0 + 1
   \   000053   EE           MOV     A,R6
   \   000054   4F           ORL     A,R7
   \   000055   7003         JNZ     $+5
   \   000057   02....       LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
   \   00005A   EE           MOV     A,R6
   \   00005B   2402         ADD     A,#0x2
   \   00005D   F5..         MOV     ?V0 + 0,A
   \   00005F   EF           MOV     A,R7
   \   000060   3400         ADDC    A,#0x0
   \   000062   F5..         MOV     ?V0 + 1,A
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   E0           MOVX    A,@DPTR
   \   000069   14           DEC     A
   \   00006A   6016         JZ      ??SampleApp_ProcessEvent_6
   \   00006C   2441         ADD     A,#0x41
   \   00006E   70CC         JNZ     ??SampleApp_ProcessEvent_3
   \   000070                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FA           MOV     R2,A
   \   000075   85..82       MOV     DPL,?V0 + 0
   \   000078   85..83       MOV     DPH,?V0 + 1
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000080   80BA         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_6:
   \   000082   85..82       MOV     DPL,?V0 + 0
   \   000085   85..83       MOV     DPH,?V0 + 1
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F8           MOV     R0,A
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F9           MOV     R1,A
   \   00008D   8882         MOV     DPL,R0
   \   00008F   8983         MOV     DPH,R1
   \   000091                ; Setup parameters for call to function HalUARTWrite
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FC           MOV     R4,A
   \   000093   7D00         MOV     R5,#0x0
   \   000095   A3           INC     DPTR
   \   000096   AA82         MOV     R2,DPL
   \   000098   AB83         MOV     R3,DPH
   \   00009A   7900         MOV     R1,#0x0
   \   00009C   12....       LCALL   ??HalUARTWrite?relay
   \   00009F   85..82       MOV     DPL,?V0 + 0
   \   0000A2   85..83       MOV     DPH,?V0 + 1
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   2401         ADD     A,#0x1
   \   0000A8   F5..         MOV     ?V0 + 0,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   3400         ADDC    A,#0x0
   \   0000AE   F5..         MOV     ?V0 + 1,A
   \   0000B0                ; Setup parameters for call to function memcmp
   \   0000B0   75..03       MOV     ?V0 + 4,#0x3
   \   0000B3   75..00       MOV     ?V0 + 5,#0x0
   \   0000B6   78..         MOV     R0,#?V0 + 4
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   0000BD   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \   0000BF   AA..         MOV     R2,?V0 + 0
   \   0000C1   AB..         MOV     R3,?V0 + 1
   \   0000C3   12....       LCALL   ??memcmp?relay
   \   0000C6   7402         MOV     A,#0x2
   \   0000C8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CB   8B..         MOV     ?V0 + 5,R3
   \   0000CD   EA           MOV     A,R2
   \   0000CE   45..         ORL     A,?V0 + 5
   \   0000D0   6003         JZ      $+5
   \   0000D2   02....       LJMP    ??SampleApp_ProcessEvent_2 & 0xFFFF
   \   0000D5                ; Setup parameters for call to function HalLedSet
   \   0000D5   7A01         MOV     R2,#0x1
   \   0000D7   02....       LJMP    ??SampleApp_ProcessEvent_4 & 0xFFFF
    297              }
    298          
    299              // return unprocessed events
    300              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   0000DA   AA..         MOV     R2,?V0 + 2
   \   0000DC   E5..         MOV     A,?V0 + 3
   \   0000DE   6480         XRL     A,#0x80
   \   0000E0   FB           MOV     R3,A
   \   0000E1   8004         SJMP    ??SampleApp_ProcessEvent_7
    301            }
    302            return 0;
   \                     ??SampleApp_ProcessEvent_0:
   \   0000E3   7A00         MOV     R2,#0x0
   \   0000E5   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_7:
   \   0000E7   7F06         MOV     R7,#0x6
   \   0000E9   02....       LJMP    ?BANKED_LEAVE_XDATA
    303          }
    304          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          void SampleApp_HandleKeys(uint8 shift, uint8 keys)
   \                     SampleApp_HandleKeys:
    306          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    307            (void)shift; // Intentionally unreferenced parameter
    308          
    309            if (keys & HAL_KEY_SW_6)
   \   000007   A2E5         MOV     C,0xE0 /* A   */.5
   \   000009   501A         JNC     ??SampleApp_HandleKeys_0
    310            {
    311          
    312              led1_flag = !led1_flag;
   \   00000B   90....       MOV     DPTR,#led1_flag
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   7004         JNZ     ??SampleApp_HandleKeys_1
   \   000011   7401         MOV     A,#0x1
   \   000013   8001         SJMP    ??SampleApp_HandleKeys_2
   \                     ??SampleApp_HandleKeys_1:
   \   000015   E4           CLR     A
   \                     ??SampleApp_HandleKeys_2:
   \   000016   F0           MOVX    @DPTR,A
    313              HalLedSet(HAL_LED_1, led1_flag);
   \   000017                ; Setup parameters for call to function HalLedSet
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FA           MOV     R2,A
   \   000019   7901         MOV     R1,#0x1
   \   00001B   12....       LCALL   ??HalLedSet?relay
    314              SampleApp_SendFlashMessage(0);
   \   00001E                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00001E   7A00         MOV     R2,#0x0
   \   000020   7B00         MOV     R3,#0x0
   \   000022   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    315            }
    316            if (keys & HAL_KEY_SW_7)
   \                     ??SampleApp_HandleKeys_0:
   \   000025   EE           MOV     A,R6
   \   000026   A2E6         MOV     C,0xE0 /* A   */.6
   \   000028   5013         JNC     ??SampleApp_HandleKeys_3
    317            {
    318          
    319              led2_flag = !led2_flag;
   \   00002A   90....       MOV     DPTR,#led2_flag
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   7004         JNZ     ??SampleApp_HandleKeys_4
   \   000030   7401         MOV     A,#0x1
   \   000032   8001         SJMP    ??SampleApp_HandleKeys_5
   \                     ??SampleApp_HandleKeys_4:
   \   000034   E4           CLR     A
   \                     ??SampleApp_HandleKeys_5:
   \   000035   F0           MOVX    @DPTR,A
    320              HalLedSet(HAL_LED_2, led2_flag);
   \   000036                ; Setup parameters for call to function HalLedSet
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FA           MOV     R2,A
   \   000038   7902         MOV     R1,#0x2
   \   00003A   12....       LCALL   ??HalLedSet?relay
    321            }
    322          }
   \                     ??SampleApp_HandleKeys_3:
   \   00003D   7F01         MOV     R7,#0x1
   \   00003F   02....       LJMP    ?BANKED_LEAVE_XDATA
    323          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    324          void SampleApp_SendFlashMessage(uint16 flashTime)
   \                     SampleApp_SendFlashMessage:
    325          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    326          
    327            if (AF_DataRequest(&SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    328                               SAMPLEAPP_FLASH_CLUSTERID,
    329                               1,
    330                               &led1_flag,
    331                               &SampleApp_TransID,
    332                               AF_DISCV_ROUTE,
    333                               AF_DEFAULT_RADIUS) == afStatus_SUCCESS)
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#led1_flag & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(led1_flag >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..02       MOV     ?V0 + 0,#0x2
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7920         MOV     R1,#0x20
   \   000038   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00003A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003C   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   00003E   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000040   12....       LCALL   ??AF_DataRequest?relay
   \   000043   7409         MOV     A,#0x9
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
    334            {
    335              // HalLedBlink(HAL_LED_2, 3, 50, 500);
    336            }
    337            else
    338            {
    339              // Error occurred in request to send.
    340            }
    341          }
   \   000048   7F02         MOV     R7,#0x2
   \   00004A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EndDevice-2\\r\\n">`:
   \   000000   456E6444     DB "EndDevice-2\015\012"
   \            65766963
   \            652D320D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OFF">`:
   \   000000   4F464600     DB "OFF"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ON">`:
   \   000000   4F4E00       DB "ON"
    342          
    343          /*********************************************************************
    344          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     23
       -> HalLedSet                     0      0     18
       -> SampleApp_SendFlashMessage
                                        0      0     18
       -> HalLedSet                     0      0     18
     SampleApp_Init                     0      0     24
       -> MT_UartInit                   0      0     42
       -> MT_UartRegisterTaskID         0      0     42
       -> HalUARTWrite                  0      0     42
       -> osal_memset                   0      0     42
       -> HalUARTWrite                  0      0     42
       -> afRegister                    0      0     42
       -> RegisterForKeys               0      0     42
       -> osal_memcpy                   0      0     48
       -> aps_AddGroup                  0      0     42
       -> HalLcdWriteString             0      0     42
     SampleApp_ProcessEvent             0      0     16
       -> osal_msg_receive              0      0     28
       -> memcmp                        0      0     32
       -> HalLedSet                     0      0     28
       -> osal_msg_deallocate           0      0     28
       -> osal_msg_receive              0      0     28
       -> SampleApp_HandleKeys          0      0     28
       -> HalUARTWrite                  0      0     28
       -> memcmp                        0      0     32
       -> HalLedSet                     0      0     28
     SampleApp_SendFlashMessage         0      0     28
       -> AF_DataRequest                0      0     38


   Segment part sizes:

     Function/Label                     Bytes
     --------------                     -----
     P0SEL                                 1
     led1_flag                             1
     SampleAppPeriodicCounter              1
     SampleAppFlashCounter                 1
     led2_flag                             1
     SampleApp_ClusterList                 4
     SampleApp_SimpleDesc                 12
     SampleApp_epDesc                      6
     SampleApp_TaskID                      1
     SampleApp_NwkState                    1
     SampleApp_TransID                     1
     SampleApp_Periodic_DstAddr           12
     SampleApp_Flash_DstAddr              12
     SampleApp_P2P_DstAddr                12
     SampleApp_Group                      18
     SampleApp_Init                      273
     SampleApp_ProcessEvent              236
     SampleApp_HandleKeys                 66
     SampleApp_SendFlashMessage           77
     ??SampleApp_Init?relay                6
     ??SampleApp_ProcessEvent?relay        6
     ??SampleApp_HandleKeys?relay          6
     ??SampleApp_SendFlashMessage?relay    6
     ?<Constant "EndDevice-2\r\n">        14
     ?<Constant "Group 1">                 8
     ?<Constant "SampleApp">              10
     ?<Constant "OFF">                     4
     ?<Constant "ON">                      3

 
 652 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
  55 bytes in segment XDATA_ROM_C
  67 bytes in segment XDATA_Z
 
 676 bytes of CODE  memory
  55 bytes of CONST memory
   0 bytes of DATA  memory (+ 1 byte shared)
  67 bytes of XDATA memory

Errors: none
Warnings: 2
