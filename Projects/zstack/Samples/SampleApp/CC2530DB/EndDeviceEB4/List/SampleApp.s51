///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        03/Mar/2020  23:56:25 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\Source\SampleApp.c                     /
//    Command line       =  -f C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óon /
//                          enet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤ /
//                          ¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8 /
//                          wCoord.cfg (-DCPU32MHZ -DROOT=__near_func         /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCo /
//                          nfig.cfg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0        /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\Administrator\Des /
//                          ktop\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óo /
//                          nenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Samples\SampleApp\Source\SampleAp /
//                          p.c -D ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK -D       /
//                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                   /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\EndDeviceEB4\List\ -lA        /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\EndDeviceEB4\List\            /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\EndDeviceEB4\Obj\ -e --debug  /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\ -I                           /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\SOURCE\ -I                 /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I   /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ /
//                           -I C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óo /
//                          nenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³ /
//                          ¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS /
//                          \HAL\INCLUDE\ -I C:\Users\Administrator\Desktop\Z /
//                          igBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet· /
//                          ¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projec /
//                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ /
//                          ..\COMPONENTS\HAL\TARGET\CC2530EB\ -I             /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSA /
//                          L\MCU\CCSOC\ -I C:\Users\Administrator\Desktop\Zi /
//                          gBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ /
//                          ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\OSAL\INCLUDE\ -I                     /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA /
//                          CK\AF\ -I C:\Users\Administrator\Desktop\ZigBeeTC /
//                          PÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ /
//                          ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zsta /
//                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\STACK\NWK\ -I C:\Users\Administrator\Deskt /
//                          op\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óone /
//                          net·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\SEC\ -I                   /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA /
//                          CK\SAPI\ -I C:\Users\Administrator\Desktop\ZigBee /
//                          TCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ20 /
//                          0¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SYS\ -I C:\Users\Administrator\Des /
//                          ktop\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óo /
//                          nenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ /
//                          ..\..\..\COMPONENTS\STACK\ZDO\ -I                 /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMA /
//                          C\F8W\ -I C:\Users\Administrator\Desktop\ZigBeeTC /
//                          PÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ /
//                          ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zsta /
//                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\ZMAC\ -I C:\Users\Administrator\Desktop\Zi /
//                          gBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ /
//                          ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\SERVICES\SADDR\ -I                   /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SER /
//                          VICES\SDATA\ -I C:\Users\Administrator\Desktop\Zi /
//                          gBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ /
//                          ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\INCLUDE\ -I                      /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC /
//                          \HIGH_LEVEL\ -I C:\Users\Administrator\Desktop\Zi /
//                          gBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ /
//                          ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I              /
//                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC /
//                          \LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz                /
//                          --require_prototypes                              /
//    List file          =  C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonene /
//                          t·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\EndDeviceEB4\List\SampleApp.s /
//                          51                                                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ReSetWifi?relay
        FUNCTION ??ReSetWifi?relay,0203H
        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_SendFlashMessage?relay
        FUNCTION ??SampleApp_SendFlashMessage?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBLIC ??SampleApp_Send_P2P_Message?relay
        FUNCTION ??SampleApp_Send_P2P_Message?relay,0203H
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBLIC ReSetWifi
        FUNCTION ReSetWifi,021203H
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 114, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 224, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_Send_P2P_Message
        FUNCTION SampleApp_Send_P2P_Message,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 47, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBWEAK _A_P0
        PUBLIC flat
        PUBLIC len_rcv
        PUBLIC line
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Delay_ms            SYMBOL "Delay_ms"
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
HalUARTWrite        SYMBOL "HalUARTWrite"
osal_memset         SYMBOL "osal_memset"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
strstr              SYMBOL "strstr"
osal_rand           SYMBOL "osal_rand"
aps_FindGroup       SYMBOL "aps_FindGroup"
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
sprintf             SYMBOL "sprintf"
strlen              SYMBOL "strlen"
HalLedBlink         SYMBOL "HalLedBlink"
AF_DataRequest      SYMBOL "AF_DataRequest"
DHT11               SYMBOL "DHT11"
LCD_P16x16Ch        SYMBOL "LCD_P16x16Ch"
LCD_P8x16Str        SYMBOL "LCD_P8x16Str"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??DHT11?relay       SYMBOL "?relay", DHT11
??Delay_ms?relay    SYMBOL "?relay", Delay_ms
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??LCD_P16x16Ch?relay SYMBOL "?relay", LCD_P16x16Ch
??LCD_P8x16Str?relay SYMBOL "?relay", LCD_P8x16Str
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??aps_FindGroup?relay SYMBOL "?relay", aps_FindGroup
??aps_RemoveGroup?relay SYMBOL "?relay", aps_RemoveGroup
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
??strlen?relay      SYMBOL "?relay", strlen
??strstr?relay      SYMBOL "?relay", strstr
ReSetWifi           SYMBOL "ReSetWifi"
??ReSetWifi?relay   SYMBOL "?relay", ReSetWifi
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
??SampleApp_SendFlashMessage?relay SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage
SampleApp_Send_P2P_Message SYMBOL "SampleApp_Send_P2P_Message"
??SampleApp_Send_P2P_Message?relay SYMBOL "?relay", SampleApp_Send_P2P_Message

        EXTERN Delay_ms
        FUNCTION Delay_ms,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 216, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 114, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strstr
        FUNCTION strstr,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 224, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 216, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 216, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DHT11
        FUNCTION DHT11,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_P16x16Ch
        FUNCTION LCD_P16x16Ch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_P8x16Str
        FUNCTION LCD_P8x16Str,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??DHT11?relay
        FUNCTION ??DHT11?relay,00H
        EXTERN ??Delay_ms?relay
        FUNCTION ??Delay_ms?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??LCD_P16x16Ch?relay
        FUNCTION ??LCD_P16x16Ch?relay,00H
        EXTERN ??LCD_P8x16Str?relay
        FUNCTION ??LCD_P8x16Str?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??aps_FindGroup?relay
        FUNCTION ??aps_FindGroup?relay,00H
        EXTERN ??aps_RemoveGroup?relay
        FUNCTION ??aps_RemoveGroup?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H
        EXTERN ??strstr?relay
        FUNCTION ??strstr?relay,00H
        EXTERN shidu_ge
        EXTERN shidu_shi
        EXTERN wendu_ge
        EXTERN wendu_shi

// C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 
//   65 #include "SampleApp.h"
//   66 #include "SampleAppHw.h"
//   67 
//   68 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//   69 
//   70 /* HAL */
//   71 #include "hal_lcd.h"
//   72 #include "hal_led.h"
//   73 #include "hal_key.h"
//   74 #include "MT_UART.h"
//   75 #include "MT_APP.h"
//   76 #include "MT.h"
//   77 #include "DHT11.h"
//   78 #include "stdio.h"
//   79 #include "string.h"
//   80 
//   81 #define LEN            100
//   82 
//   83 #define WIFIRESET P0_6       // P0.6¿Ú¿ØÖÆIGT
//   84 #define  devkey "iA8JHWjxuRkaL7oWa8uAkQbSOdk=" //onenetÆ½Ì¨tcp²úÆ·apikey
//   85 #define  devid "586474334"//onenetÆ½Ì¨tcpÉè±¸id
//   86 
//   87 //WIFIÁ¬½ÓÃüÁî
//   88 #define AT_C       "AT\r\n"
//   89 #define CWMODE_C   "AT+CWMODE=3\r\n"  //STA+APÄ£Ê½
//   90 #define CWJAP_C    "AT+CWJAP=\"CMCC-IOT\",\"linyi1234567890\"\r\n" //"AT+CWJAP=\"your_ssid\",\"your_pwd\"\r\n",
//   91 //#define CIPSTART_C "AT+CIPSTART=\"TCP\",\"192.168.1.3\",8234\r\n" //Á¬½ÓHTTP·þÎñÆ÷192.168.1.4,8234  8234ÊÇ·þÎñÆ÷µÄ¶Ë¿ÚºÅ ---±¾µØ²âÊÔ
//   92 #define CIPSTART_C "AT+CIPSTART=\"TCP\",\"183.230.40.33\",80\r\n"  //Á¬½ÓÔÆ·þÎñÆ÷
//   93 #define CIPMODE_C  "AT+CIPMODE=1\r\n"  //Í¸´«Ä£Ê½
//   94 #define CIPSEND_C  "AT+CIPSEND\r\n"  //·¢ËÍÊý¾ÝµÄÖ¸Áî
//   95 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   96 uint8 *line;
line:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   97 uint8 len_rcv;
len_rcv:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   98 uint8 flat = 1;
flat:
        DATA8
        DS 1
        REQUIRE `?<Initializer for flat>`
        REQUIRE __INIT_XDATA_I
//   99 
//  100 static uint8 SerialApp_TxBuf[LEN+1];
//  101 static uint8 SerialApp_TxLen=0;
//  102 
//  103 /*********************************************************************
//  104  * MACROS
//  105  */
//  106 
//  107 /*********************************************************************
//  108  * CONSTANTS
//  109  */
//  110 
//  111 /*********************************************************************
//  112  * TYPEDEFS
//  113  */
//  114 
//  115 /*********************************************************************
//  116  * GLOBAL VARIABLES
//  117  */
//  118 
//  119 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//  120 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
//  121 {
//  122   SAMPLEAPP_PERIODIC_CLUSTERID,
//  123   SAMPLEAPP_FLASH_CLUSTERID
//  124 };
//  125 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  126 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SampleApp_ClusterList
//  127 {
//  128   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  129   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  130   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  131   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  132   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  133   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  134   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  135   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  136   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  137 };
//  138 
//  139 // This is the Endpoint/Interface description.  It is defined here, but
//  140 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  141 // in the structure here and make it a "const" (in code space).  The
//  142 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 /*********************************************************************
//  146  * EXTERNAL VARIABLES
//  147  */
//  148 
//  149 /*********************************************************************
//  150  * EXTERNAL FUNCTIONS
//  151  */
//  152 
//  153 /*********************************************************************
//  154  * LOCAL VARIABLES
//  155  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  156 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  157                           // This variable will be received when
//  158                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  159 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  160 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  161 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  162 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  163 afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  164 afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  165 afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  166 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  167 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  168 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  170 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  171 
//  172 
//  173 
//  174 /*********************************************************************
//  175  * LOCAL FUNCTIONS
//  176  */
//  177 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  178 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  179 void SampleApp_SendPeriodicMessage( void );
//  180 void SampleApp_SendFlashMessage( uint16 flashTime );
//  181 void SampleApp_Send_P2P_Message(void);
//  182 void ReSetWifi(void);
//  183 void ClearRAM(uint8* ram,uint32 n);
//  184 /*********************************************************************
//  185  * NETWORK LAYER CALLBACKS
//  186  */
//  187 
//  188 /*********************************************************************
//  189  * PUBLIC FUNCTIONS
//  190  */
//  191 
//  192 
//  193 /****************************************************************************
//  194 * Ãû    ³Æ: ReSetWifi()
//  195 * ¹¦    ÄÜ: µÍµçÆ½¸´Î»wifiÄ£¿é
//  196 * Èë¿Ú²ÎÊý: ÎÞ
//  197 * ³ö¿Ú²ÎÊý: ÎÞ
//  198 ****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  199 void ReSetWifi(void)
ReSetWifi:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ReSetWifi
        CODE
//  200 {
        FUNCALL ReSetWifi, Delay_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReSetWifi, Delay_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  201   P0DIR |= 0x40;           //P0.6¶¨ÒåÎªÊä³ö
        ORL     0xfd,#0x40
//  202   WIFIRESET = 0;                 //¸ßµçÆ½¸´Î»---------------------¸Ä 0
        CLR     0x80.6
//  203   Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
//  204   WIFIRESET = 1;                 //µÍµçÆ½¹¤×÷------------
        SETB    0x80.6
//  205    Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
//  206 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE P0DIR
        REQUIRE _A_P0
//  207 /*********************************************************************
//  208  * @fn      SampleApp_Init
//  209  *
//  210  * @brief   Initialization function for the Generic App Task.
//  211  *          This is called during initialization and should contain
//  212  *          any application specific initialization (ie. hardware
//  213  *          initialization/setup, table initialization, power up
//  214  *          notificaiton ... ).
//  215  *
//  216  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  217  *                    used to send messages and set timers.
//  218  *
//  219  * @return  none
//  220  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  221 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  222 { 
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, ReSetWifi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 114, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 114, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 100
        MOV     A,#-0x64
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 111)
        MOV     A,R1
        MOV     R6,A
//  223   
//  224   unsigned char tmp[100];
//  225   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  226   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  227   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  228   
//  229   MT_UartInit();                  //´®¿Ú³õÊ¼»¯
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  230   MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  231   HalUARTWrite(0, "UART0\r\n", 7);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "UART0\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "UART0\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  232   osal_memset(tmp,0,100);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  233   tmp[0] = HAL_UART_DMA+0x30;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x31
        MOVX    @DPTR,A
//  234   tmp[1] = HAL_UART_ISR+0x30;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x32
        MOVX    @DPTR,A
//  235   tmp[2] = HAL_UART_USB+0x30;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x30
        MOVX    @DPTR,A
//  236   HalUARTWrite(0, tmp, 6);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  237     P0SEL &= 0x7f;                  //P0_7ÅäÖÃ³ÉÍ¨ÓÃio
        ANL     0xf3,#0x7f
//  238    ReSetWifi();
        ; Setup parameters for call to function ReSetWifi
        LCALL   ?Subroutine3 & 0xFFFF
//  239      Delay_ms(1000);
//  240     HalUARTWrite(1,"AT\r\n",strlen("AT\r\n"));//·¢ËÍAT¼ì²âWiFiÄ£¿é
??CrossCallReturnLabel_0:
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  241 
//  242   line = osal_msg_allocate(LEN);
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
        MOV     DPTR,#line
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  243   // Device hardware initialization can be added here or in main() (Zmain.c).
//  244   // If the hardware is application specific - add it here.
//  245   // If the hardware is other parts of the device add it in main().
//  246 
//  247  #if defined ( BUILD_ALL_DEVICES )
//  248   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  249   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  250   // together - if they are - we will start up a coordinator. Otherwise,
//  251   // the device will start as a router.
//  252   if ( readCoordinatorJumper() )
//  253     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  254   else
//  255     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  256 #endif // BUILD_ALL_DEVICES
//  257 
//  258 #if defined ( HOLD_AUTO_START )
//  259   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  260   //  from starting the device and wait for the application to
//  261   //  start the device.
//  262   ZDOInitDevice(0);
//  263 #endif
//  264 
//  265   // Setup for the periodic message's destination address
//  266   // Broadcast to everyone
//  267   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  268   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  269   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  270 
//  271   // Setup for the flash command's destination address - Group 1
//  272   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  273   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  274   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  275   
//  276   SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
        MOV     DPTR,#SampleApp_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  277   SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  278   SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
        MOV     DPTR,#SampleApp_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  279 
//  280   // Fill out the endpoint description.
//  281   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  282   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  283   SampleApp_epDesc.simpleDesc
//  284             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  285   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  286 
//  287   // Register the endpoint description with the AF
//  288   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  289 
//  290   // Register for all key events - This app will handle all key events
//  291   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  292 
//  293   // By default, all devices start out in Group 1
//  294   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  295   osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 114)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 111)
//  296   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  297 
//  298 #if defined ( LCD_SUPPORTED )
//  299   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "SampleApp">` & 0xff
        MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  300 #endif
//  301 }
        MOV     A,#0x64
        CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        REQUIRE P0SEL
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Valid
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  302 
//  303 
//  304 /*********************************************************************
//  305  * @fn      SampleApp_ProcessEvent
//  306  *
//  307  * @brief   Generic Application Task event processor.  This function
//  308  *          is called to process all events for the task.  Events
//  309  *          include timers, messages and any other user defined events.
//  310  *
//  311  * @param   task_id  - The OSAL assigned task ID.
//  312  * @param   events - events to process.  This is a bit map and can
//  313  *                   contain more than one event.
//  314  *
//  315  * @return  none
//  316  */
//  317 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  318 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  319 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, ReSetWifi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_Send_P2P_Message
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  320    char nn[200];//mqttÁ¬½Ó»º´æ
//  321    char len[200];//mqttÁ¬½Ó»º´æ
//  322    char a[2];
//  323   afIncomingMSGPacket_t *MSGpkt;
//  324   (void)task_id;  // Intentionally unreferenced parameter
//  325 
//  326   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
//  327   {
//  328     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     ?V0 + 6,#`?<Constant "ERROR">` & 0xff
        MOV     ?V0 + 7,#(`?<Constant "ERROR">` >> 8) & 0xff
        MOV     ?V0 + 4,#`?<Constant "OK">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "OK">` >> 8) & 0xff
        SJMP    ??CrossCallReturnLabel_7
//  329     while ( MSGpkt )
//  330     {
//  331       switch ( MSGpkt->hdr.event )
//  332       {
//  333         // Received when a key is pressed
//  334         case KEY_CHANGE:
//  335           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  336           break;
//  337 
//  338         // Received when a messages is received (OTA) for this endpoint
//  339         case AF_INCOMING_MSG_CMD:
//  340           SampleApp_MessageMSGCB( MSGpkt );
//  341           break;
//  342       case CMD_SERIAL_MSG:
//  343         mtOSALSerialData_t *p = (mtOSALSerialData_t *)MSGpkt;
//  344         HalUARTWrite(HAL_UART_PORT_0, &p->msg[1], p->msg[0]); //°Ñ½ÓÊÕµ½µÄÊý¾ÝÖØÐÂ·¢»ØÈ¥ 
//  345 
//  346         if(flat==1)
//  347         {
//  348            if(strstr((&p->msg[1]),"OK"))
//  349            {
//  350               HalUARTWrite(1,CWMODE_C,strlen(CWMODE_C));
//  351               HalUARTWrite(0, "ATOK\r\n", 6);
//  352               flat=2;
//  353               Delay_ms(1000);
//  354            }
//  355            else
//  356              HalUARTWrite(0, "AT ERR\r\n", 6); 
//  357         }
//  358          else if(flat==2)
//  359         {
//  360            if(strstr((&p->msg[1]),"OK"))
//  361            {
//  362               HalUARTWrite(1,CWJAP_C, strlen(CWJAP_C));//Á¬½Ó±¾µØWiFi
//  363               flat=3;
//  364                Delay_ms(500);
//  365            }
//  366           else if(strstr((&p->msg[1]),"ERROR"))
//  367            {
//  368              //Á¬½ÓÊ§°Ü
//  369 //             ReSetWifi();//ÖØÆôWiFi
//  370 //              Delay_ms(1000);
//  371 //              HalUARTWrite(1,"AT\r\n",4);
//  372 //              flat=1;     
//  373            }
//  374         }
//  375          else if(flat==3)
//  376         {
//  377            if(strstr((&p->msg[1]),"OK"))
//  378            {             
//  379              HalUARTWrite(1,CIPSTART_C, strlen(CIPSTART_C));//Á¬½Ó·þÎñÆ÷
//  380              flat=4;
//  381              Delay_ms(500);
//  382            }
//  383            else if(strstr((&p->msg[1]),"ERROR"))
//  384            {
//  385              ReSetWifi();//ÖØÆôWiFi
//  386               Delay_ms(1000);
//  387               HalUARTWrite(1,"AT\r\n",4);
//  388               flat=1;    
//  389            }
//  390         }
//  391         else if(flat==4)
//  392         {
//  393            if(strstr((&p->msg[1]),"OK"))
//  394            {
//  395              HalUARTWrite(1,CIPMODE_C, strlen(CIPMODE_C));//ÉèÖÃÍ¸´«
//  396               flat=5;
//  397               Delay_ms(500);
//  398            }
//  399         }
//  400          else if(flat==5)
//  401         {
//  402            if(strstr((&p->msg[1]),"OK"))
//  403            {
//  404              HalUARTWrite(1,CIPSEND_C, strlen(CIPSEND_C));//·¢ËÍ
//  405               flat=6;
//  406                Delay_ms(1000);
//  407            }
//  408         }
//  409         else if(flat==6)
//  410         {
//  411            if(strstr((&p->msg[1]),">"))
//  412            {           
//  413              //sprintf(nn,"%s","1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
//  414              
//  415              HalUARTWrite(0,"touchuan ok\r\n",strlen("touchuan ok\r\n"));//ÕâÀï¿ªÊ¼Í¸´«À´
//  416 //            sprintf(nn,"POST /devices/586474334/datapoints?type=3 HTTP/1.1\r\napi-key:iA8JHWjxuRkaL7oWa8uAkQbSOdk=\r\nHost:api.heclouds.com\r\nContent-Length:20\r\n\r\n{\"temp\":89,\"hum\":50}");
//  417                flat=7;
//  418 //              Delay_ms(500);
//  419 //              HalUARTWrite(1,nn,strlen(nn));//ÕâÀï¿ªÊ¼Í¸´«À´
//  420               a[0]=0x1a;
//  421               HalUARTWrite(1,a,1);
//  422            }
//  423         }
//  424 //        else if(flat==7)
//  425 //        {
//  426 
//  427           //HalUARTWrite(1,strTemp,12);
//  428           // HalUARTWrite(1, &p->msg[1], p->msg[0]); //°Ñ½ÓÊÕµ½µÄÊý¾ÝÖØÐÂ·¢»ØÈ¥                     
//  429 //        }
//  430          break;
//  431         // Received whenever the device changes state in the network
//  432         case ZDO_STATE_CHANGE:
//  433           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_1:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  434           if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
//  435                  (SampleApp_NwkState == DEV_ROUTER)
//  436               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_2
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_3
//  437           {
//  438             // Start sending the periodic message in a regular interval.
//  439             osal_start_timerEx( SampleApp_TaskID,
//  440                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  441                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
??SampleApp_ProcessEvent_2:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x48
        MOV     R5,#0xb
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  442           }
//  443           else
//  444           {
//  445             // Device is no longer in the network
//  446           }
//  447           break;
//  448 
//  449         default:
//  450           break;
//  451       }
//  452 
//  453       // Release the memory
//  454       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_msg_deallocate?relay
//  455 
//  456       // Next - if one is available
//  457       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_4 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        DEC     A
        JZ      ??SampleApp_ProcessEvent_5
        ADD     A,#-0x19
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#0x5a
        JZ      ??SampleApp_ProcessEvent_7
        ADD     A,#-0x11
        JZ      ??SampleApp_ProcessEvent_1
        SJMP    ??SampleApp_ProcessEvent_3
??SampleApp_ProcessEvent_7:
        ; Setup parameters for call to function SampleApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SampleApp_HandleKeys?relay
        SJMP    ??SampleApp_ProcessEvent_3
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_3
??SampleApp_ProcessEvent_5:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function HalUARTWrite
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_23:
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_ProcessEvent_8
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        JZ      ??SampleApp_ProcessEvent_9
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xd
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CWMODE=3\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CWMODE=3\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "ATOK\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "ATOK\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     A,#0x2
??SampleApp_ProcessEvent_10:
        MOVX    @DPTR,A
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x18
        MOV     R3,#0x3
??SampleApp_ProcessEvent_11:
        LCALL   ??Delay_ms?relay
        LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
??SampleApp_ProcessEvent_9:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT ERR\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT ERR\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
??SampleApp_ProcessEvent_12:
        LCALL   ??HalUARTWrite?relay
        LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
??SampleApp_ProcessEvent_8:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??SampleApp_ProcessEvent_13
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ      ??SampleApp_ProcessEvent_14
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x27
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CWJAP=\\"CMCC-IOT\\",\\"...">` & 0xff
        MOV     R3,#(`?<Constant "AT+CWJAP=\\"CMCC-IOT\\",\\"...">` >> 8) & 0xff
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     A,#0x3
??SampleApp_ProcessEvent_15:
        MOVX    @DPTR,A
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        SJMP    ??SampleApp_ProcessEvent_11
??SampleApp_ProcessEvent_14:
        ; Setup parameters for call to function strstr
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
??SampleApp_ProcessEvent_13:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??SampleApp_ProcessEvent_16
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ      ??SampleApp_ProcessEvent_17
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x26
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPSTART=\\"TCP\\",\\"18...">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSTART=\\"TCP\\",\\"18...">` >> 8) & 0xff
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     A,#0x4
        SJMP    ??SampleApp_ProcessEvent_15
??SampleApp_ProcessEvent_17:
        ; Setup parameters for call to function strstr
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_13:
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
        ; Setup parameters for call to function ReSetWifi
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     A,#0x1
        MOVX    @DPTR,A
        LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
??SampleApp_ProcessEvent_16:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??SampleApp_ProcessEvent_18
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPMODE=1\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPMODE=1\\r\\n">` >> 8) & 0xff
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     A,#0x5
        SJMP    ??SampleApp_ProcessEvent_15
??SampleApp_ProcessEvent_18:
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??SampleApp_ProcessEvent_19
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_12:
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPSEND\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSEND\\r\\n">` >> 8) & 0xff
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     A,#0x6
        LJMP    ??SampleApp_ProcessEvent_10 & 0xFFFF
??SampleApp_ProcessEvent_19:
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      $+5
        LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant ">">` & 0xff
        MOV     R5,#(`?<Constant ">">` >> 8) & 0xff
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_14:
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xd
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "touchuan ok\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "touchuan ok\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     A,#0x7
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1a
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LJMP    ??SampleApp_ProcessEvent_12 & 0xFFFF
//  458     }
//  459 
//  460     // return unprocessed events
//  461     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_20:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_21
//  462   }
//  463 
//  464   // Send a message out - This event is generated by a timer
//  465   //  (setup in SampleApp_Init()).
//  466   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_22
//  467   {
//  468     // Send the periodic message
//  469     //SampleApp_SendPeriodicMessage();
//  470     SampleApp_Send_P2P_Message();
        ; Setup parameters for call to function SampleApp_Send_P2P_Message
        LCALL   ??SampleApp_Send_P2P_Message?relay
//  471 
//  472     // Setup to send message again in normal period (+ a little jitter)
//  473     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  474         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x48
        MOV     R4,A
        CLR     A
        ADDC    A,#0xb
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  475 
//  476     // return unprocessed events
//  477     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_20
//  478   }
//  479 
//  480   // Discard unknown events
//  481   return 0;
??SampleApp_ProcessEvent_22:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_21:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  482 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     ?V0 + 9,R3
        MOV     A,R2
        ORL     A,?V0 + 9
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_4
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_5
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_10
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_11
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_12
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_13
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_14
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??strstr?relay
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        LCALL   ??ReSetWifi?relay
        ; Setup parameters for call to function Delay_ms
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Delay_ms?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT\\r\\n">` >> 8) & 0xff
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31
//  483 
//  484 /*********************************************************************
//  485  * Event Generation Functions
//  486  */
//  487 /*********************************************************************
//  488  * @fn      SampleApp_HandleKeys
//  489  *
//  490  * @brief   Handles all key events for this device.
//  491  *
//  492  * @param   shift - true if in shift/alt.
//  493  * @param   keys - bit field for key events. Valid entries:
//  494  *                 HAL_KEY_SW_2
//  495  *                 HAL_KEY_SW_1
//  496  *
//  497  * @return  none
//  498  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  499 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  500 {
        FUNCALL SampleApp_HandleKeys, SampleApp_SendFlashMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  501   (void)shift;  // Intentionally unreferenced parameter
//  502   
//  503   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_HandleKeys_0
//  504   {
//  505     /* This key sends the Flash Command is sent to Group 1.
//  506      * This device will not receive the Flash Command from this
//  507      * device (even if it belongs to group 1).
//  508      */
//  509     SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
        ; Setup parameters for call to function SampleApp_SendFlashMessage
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??SampleApp_SendFlashMessage?relay
//  510   }
//  511 
//  512   if ( keys & HAL_KEY_SW_2 )
??SampleApp_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??SampleApp_HandleKeys_1
//  513   {
//  514     /* The Flashr Command is sent to Group 1.
//  515      * This key toggles this device in and out of group 1.
//  516      * If this device doesn't belong to group 1, this application
//  517      * will not receive the Flash command sent to group 1.
//  518      */
//  519     aps_Group_t *grp;
//  520     grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
//  521     if ( grp )
        ; Setup parameters for call to function aps_FindGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_FindGroup?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SampleApp_HandleKeys_2
//  522     {
//  523       // Remove from the group
//  524       aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
        ; Setup parameters for call to function aps_RemoveGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_RemoveGroup?relay
        SJMP    ??SampleApp_HandleKeys_1
//  525     }
//  526     else
//  527     {
//  528       // Add to the flash group
//  529       aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
??SampleApp_HandleKeys_2:
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  530     }
//  531   }
//  532 }
??SampleApp_HandleKeys_1:
        LJMP    ??Subroutine13_0 & 0xFFFF
        CFI EndBlock cfiBlock32
//  533 
//  534 /*********************************************************************
//  535  * LOCAL FUNCTIONS
//  536  */
//  537 
//  538 /*********************************************************************
//  539  * @fn      SampleApp_MessageMSGCB
//  540  *
//  541  * @brief   Data message processor callback.  This function processes
//  542  *          any incoming data - probably from other devices.  So, based
//  543  *          on cluster ID, perform the intended action.
//  544  *
//  545  * @param   none
//  546  *
//  547  * @return  none
//  548  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  549 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  550 {
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 216, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 216, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 216, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 216, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 224, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 224, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 224, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 224, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 216, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 216, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 216, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 216, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 216, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 216, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 200
        MOV     A,#0x38
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 216)
//  551   uint16 flashTime;
//  552   char HttpData[200];
//  553   uint8 ceshi[200];//²âÊÔ»º´æ
//  554   switch ( pkt->clusterId )
        MOV     A,R2
        ADD     A,#0x21
        MOV     R6,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_2
        CODE
//  555   {
//  556     case SAMPLEAPP_P2P_CLUSTERID:
//  557 //      HalUARTWrite(0, "T&H:", 4);       //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
//  558       HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
??SampleApp_MessageMSGCB_2:
        MOV     A,R2
        ADD     A,#0x1f
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function HalUARTWrite
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ?Subroutine4 & 0xFFFF
//  559       HalUARTWrite(0, "\n", 1);         // »Ø³µ»»ÐÐ
??CrossCallReturnLabel_2:
        LCALL   ??Subroutine12_0 & 0xFFFF
//  560       
//  561        //tcpÁ¬½Ó³É¹¦²¢ÇÒÊÕµ½ÖÕ¶ËÊý¾ÝºóÏòÆ½Ì¨·¢ËÍÎÂÊª¶È
//  562       if(flat==7)
??CrossCallReturnLabel_26:
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
//  563       {
//  564         sprintf(HttpData,"POST /devices/%s/datapoints?type=3 HTTP/1.1\r\napi-key:%s\r\nHost:api.heclouds.com\r\nContent-Length:%d\r\n\r\n%s",devid,devkey, pkt->cmd.DataLength,pkt->cmd.Data);
        MOV     ?V0 + 2,#`?<Constant "POST /devices/%s/data...">` & 0xff
        MOV     ?V0 + 3,#(`?<Constant "POST /devices/%s/data...">` >> 8) & 0xff
        MOV     ?V0 + 6,#`?<Constant "586474334">` & 0xff
        MOV     ?V0 + 7,#(`?<Constant "586474334">` >> 8) & 0xff
        MOV     ?V0 + 4,#`?<Constant "iA8JHWjxuRkaL7oWa8uAk...">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "iA8JHWjxuRkaL7oWa8uAk...">` >> 8) & 0xff
        ; Setup parameters for call to function sprintf
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 218)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 220)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 222)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 224)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 216)
//  565                
//  566         sprintf(HttpData,"POST /devices/%s/datapoints?type=3 HTTP/1.1\r\napi-key:%s\r\nHost:api.heclouds.com\r\nContent-Length:%d\r\n\r\n%s",devid,devkey, pkt->cmd.DataLength,pkt->cmd.Data);	
        ; Setup parameters for call to function sprintf
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 218)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 220)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 222)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 224)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 216)
//  567        //  sprintf(HttpData,"POST /devices/586474334/datapoints?type=3 HTTP/1.1\r\napi-key:iA8JHWjxuRkaL7oWa8uAkQbSOdk=\r\nHost:api.heclouds.com\r\nContent-Length:%d\r\n\r\n{\"temp\":89,\"hum\":50}");
//  568       //  sprintf(ceshi,"len£º%d\r\n",strlen(HttpData));//Êý¾Ý³¤¶È
//  569        // HalUARTWrite(0,ceshi,strlen(ceshi)); 
//  570         //HalUARTWrite(0,HttpData,strlen(HttpData));
//  571         HalUARTWrite(1,HttpData,strlen(HttpData));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
        SJMP    ??SampleApp_MessageMSGCB_0
//  572         
//  573         //²âÊÔ·¢ËÍ¹Ì¶¨Êý¾Ý
//  574 //         sprintf(ceshi,"POST /devices/586474334/datapoints?type=3 HTTP/1.1\r\napi-key:iA8JHWjxuRkaL7oWa8uAkQbSOdk=\r\nHost:api.heclouds.com\r\nContent-Length:20\r\n\r\n{\"temp\":89,\"hum\":50}");
//  575 //         HalUARTWrite(0,ceshi,strlen(ceshi)); 
//  576      }
//  577  
//  578       break;    
//  579     case SAMPLEAPP_PERIODIC_CLUSTERID:
//  580       break;
//  581 
//  582     case SAMPLEAPP_FLASH_CLUSTERID:
//  583       flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
//  584       HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
??SampleApp_MessageMSGCB_1:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_9:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R3,#0x32
        MOV     R2,#0x4
        MOV     R1,#0x8
        LCALL   ??HalLedBlink?relay
//  585       break;
//  586   }
//  587 }
??SampleApp_MessageMSGCB_0:
        MOV     A,#-0x38
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 216)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        ; Setup parameters for call to function HalLedBlink
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        MOV     R1,#0x1
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 216)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        LCALL   ??HalUARTWrite?relay
        MOV     DPTR,#flat
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52
//  588 
//  589 /*********************************************************************
//  590  * @fn      SampleApp_SendPeriodicMessage
//  591  *
//  592  * @brief   Send the periodic message.
//  593  *
//  594  * @param   none
//  595  *
//  596  * @return  none
//  597  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  598 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  599 {
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  600   if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  601                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  602                        1,
//  603                        (uint8*)&SampleAppPeriodicCounter,
//  604                        &SampleApp_TransID,
//  605                        AF_DISCV_ROUTE,
//  606                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
        MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        CFI EndBlock cfiBlock53
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  607   {
//  608   }
//  609   else
//  610   {
//  611     // Error occurred in request to send.
//  612   }
//  613 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock54
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock55
//  614 
//  615 /*********************************************************************
//  616  * @fn      SampleApp_SendFlashMessage
//  617  *
//  618  * @brief   Send the flash message to group 1.
//  619  *
//  620  * @param   flashTime - in milliseconds
//  621  *
//  622  * @return  none
//  623  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  624 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI Function SampleApp_SendFlashMessage
        CODE
//  625 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  626   uint8 buffer[3];
//  627   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  628   buffer[1] = LO_UINT16( flashTime );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  629   buffer[2] = HI_UINT16( flashTime );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  630 
//  631   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  632                        SAMPLEAPP_FLASH_CLUSTERID,
//  633                        3,
//  634                        buffer,
//  635                        &SampleApp_TransID,
//  636                        AF_DISCV_ROUTE,
//  637                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  638   {
//  639   }
//  640   else
//  641   {
//  642     // Error occurred in request to send.
//  643   }
//  644 }
        MOV     A,#0x3
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock56
//  645 
//  646 /*********************************************************************
//  647  * @fn      SampleApp_Send_P2P_Message
//  648  *
//  649  * @brief   point to point.
//  650  *
//  651  * @param   none
//  652  *
//  653  * @return  none
//  654  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  655 void SampleApp_Send_P2P_Message( void )
SampleApp_Send_P2P_Message:
        CFI Block cfiBlock57 Using cfiCommon0
        CFI Function SampleApp_Send_P2P_Message
        CODE
//  656 {
        FUNCALL SampleApp_Send_P2P_Message, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, DHT11
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 27
        MOV     A,#-0x1b
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  657   byte i, temp[3], humidity[3], strTemp[21];
//  658   Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
//  659   DHT11();             //»ñÈ¡ÎÂÊª¶È
        ; Setup parameters for call to function DHT11
        LCALL   ??DHT11?relay
//  660   Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
//  661   //½«ÎÂÊª¶ÈµÄ×ª»»³É×Ö·û´®,¹©LCDÏÔÊ¾  
//  662   temp[0] = wendu_shi+0x30;
        MOV     DPTR,#wendu_shi
        MOVX    A,@DPTR
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  663   temp[1] = wendu_ge+0x30;
        MOV     DPTR,#wendu_ge
        MOVX    A,@DPTR
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  664   temp[2] = '\0';
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  665   humidity[0] = shidu_shi+0x30;
        MOV     DPTR,#shidu_shi
        MOVX    A,@DPTR
        ADD     A,#0x30
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  666   humidity[1] = shidu_ge+0x30;
        MOV     DPTR,#shidu_ge
        MOVX    A,@DPTR
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  667   humidity[2] = '\0';
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  668   //½«Êý¾ÝÕûºÏºó·½±ã·¢¸øÐ­µ÷Æ÷ÏÔÊ¾
//  669   //{"temp": ,"hum": }
//  670 //  osal_memcpy(strTemp, temp, 2); 
//  671 //  osal_memcpy(&strTemp[2], "  ", 2);
//  672 //  osal_memcpy(&strTemp[4], humidity, 3);
//  673   
//  674    osal_memcpy(strTemp,"{\"temp\":", 8); 
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "{\\"temp\\":">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "{\\"temp\\":">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  675    osal_memcpy(&strTemp[8],temp, 2);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  676    osal_memcpy(&strTemp[10],",\"hum\":", 7);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant ",\\"hum\\":">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant ",\\"hum\\":">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  677    osal_memcpy(&strTemp[17],humidity, 2);
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  678    osal_memcpy(&strTemp[19],"}", 1);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "}">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "}">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  679   
//  680   //»ñµÃµÄÎÂÊª¶ÈÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾
//  681   HalUARTWrite(0, "T&H:", 4);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "T&H:">` & 0xff
        MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  682   HalUARTWrite(0, strTemp, 20);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ?Subroutine4 & 0xFFFF
//  683   HalUARTWrite(0, "\n",1);
??CrossCallReturnLabel_3:
        LCALL   ??HalUARTWrite?relay
//  684 
//  685   //Êä³öµ½LCDÏÔÊ¾
//  686   for(i=0; i<3; i++)
//  687   {   
//  688     if(i==0)
//  689     {
//  690       LCD_P16x16Ch(i*16,4,i*16);
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0x0
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??LCD_P16x16Ch?relay
//  691       LCD_P16x16Ch(i*16,6,(i+3)*16);
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0x30
        MOV     R2,#0x6
        MOV     R1,#0x0
        LCALL   ??LCD_P16x16Ch?relay
//  692     }
        MOV     R7,#0x1
//  693     else
//  694     {
//  695       LCD_P16x16Ch(i*16,4,i*16);
??SampleApp_Send_P2P_Message_0:
        MOV     A,R7
        SWAP    A
        ANL     A,#0xf0
        MOV     R6,A
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,A
        MOV     R2,#0x4
        MOV     R1,A
        LCALL   ??LCD_P16x16Ch?relay
//  696       LCD_P16x16Ch(i*16,6,i*16);        
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     A,R6
        MOV     R3,A
        MOV     R2,#0x6
        MOV     R1,A
        LCALL   ??LCD_P16x16Ch?relay
//  697     }
//  698   } 
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x3
        JC      ??SampleApp_Send_P2P_Message_0
//  699   LCD_P8x16Str(44, 4, temp);
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x4
        MOV     R1,#0x2c
        LCALL   ??LCD_P8x16Str?relay
//  700   LCD_P8x16Str(44, 6, humidity);
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x6
        MOV     R1,#0x2c
        LCALL   ??LCD_P8x16Str?relay
//  701  
//  702   if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
//  703                        SAMPLEAPP_P2P_CLUSTERID,
//  704                        20,
//  705                        strTemp,
//  706                        &SampleApp_TransID,
//  707                        AF_DISCV_ROUTE,
//  708                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     ?V0 + 0,#0x14
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     ?V0 + 0,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_P2P_DstAddr & 0xff
        MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
//  709   {
//  710   }
//  711   else
//  712   {
//  713     // Error occurred in request to send.
//  714   }
//  715 }
        MOV     A,#0x1b
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond58 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 114)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 216)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for flat>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReSetWifi?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReSetWifi

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendFlashMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendFlashMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Send_P2P_Message?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Send_P2P_Message

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "UART0\\r\\n">`:
        DB "UART0\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT\\r\\n">`:
        DB "AT\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SampleApp">`:
        DB "SampleApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OK">`:
        DB "OK"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWMODE=3\\r\\n">`:
        DB "AT+CWMODE=3\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ATOK\\r\\n">`:
        DB "ATOK\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT ERR\\r\\n">`:
        DB "AT ERR\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWJAP=\\"CMCC-IOT\\",\\"...">`:
        DB "AT+CWJAP=\"CMCC-IOT\",\"linyi1234567890\"\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ERROR">`:
        DB "ERROR"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSTART=\\"TCP\\",\\"18...">`:
        DB "AT+CIPSTART=\"TCP\",\"183.230.40.33\",80\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPMODE=1\\r\\n">`:
        DB "AT+CIPMODE=1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSEND\\r\\n">`:
        DB "AT+CIPSEND\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ">">`:
        DB ">"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "touchuan ok\\r\\n">`:
        DB "touchuan ok\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "\\n">`:
        DB "\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "POST /devices/%s/data...">`:
        DB 50H, 4FH, 53H, 54H, 20H, 2FH, 64H, 65H
        DB 76H, 69H, 63H, 65H, 73H, 2FH, 25H, 73H
        DB 2FH, 64H, 61H, 74H, 61H, 70H, 6FH, 69H
        DB 6EH, 74H, 73H, 3FH, 74H, 79H, 70H, 65H
        DB 3DH, 33H, 20H, 48H, 54H, 54H, 50H, 2FH
        DB 31H, 2EH, 31H, 0DH, 0AH, 61H, 70H, 69H
        DB 2DH, 6BH, 65H, 79H, 3AH, 25H, 73H, 0DH
        DB 0AH, 48H, 6FH, 73H, 74H, 3AH, 61H, 70H
        DB 69H, 2EH, 68H, 65H, 63H, 6CH, 6FH, 75H
        DB 64H, 73H, 2EH, 63H, 6FH, 6DH, 0DH, 0AH
        DB 43H, 6FH, 6EH, 74H, 65H, 6EH, 74H, 2DH
        DB 4CH, 65H, 6EH, 67H, 74H, 68H, 3AH, 25H
        DB 64H, 0DH, 0AH, 0DH, 0AH, 25H, 73H, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "586474334">`:
        DB "586474334"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "iA8JHWjxuRkaL7oWa8uAk...">`:
        DB "iA8JHWjxuRkaL7oWa8uAkQbSOdk="

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "{\\"temp\\":">`:
        DB "{\"temp\":"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant ",\\"hum\\":">`:
        DB ",\"hum\":"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "}">`:
        DB "}"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "T&H:">`:
        DB "T&H:"

        END
//  716 
//  717 /*********************************************************************
//  718 *********************************************************************/
// 
// 1 938 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//     3 bytes in segment SFR_AN
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//   378 bytes in segment XDATA_ROM_C
//    68 bytes in segment XDATA_Z
// 
// 1 987 bytes of CODE  memory
//   378 bytes of CONST memory
//     0 bytes of DATA  memory (+ 3 bytes shared)
//    69 bytes of XDATA memory
//
//Errors: none
//Warnings: 17
