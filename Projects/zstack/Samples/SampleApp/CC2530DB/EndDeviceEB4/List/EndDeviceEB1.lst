###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         03/Mar/2020  23:56:20 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\EndDeviceEB1.c                    #
#    Command line       =  -f C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óone #
#                          net·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoo #
#                          rd.cfg (-DCPU32MHZ -DROOT=__near_func              #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig #
#                          .cfg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\EndDeviceEB1.c -D ZIGBEEPRO -D    #
#                          ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D            #
#                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\EndDeviceEB4\List\ -lA            #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\EndDeviceEB4\List\                #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\EndDeviceEB4\Obj\ -e --debug      #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\Administrator\Des #
#                          ktop\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óon #
#                          enet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\ -I       #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\SOURCE\ -I                     #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I       #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I  #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC #
#                          LUDE\ -I C:\Users\Administrator\Desktop\ZigBeeTCPÁ #
#                          ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö #
#                          ½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\HAL\TARGET\CC2530EB\ -I                          #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC #
#                          U\CCSOC\ -I C:\Users\Administrator\Desktop\ZigBeeT #
#                          CPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ #
#                          ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\OSAL\INCLUDE\ -I C:\Users\Administrator\Deskt #
#                          op\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonen #
#                          et·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\STACK\AF\ -I                        #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N #
#                          WK\ -I C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½ #
#                          Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú #
#                          ³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\SEC\ -I C:\Users\Administrator\Desktop\ZigBe #
#                          eTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ20 #
#                          0¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SAPI\ -I C:\Users\Administrator\Deskt #
#                          op\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonen #
#                          et·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\STACK\SYS\ -I                       #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z #
#                          DO\ -I C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½ #
#                          Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú #
#                          ³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          ZMAC\F8W\ -I C:\Users\Administrator\Desktop\ZigBee #
#                          TCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200 #
#                          ¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\ZMAC\ -I C:\Users\Administrator\Desktop\ZigB #
#                          eeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ2 #
#                          00¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\SERVICES\SADDR\ -I                         #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE #
#                          S\SDATA\ -I C:\Users\Administrator\Desktop\ZigBeeT #
#                          CPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ #
#                          ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\INCLUDE\ -I C:\Users\Administrator\Deskto #
#                          p\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonene #
#                          t·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\MAC\HIGH_LEVEL\ -I                   #
#                          C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW #
#                          _LEVEL\srf04\ -I C:\Users\Administrator\Desktop\Zi #
#                          gBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢Ë #
#                          Í200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz    #
#                          --require_prototypes                               #
#    List file          =  C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\EndDeviceEB4\List\EndDeviceEB1.ls #
#                          t                                                  #
#    Object file        =  C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet #
#                          ·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\EndDeviceEB4\Obj\EndDeviceEB1.r51 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB1.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "DHT11.h"
     78          #include "stdio.h"
     79          #include "string.h"
     80          
     81          #define LEN            100
     82          
     83          #define WIFIRESET P0_6       // P0.6¿Ú¿ØÖÆIGT
     84          #define  devkey "iA8JHWjxuRkaL7oWa8uAkQbSOdk=" //onenetÆ½Ì¨tcp²úÆ·apikey
     85          #define  devid "586474334"//onenetÆ½Ì¨tcpÉè±¸id
     86          
     87          //WIFIÁ¬½ÓÃüÁî
     88          #define AT_C       "AT\r\n"
     89          #define CWMODE_C   "AT+CWMODE=3\r\n"  //STA+APÄ£Ê½
     90          #define CWJAP_C    "AT+CWJAP=\"CMCC-IOT\",\"linyi1234567890\"\r\n" //"AT+CWJAP=\"your_ssid\",\"your_pwd\"\r\n",
     91          //#define CIPSTART_C "AT+CIPSTART=\"TCP\",\"192.168.1.3\",8234\r\n" //Á¬½ÓHTTP·þÎñÆ÷192.168.1.4,8234  8234ÊÇ·þÎñÆ÷µÄ¶Ë¿ÚºÅ ---±¾µØ²âÊÔ
     92          #define CIPSTART_C "AT+CIPSTART=\"TCP\",\"183.230.40.33\",80\r\n"  //Á¬½ÓÔÆ·þÎñÆ÷
     93          #define CIPMODE_C  "AT+CIPMODE=1\r\n"  //Í¸´«Ä£Ê½
     94          #define CIPSEND_C  "AT+CIPSEND\r\n"  //·¢ËÍÊý¾ÝµÄÖ¸Áî
     95          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          uint8 *line;
   \                     line:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          uint8 len_rcv;
   \                     len_rcv:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     98          uint8 flat = 1;
   \                     flat:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for flat>`
   \   000001                REQUIRE __INIT_XDATA_I
     99          
    100          static uint8 SerialApp_TxBuf[LEN+1];
    101          static uint8 SerialApp_TxLen=0;
    102          
    103          /*********************************************************************
    104           * MACROS
    105           */
    106          
    107          /*********************************************************************
    108           * CONSTANTS
    109           */
    110          
    111          /*********************************************************************
    112           * TYPEDEFS
    113           */
    114          
    115          /*********************************************************************
    116           * GLOBAL VARIABLES
    117           */
    118          
    119          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    120          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    121          {
    122            SAMPLEAPP_PERIODIC_CLUSTERID,
    123            SAMPLEAPP_FLASH_CLUSTERID
    124          };
    125          

   \                                 In  segment XDATA_ROM_C, align 1
    126          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    127          {
    128            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    129            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    130            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    131            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    132            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    133            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    134            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    135            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    136            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    137          };
    138          
    139          // This is the Endpoint/Interface description.  It is defined here, but
    140          // filled-in in SampleApp_Init().  Another way to go would be to fill
    141          // in the structure here and make it a "const" (in code space).  The
    142          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    144          
    145          /*********************************************************************
    146           * EXTERNAL VARIABLES
    147           */
    148          
    149          /*********************************************************************
    150           * EXTERNAL FUNCTIONS
    151           */
    152          
    153          /*********************************************************************
    154           * LOCAL VARIABLES
    155           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    157                                    // This variable will be received when
    158                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    160          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    162          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    171          
    172          
    173          
    174          /*********************************************************************
    175           * LOCAL FUNCTIONS
    176           */
    177          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    178          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    179          void SampleApp_SendPeriodicMessage( void );
    180          void SampleApp_SendFlashMessage( uint16 flashTime );
    181          void SampleApp_Send_P2P_Message(void);
    182          /*********************************************************************
    183           * NETWORK LAYER CALLBACKS
    184           */
    185          
    186          /*********************************************************************
    187           * PUBLIC FUNCTIONS
    188           */
    189          
    190          
    191          /*********************************************************************
    192           * @fn      SampleApp_Init
    193           *
    194           * @brief   Initialization function for the Generic App Task.
    195           *          This is called during initialization and should contain
    196           *          any application specific initialization (ie. hardware
    197           *          initialization/setup, table initialization, power up
    198           *          notificaiton ... ).
    199           *
    200           * @param   task_id - the ID assigned by OSAL.  This ID should be
    201           *                    used to send messages and set timers.
    202           *
    203           * @return  none
    204           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    205          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    206          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 100
   \   000005   749C         MOV     A,#-0x64
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    207            
    208            unsigned char tmp[100];
    209            SampleApp_TaskID = task_id;
   \   00000C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000F   F0           MOVX    @DPTR,A
    210            SampleApp_NwkState = DEV_INIT;
   \   000010   90....       MOV     DPTR,#SampleApp_NwkState
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    211            SampleApp_TransID = 0;
   \   000016   90....       MOV     DPTR,#SampleApp_TransID
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    212            
    213            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   00001B                ; Setup parameters for call to function MT_UartInit
   \   00001B   12....       LCALL   ??MT_UartInit?relay
    214            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   00001E                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00001E   EE           MOV     A,R6
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??MT_UartRegisterTaskID?relay
    215            HalUARTWrite(0, "UART0\r\n", 7);
   \   000023                ; Setup parameters for call to function HalUARTWrite
   \   000023   7C07         MOV     R4,#0x7
   \   000025   7D00         MOV     R5,#0x0
   \   000027   7A..         MOV     R2,#`?<Constant "UART0\\r\\n">` & 0xff
   \   000029   7B..         MOV     R3,#(`?<Constant "UART0\\r\\n">` >> 8) & 0xff
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   12....       LCALL   ??HalUARTWrite?relay
    216            osal_memset(tmp,0,100);
   \   000030                ; Setup parameters for call to function osal_memset
   \   000030   7C64         MOV     R4,#0x64
   \   000032   7D00         MOV     R5,#0x0
   \   000034   7900         MOV     R1,#0x0
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   AA82         MOV     R2,DPL
   \   00003E   AB83         MOV     R3,DPH
   \   000040   12....       LCALL   ??osal_memset?relay
    217            tmp[0] = HAL_UART_DMA+0x30;
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   7431         MOV     A,#0x31
   \   00004B   F0           MOVX    @DPTR,A
    218            tmp[1] = HAL_UART_ISR+0x30;
   \   00004C   7401         MOV     A,#0x1
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7432         MOV     A,#0x32
   \   000053   F0           MOVX    @DPTR,A
    219            tmp[2] = HAL_UART_USB+0x30;
   \   000054   7402         MOV     A,#0x2
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   7430         MOV     A,#0x30
   \   00005B   F0           MOVX    @DPTR,A
    220            HalUARTWrite(0, tmp, 6);
   \   00005C                ; Setup parameters for call to function HalUARTWrite
   \   00005C   7C06         MOV     R4,#0x6
   \   00005E   7D00         MOV     R5,#0x0
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   7900         MOV     R1,#0x0
   \   00006C   12....       LCALL   ??HalUARTWrite?relay
    221              P0SEL &= 0x7f;                  //P0_7ÅäÖÃ³ÉÍ¨ÓÃio
   \   00006F   53F37F       ANL     0xf3,#0x7f
    222          
    223            line = osal_msg_allocate(LEN);
   \   000072                ; Setup parameters for call to function osal_msg_allocate
   \   000072   7A64         MOV     R2,#0x64
   \   000074   7B00         MOV     R3,#0x0
   \   000076   12....       LCALL   ??osal_msg_allocate?relay
   \   000079   90....       MOV     DPTR,#line
   \   00007C   EA           MOV     A,R2
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   EB           MOV     A,R3
   \   000080   F0           MOVX    @DPTR,A
    224            // Device hardware initialization can be added here or in main() (Zmain.c).
    225            // If the hardware is application specific - add it here.
    226            // If the hardware is other parts of the device add it in main().
    227          
    228           #if defined ( BUILD_ALL_DEVICES )
    229            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    230            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    231            // together - if they are - we will start up a coordinator. Otherwise,
    232            // the device will start as a router.
    233            if ( readCoordinatorJumper() )
    234              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    235            else
    236              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    237          #endif // BUILD_ALL_DEVICES
    238          
    239          #if defined ( HOLD_AUTO_START )
    240            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    241            //  from starting the device and wait for the application to
    242            //  start the device.
    243            ZDOInitDevice(0);
    244          #endif
    245          
    246            // Setup for the periodic message's destination address
    247            // Broadcast to everyone
    248            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000081   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000084   740F         MOV     A,#0xf
   \   000086   F0           MOVX    @DPTR,A
    249            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000087   A3           INC     DPTR
   \   000088   7414         MOV     A,#0x14
   \   00008A   F0           MOVX    @DPTR,A
    250            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00008B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00008E   74FF         MOV     A,#-0x1
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   F0           MOVX    @DPTR,A
    251          
    252            // Setup for the flash command's destination address - Group 1
    253            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000093   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000096   7401         MOV     A,#0x1
   \   000098   F0           MOVX    @DPTR,A
    254            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000099   A3           INC     DPTR
   \   00009A   7414         MOV     A,#0x14
   \   00009C   F0           MOVX    @DPTR,A
    255            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00009D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E4           CLR     A
   \   0000A5   F0           MOVX    @DPTR,A
    256            
    257            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   0000A6   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   0000A9   7402         MOV     A,#0x2
   \   0000AB   F0           MOVX    @DPTR,A
    258            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   0000AC   A3           INC     DPTR
   \   0000AD   7414         MOV     A,#0x14
   \   0000AF   F0           MOVX    @DPTR,A
    259            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   0000B0   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   0000B3   E4           CLR     A
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   F0           MOVX    @DPTR,A
    260          
    261            // Fill out the endpoint description.
    262            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   0000B7   90....       MOV     DPTR,#SampleApp_epDesc
   \   0000BA   7414         MOV     A,#0x14
   \   0000BC   F0           MOVX    @DPTR,A
    263            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   0000BD   A3           INC     DPTR
   \   0000BE   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   0000C4   F0           MOVX    @DPTR,A
    264            SampleApp_epDesc.simpleDesc
    265                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   0000C5   A3           INC     DPTR
   \   0000C6   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   0000CC   F0           MOVX    @DPTR,A
    266            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   0000CD   A3           INC     DPTR
   \   0000CE   E4           CLR     A
   \   0000CF   F0           MOVX    @DPTR,A
    267          
    268            // Register the endpoint description with the AF
    269            afRegister( &SampleApp_epDesc );
   \   0000D0                ; Setup parameters for call to function afRegister
   \   0000D0   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   0000D2   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   0000D4   12....       LCALL   ??afRegister?relay
    270          
    271            // Register for all key events - This app will handle all key events
    272            RegisterForKeys( SampleApp_TaskID );
   \   0000D7                ; Setup parameters for call to function RegisterForKeys
   \   0000D7   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   F9           MOV     R1,A
   \   0000DC   12....       LCALL   ??RegisterForKeys?relay
    273          
    274            // By default, all devices start out in Group 1
    275            SampleApp_Group.ID = 0x0001;
   \   0000DF   90....       MOV     DPTR,#SampleApp_Group
   \   0000E2   7401         MOV     A,#0x1
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   E4           CLR     A
   \   0000E7   F0           MOVX    @DPTR,A
    276            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   0000E8                ; Setup parameters for call to function osal_memcpy
   \   0000E8   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000EB   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000EE   F5..         MOV     ?V0 + 2,A
   \   0000F0   78..         MOV     R0,#?V0 + 0
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F5   7C07         MOV     R4,#0x7
   \   0000F7   7D00         MOV     R5,#0x0
   \   0000F9   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000FB   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000FD   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000100   12....       LCALL   ?DEALLOC_XSTACK8
    277            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000103                ; Setup parameters for call to function aps_AddGroup
   \   000103   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000105   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000107   7914         MOV     R1,#0x14
   \   000109   12....       LCALL   ??aps_AddGroup?relay
    278          
    279          #if defined ( LCD_SUPPORTED )
    280            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   00010C                ; Setup parameters for call to function HalLcdWriteString
   \   00010C   7901         MOV     R1,#0x1
   \   00010E   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   000110   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   000112   12....       LCALL   ??HalLcdWriteString?relay
    281          #endif
    282          }
   \   000115   7464         MOV     A,#0x64
   \   000117                REQUIRE ?Subroutine0
   \   000117                REQUIRE P0SEL
   \   000117                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F03         MOV     R7,#0x3
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    283          
    284          
    285          /*********************************************************************
    286           * @fn      SampleApp_ProcessEvent
    287           *
    288           * @brief   Generic Application Task event processor.  This function
    289           *          is called to process all events for the task.  Events
    290           *          include timers, messages and any other user defined events.
    291           *
    292           * @param   task_id  - The OSAL assigned task ID.
    293           * @param   events - events to process.  This is a bit map and can
    294           *                   contain more than one event.
    295           *
    296           * @return  none
    297           */
    298          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    300          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    301            afIncomingMSGPacket_t *MSGpkt;
    302            (void)task_id;  // Intentionally unreferenced parameter
    303          
    304            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    305            {
    306              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   8026         SJMP    ??SampleApp_ProcessEvent_1
    307              while ( MSGpkt )
    308              {
    309                switch ( MSGpkt->hdr.event )
    310                {
    311                  // Received when a key is pressed
    312                  case KEY_CHANGE:
    313                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    314                    break;
    315          
    316                  // Received when a messages is received (OTA) for this endpoint
    317                  case AF_INCOMING_MSG_CMD:
    318                    SampleApp_MessageMSGCB( MSGpkt );
    319                    break;
    320                case CMD_SERIAL_MSG:
    321                  mtOSALSerialData_t *p = (mtOSALSerialData_t *)MSGpkt;
                         ^
Warning[Pe1072]: a declaration cannot have a label

        switch ( MSGpkt->hdr.event )
        ^
"C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB1.c",309  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "p" (declared at line 321 of
                      "C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó
                      ³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2
                      .3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\End
                      DeviceEB1.c")

  static uint8 SerialApp_TxBuf[LEN+1];
               ^
"C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB1.c",100  Warning[Pe177]: 
          variable "SerialApp_TxBuf" was declared but never referenced

  static uint8 SerialApp_TxLen=0;
               ^
"C:\Users\Administrator\Desktop\ZigBeeTCPÁ¬½Óonenet·¢ËÍ¼Ó³¤¶È\ZigBeeTCPÁ¬½Óonenet·¢ËÍ200¸ö×Ö½Ú³¤¶È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB1.c",101  Warning[Pe177]: 
          variable "SerialApp_TxLen" was declared but never referenced
    322                  HalUARTWrite(HAL_UART_PORT_0, &p->msg[1], p->msg[0]); //°Ñ½ÓÊÕµ½µÄÊý¾ÝÖØÐÂ·¢»ØÈ¥ 
    323          
    324                   break;
    325                  // Received whenever the device changes state in the network
    326                  case ZDO_STATE_CHANGE:
    327                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#SampleApp_NwkState
   \   000017   F0           MOVX    @DPTR,A
    328                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    329                           (SampleApp_NwkState == DEV_ROUTER)
    330                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000018   6407         XRL     A,#0x7
   \   00001A   6005         JZ      ??SampleApp_ProcessEvent_3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6406         XRL     A,#0x6
   \   00001F   7010         JNZ     ??SampleApp_ProcessEvent_4
    331                    {
    332                      // Start sending the periodic message in a regular interval.
    333                      osal_start_timerEx( SampleApp_TaskID,
    334                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    335                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000021                ; Setup parameters for call to function osal_start_timerEx
   \   000021   7CB8         MOV     R4,#-0x48
   \   000023   7D0B         MOV     R5,#0xb
   \   000025   7A01         MOV     R2,#0x1
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??osal_start_timerEx?relay
    336                    }
    337                    else
    338                    {
    339                      // Device is no longer in the network
    340                    }
    341                    break;
    342          
    343                  default:
    344                    break;
    345                }
    346          
    347                // Release the memory
    348                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000031                ; Setup parameters for call to function osal_msg_deallocate
   \   000031   AA..         MOV     R2,?V0 + 0
   \   000033   AB..         MOV     R3,?V0 + 1
   \   000035   12....       LCALL   ??osal_msg_deallocate?relay
    349          
    350                // Next - if one is available
    351                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000038                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000038   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??osal_msg_receive?relay
   \   000040   8A..         MOV     ?V0 + 0,R2
   \   000042   8B..         MOV     ?V0 + 1,R3
   \   000044   E5..         MOV     A,?V0 + 0
   \   000046   45..         ORL     A,?V0 + 1
   \   000048   6052         JZ      ??SampleApp_ProcessEvent_5
   \   00004A   E5..         MOV     A,?V0 + 0
   \   00004C   2402         ADD     A,#0x2
   \   00004E   F8           MOV     R0,A
   \   00004F   E5..         MOV     A,?V0 + 1
   \   000051   3400         ADDC    A,#0x0
   \   000053   F9           MOV     R1,A
   \   000054   85..82       MOV     DPL,?V0 + 0
   \   000057   85..83       MOV     DPH,?V0 + 1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   14           DEC     A
   \   00005C   6027         JZ      ??SampleApp_ProcessEvent_6
   \   00005E   24E7         ADD     A,#-0x19
   \   000060   601A         JZ      ??SampleApp_ProcessEvent_7
   \   000062   245A         ADD     A,#0x5a
   \   000064   6006         JZ      ??SampleApp_ProcessEvent_8
   \   000066   24EF         ADD     A,#-0x11
   \   000068   60A8         JZ      ??SampleApp_ProcessEvent_2
   \   00006A   80C5         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_8:
   \   00006C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   FA           MOV     R2,A
   \   000071   8882         MOV     DPL,R0
   \   000073   8983         MOV     DPH,R1
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F9           MOV     R1,A
   \   000077   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00007A   80B5         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00007C                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00007C   AA..         MOV     R2,?V0 + 0
   \   00007E   AB..         MOV     R3,?V0 + 1
   \   000080   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000083   80AC         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000085   8882         MOV     DPL,R0
   \   000087   8983         MOV     DPH,R1
   \   000089   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00008C                ; Setup parameters for call to function HalUARTWrite
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FC           MOV     R4,A
   \   00008E   7D00         MOV     R5,#0x0
   \   000090   A3           INC     DPTR
   \   000091   AA82         MOV     R2,DPL
   \   000093   AB83         MOV     R3,DPH
   \   000095   7900         MOV     R1,#0x0
   \   000097   12....       LCALL   ??HalUARTWrite?relay
   \   00009A   8095         SJMP    ??SampleApp_ProcessEvent_4
    352              }
    353          
    354              // return unprocessed events
    355              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00009C   EE           MOV     A,R6
   \   00009D   FA           MOV     R2,A
   \   00009E   EF           MOV     A,R7
   \   00009F   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_9:
   \   0000A1   FB           MOV     R3,A
   \   0000A2   802A         SJMP    ??SampleApp_ProcessEvent_10
    356            }
    357          
    358            // Send a message out - This event is generated by a timer
    359            //  (setup in SampleApp_Init()).
    360            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   0000A4   EE           MOV     A,R6
   \   0000A5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000A7   5021         JNC     ??SampleApp_ProcessEvent_11
    361            {
    362              // Send the periodic message
    363              //SampleApp_SendPeriodicMessage();
    364              SampleApp_Send_P2P_Message();
   \   0000A9                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   0000A9   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    365          
    366              // Setup to send message again in normal period (+ a little jitter)
    367              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    368                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   0000AC                ; Setup parameters for call to function osal_rand
   \   0000AC   12....       LCALL   ??osal_rand?relay
   \   0000AF                ; Setup parameters for call to function osal_start_timerEx
   \   0000AF   EA           MOV     A,R2
   \   0000B0   24B8         ADD     A,#-0x48
   \   0000B2   FC           MOV     R4,A
   \   0000B3   E4           CLR     A
   \   0000B4   340B         ADDC    A,#0xb
   \   0000B6   FD           MOV     R5,A
   \   0000B7   7A01         MOV     R2,#0x1
   \   0000B9   7B00         MOV     R3,#0x0
   \   0000BB   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F9           MOV     R1,A
   \   0000C0   12....       LCALL   ??osal_start_timerEx?relay
    369          
    370              // return unprocessed events
    371              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000C3   EE           MOV     A,R6
   \   0000C4   6401         XRL     A,#0x1
   \   0000C6   FA           MOV     R2,A
   \   0000C7   EF           MOV     A,R7
   \   0000C8   80D7         SJMP    ??SampleApp_ProcessEvent_9
    372            }
    373          
    374            // Discard unknown events
    375            return 0;
   \                     ??SampleApp_ProcessEvent_11:
   \   0000CA   7A00         MOV     R2,#0x0
   \   0000CC   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000CE                REQUIRE ?Subroutine1
   \   0000CE                ; // Fall through to label ?Subroutine1
    376          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005                ; Setup parameters for call to function HalLedBlink
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET
    377          
    378          /*********************************************************************
    379           * Event Generation Functions
    380           */
    381          /*********************************************************************
    382           * @fn      SampleApp_HandleKeys
    383           *
    384           * @brief   Handles all key events for this device.
    385           *
    386           * @param   shift - true if in shift/alt.
    387           * @param   keys - bit field for key events. Valid entries:
    388           *                 HAL_KEY_SW_2
    389           *                 HAL_KEY_SW_1
    390           *
    391           * @return  none
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    394          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    395            (void)shift;  // Intentionally unreferenced parameter
    396            
    397            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    398            {
    399              /* This key sends the Flash Command is sent to Group 1.
    400               * This device will not receive the Flash Command from this
    401               * device (even if it belongs to group 1).
    402               */
    403              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    404            }
    405          
    406            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    407            {
    408              /* The Flashr Command is sent to Group 1.
    409               * This key toggles this device in and out of group 1.
    410               * If this device doesn't belong to group 1, this application
    411               * will not receive the Flash command sent to group 1.
    412               */
    413              aps_Group_t *grp;
    414              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    415              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    416              {
    417                // Remove from the group
    418                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    419              }
    420              else
    421              {
    422                // Add to the flash group
    423                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    424              }
    425            }
    426          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine6_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    427          
    428          /*********************************************************************
    429           * LOCAL FUNCTIONS
    430           */
    431          
    432          /*********************************************************************
    433           * @fn      SampleApp_MessageMSGCB
    434           *
    435           * @brief   Data message processor callback.  This function processes
    436           *          any incoming data - probably from other devices.  So, based
    437           *          on cluster ID, perform the intended action.
    438           *
    439           * @param   none
    440           *
    441           * @return  none
    442           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    443          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    444          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    445            uint16 flashTime;
    446            switch ( pkt->clusterId )
   \   000009   EE           MOV     A,R6
   \   00000A   2421         ADD     A,#0x21
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 3,A
   \   000022   78..         MOV     R0,#?V0 + 2
   \   000024   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000027   0200         DW        2
   \   000029   02           DB        2
   \   00002A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00002E   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000030   ....         DW        ??SampleApp_MessageMSGCB_2
    447            {
    448              case SAMPLEAPP_P2P_CLUSTERID:
    449                HalUARTWrite(0, "T&H:", 4);       //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
   \                     ??SampleApp_MessageMSGCB_2:
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032   7C04         MOV     R4,#0x4
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A..         MOV     R2,#`?<Constant "T&H:">` & 0xff
   \   000038   7B..         MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??HalUARTWrite?relay
    450                HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \   00003F                ; Setup parameters for call to function HalUARTWrite
   \   00003F   EE           MOV     A,R6
   \   000040   241F         ADD     A,#0x1f
   \   000042   F582         MOV     DPL,A
   \   000044   EF           MOV     A,R7
   \   000045   3400         ADDC    A,#0x0
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FC           MOV     R4,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FD           MOV     R5,A
   \   00004E   85..82       MOV     DPL,?V0 + 0
   \   000051   85..83       MOV     DPH,?V0 + 1
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FA           MOV     R2,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FB           MOV     R3,A
   \   000059   12....       LCALL   ?Subroutine3 & 0xFFFF
    451                HalUARTWrite(0, "\n", 1);         // »Ø³µ»»ÐÐ
    452                
    453           
    454                break;    
   \                     ??CrossCallReturnLabel_0:
   \   00005C   8031         SJMP    ??SampleApp_MessageMSGCB_0
    455              case SAMPLEAPP_PERIODIC_CLUSTERID:
    456                break;
    457          
    458              case SAMPLEAPP_FLASH_CLUSTERID:
    459                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    460                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   00005E   85..82       MOV     DPL,?V0 + 0
   \   000061   85..83       MOV     DPH,?V0 + 1
   \   000064   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FA           MOV     R2,A
   \   00006A   8882         MOV     DPL,R0
   \   00006C   8983         MOV     DPH,R1
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   EA           MOV     A,R2
   \   000073   2400         ADD     A,#0x0
   \   000075   F5..         MOV     ?V0 + 0,A
   \   000077   E4           CLR     A
   \   000078   39           ADDC    A,R1
   \   000079   F5..         MOV     ?V0 + 1,A
   \   00007B   7402         MOV     A,#0x2
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?US_SHR
   \   000082   AC..         MOV     R4,?V0 + 0
   \   000084   AD..         MOV     R5,?V0 + 1
   \   000086   7B32         MOV     R3,#0x32
   \   000088   7A04         MOV     R2,#0x4
   \   00008A   7908         MOV     R1,#0x8
   \   00008C   12....       LCALL   ??HalLedBlink?relay
    461                break;
    462            }
    463          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   00008F   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET
    464          
    465          /*********************************************************************
    466           * @fn      SampleApp_SendPeriodicMessage
    467           *
    468           * @brief   Send the periodic message.
    469           *
    470           * @param   none
    471           *
    472           * @return  none
    473           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    474          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    475          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    476            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    477                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    478                                 1,
    479                                 (uint8*)&SampleAppPeriodicCounter,
    480                                 &SampleApp_TransID,
    481                                 AF_DISCV_ROUTE,
    482                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042                REQUIRE ?Subroutine2
   \   000042                ; // Fall through to label ?Subroutine2
    483            {
    484            }
    485            else
    486            {
    487              // Error occurred in request to send.
    488            }
    489          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine6_0
   \   000003                ; // Fall through to label ??Subroutine6_0
    490          
    491          /*********************************************************************
    492           * @fn      SampleApp_SendFlashMessage
    493           *
    494           * @brief   Send the flash message to group 1.
    495           *
    496           * @param   flashTime - in milliseconds
    497           *
    498           * @return  none
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    501          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    502            uint8 buffer[3];
    503            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    504            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    505            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    506          
    507            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    508                                 SAMPLEAPP_FLASH_CLUSTERID,
    509                                 3,
    510                                 buffer,
    511                                 &SampleApp_TransID,
    512                                 AF_DISCV_ROUTE,
    513                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    514            {
    515            }
    516            else
    517            {
    518              // Error occurred in request to send.
    519            }
    520          }
   \   000071   7403         MOV     A,#0x3
   \   000073   80..         SJMP    ?Subroutine2
    521          
    522          /*********************************************************************
    523           * @fn      SampleApp_Send_P2P_Message
    524           *
    525           * @brief   point to point.
    526           *
    527           * @param   none
    528           *
    529           * @return  none
    530           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    531          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    532          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV     A,#-0x1c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    533            byte i, temp[3], humidity[3], strTemp[22];
    534            Delay_ms(500);
   \   00000A                ; Setup parameters for call to function Delay_ms
   \   00000A   7AF4         MOV     R2,#-0xc
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   12....       LCALL   ??Delay_ms?relay
    535            DHT11();             //»ñÈ¡ÎÂÊª¶È
   \   000011                ; Setup parameters for call to function DHT11
   \   000011   12....       LCALL   ??DHT11?relay
    536            Delay_ms(500);
   \   000014                ; Setup parameters for call to function Delay_ms
   \   000014   7AF4         MOV     R2,#-0xc
   \   000016   7B01         MOV     R3,#0x1
   \   000018   12....       LCALL   ??Delay_ms?relay
    537            //½«ÎÂÊª¶ÈµÄ×ª»»³É×Ö·û´®,¹©LCDÏÔÊ¾  
    538            temp[0] = wendu_shi+0x30;
   \   00001B   90....       MOV     DPTR,#wendu_shi
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   2430         ADD     A,#0x30
   \   000021   C0E0         PUSH    A
   \   000023   7403         MOV     A,#0x3
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   D0E0         POP     A
   \   00002A   F0           MOVX    @DPTR,A
    539            temp[1] = wendu_ge+0x30;
   \   00002B   90....       MOV     DPTR,#wendu_ge
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   2430         ADD     A,#0x30
   \   000031   C0E0         PUSH    A
   \   000033   7404         MOV     A,#0x4
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   D0E0         POP     A
   \   00003A   F0           MOVX    @DPTR,A
    540            temp[2] = '\0';
   \   00003B   7405         MOV     A,#0x5
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
    541            humidity[0] = shidu_shi+0x30;
   \   000042   90....       MOV     DPTR,#shidu_shi
   \   000045   E0           MOVX    A,@DPTR
   \   000046   2430         ADD     A,#0x30
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   F0           MOVX    @DPTR,A
    542            humidity[1] = shidu_ge+0x30;
   \   00004F   90....       MOV     DPTR,#shidu_ge
   \   000052   E0           MOVX    A,@DPTR
   \   000053   2430         ADD     A,#0x30
   \   000055   C0E0         PUSH    A
   \   000057   7401         MOV     A,#0x1
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   D0E0         POP     A
   \   00005E   F0           MOVX    @DPTR,A
    543            humidity[2] = '\0';
   \   00005F   7402         MOV     A,#0x2
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
    544            //½«Êý¾ÝÕûºÏºó·½±ã·¢¸øÐ­µ÷Æ÷ÏÔÊ¾
    545            //{"temp": ,"hum": }
    546          //  osal_memcpy(strTemp, temp, 2); 
    547          //  osal_memcpy(&strTemp[2], "  ", 2);
    548          //  osal_memcpy(&strTemp[4], humidity, 3);
    549            
    550             osal_memcpy(strTemp,"{\"temp1\":", 9); 
   \   000066                ; Setup parameters for call to function osal_memcpy
   \   000066   75....       MOV     ?V0 + 0,#`?<Constant "{\\"temp1\\":">` & 0xff
   \   000069   75....       MOV     ?V0 + 1,#(`?<Constant "{\\"temp1\\":">` >> 8) & 0xff
   \   00006C   F5..         MOV     ?V0 + 2,A
   \   00006E   78..         MOV     R0,#?V0 + 0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000073   7C09         MOV     R4,#0x9
   \   000075   7D00         MOV     R5,#0x0
   \   000077   EC           MOV     A,R4
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
    551             osal_memcpy(&strTemp[9],temp, 2);
   \   000081                ; Setup parameters for call to function osal_memcpy
   \   000081   7403         MOV     A,#0x3
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   A982         MOV     R1,DPL
   \   000088   AA83         MOV     R2,DPH
   \   00008A   89..         MOV     ?V0 + 0,R1
   \   00008C   8A..         MOV     ?V0 + 1,R2
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000093   7C02         MOV     R4,#0x2
   \   000095   7D00         MOV     R5,#0x0
   \   000097   7412         MOV     A,#0x12
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
    552             osal_memcpy(&strTemp[11],",\"hum1\":", 8);
   \   0000A2                ; Setup parameters for call to function osal_memcpy
   \   0000A2   75....       MOV     ?V0 + 0,#`?<Constant ",\\"hum1\\":">` & 0xff
   \   0000A5   75....       MOV     ?V0 + 1,#(`?<Constant ",\\"hum1\\":">` >> 8) & 0xff
   \   0000A8   78..         MOV     R0,#?V0 + 0
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AD   7C08         MOV     R4,#0x8
   \   0000AF   7D00         MOV     R5,#0x0
   \   0000B1   7414         MOV     A,#0x14
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
    553             osal_memcpy(&strTemp[19],humidity, 2);
   \   0000BC                ; Setup parameters for call to function osal_memcpy
   \   0000BC   85..82       MOV     DPL,?XSP + 0
   \   0000BF   85..83       MOV     DPH,?XSP + 1
   \   0000C2   A982         MOV     R1,DPL
   \   0000C4   AA83         MOV     R2,DPH
   \   0000C6   89..         MOV     ?V0 + 0,R1
   \   0000C8   8A..         MOV     ?V0 + 1,R2
   \   0000CA   78..         MOV     R0,#?V0 + 0
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CF   7C02         MOV     R4,#0x2
   \   0000D1   7D00         MOV     R5,#0x0
   \   0000D3   741C         MOV     A,#0x1c
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
    554             osal_memcpy(&strTemp[21],"}", 1);
   \   0000DE                ; Setup parameters for call to function osal_memcpy
   \   0000DE   75....       MOV     ?V0 + 0,#`?<Constant "}">` & 0xff
   \   0000E1   75....       MOV     ?V0 + 1,#(`?<Constant "}">` >> 8) & 0xff
   \   0000E4   78..         MOV     R0,#?V0 + 0
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E9   7C01         MOV     R4,#0x1
   \   0000EB   7D00         MOV     R5,#0x0
   \   0000ED   741E         MOV     A,#0x1e
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000F5   12....       LCALL   ?DEALLOC_XSTACK8
    555            
    556            //»ñµÃµÄÎÂÊª¶ÈÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾
    557            HalUARTWrite(0, "T&H:", 4);
   \   0000F8                ; Setup parameters for call to function HalUARTWrite
   \   0000F8   7C04         MOV     R4,#0x4
   \   0000FA   7D00         MOV     R5,#0x0
   \   0000FC   7A..         MOV     R2,#`?<Constant "T&H:">` & 0xff
   \   0000FE   7B..         MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
   \   000100   7900         MOV     R1,#0x0
   \   000102   12....       LCALL   ??HalUARTWrite?relay
    558            HalUARTWrite(0, strTemp, 22);
   \   000105                ; Setup parameters for call to function HalUARTWrite
   \   000105   7C16         MOV     R4,#0x16
   \   000107   7D00         MOV     R5,#0x0
   \   000109   7406         MOV     A,#0x6
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   AA82         MOV     R2,DPL
   \   000110   AB83         MOV     R3,DPH
   \   000112   12....       LCALL   ?Subroutine3 & 0xFFFF
    559            HalUARTWrite(0, "\n",1);
    560          
    561            //Êä³öµ½LCDÏÔÊ¾
    562            for(i=0; i<3; i++)
    563            {   
    564              if(i==0)
    565              {
    566                LCD_P16x16Ch(i*16,4,i*16);
   \                     ??CrossCallReturnLabel_1:
   \   000115                ; Setup parameters for call to function LCD_P16x16Ch
   \   000115   7B00         MOV     R3,#0x0
   \   000117   7A04         MOV     R2,#0x4
   \   000119   7900         MOV     R1,#0x0
   \   00011B   12....       LCALL   ??LCD_P16x16Ch?relay
    567                LCD_P16x16Ch(i*16,6,(i+3)*16);
   \   00011E                ; Setup parameters for call to function LCD_P16x16Ch
   \   00011E   7B30         MOV     R3,#0x30
   \   000120   7A06         MOV     R2,#0x6
   \   000122   7900         MOV     R1,#0x0
   \   000124   12....       LCALL   ??LCD_P16x16Ch?relay
    568              }
   \   000127   7F01         MOV     R7,#0x1
    569              else
    570              {
    571                LCD_P16x16Ch(i*16,4,i*16);
   \                     ??SampleApp_Send_P2P_Message_0:
   \   000129   EF           MOV     A,R7
   \   00012A   C4           SWAP    A
   \   00012B   54F0         ANL     A,#0xf0
   \   00012D   FE           MOV     R6,A
   \   00012E                ; Setup parameters for call to function LCD_P16x16Ch
   \   00012E   FB           MOV     R3,A
   \   00012F   7A04         MOV     R2,#0x4
   \   000131   F9           MOV     R1,A
   \   000132   12....       LCALL   ??LCD_P16x16Ch?relay
    572                LCD_P16x16Ch(i*16,6,i*16);        
   \   000135                ; Setup parameters for call to function LCD_P16x16Ch
   \   000135   EE           MOV     A,R6
   \   000136   FB           MOV     R3,A
   \   000137   7A06         MOV     R2,#0x6
   \   000139   F9           MOV     R1,A
   \   00013A   12....       LCALL   ??LCD_P16x16Ch?relay
    573              }
    574            } 
   \   00013D   0F           INC     R7
   \   00013E   EF           MOV     A,R7
   \   00013F   C3           CLR     C
   \   000140   9403         SUBB    A,#0x3
   \   000142   40E5         JC      ??SampleApp_Send_P2P_Message_0
    575            LCD_P8x16Str(44, 4, temp);
   \   000144                ; Setup parameters for call to function LCD_P8x16Str
   \   000144   7403         MOV     A,#0x3
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   AC82         MOV     R4,DPL
   \   00014B   AD83         MOV     R5,DPH
   \   00014D   7A04         MOV     R2,#0x4
   \   00014F   792C         MOV     R1,#0x2c
   \   000151   12....       LCALL   ??LCD_P8x16Str?relay
    576            LCD_P8x16Str(44, 6, humidity);
   \   000154                ; Setup parameters for call to function LCD_P8x16Str
   \   000154   85..82       MOV     DPL,?XSP + 0
   \   000157   85..83       MOV     DPH,?XSP + 1
   \   00015A   AC82         MOV     R4,DPL
   \   00015C   AD83         MOV     R5,DPH
   \   00015E   7A06         MOV     R2,#0x6
   \   000160   792C         MOV     R1,#0x2c
   \   000162   12....       LCALL   ??LCD_P8x16Str?relay
    577           
    578            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    579                                 SAMPLEAPP_P2P_CLUSTERID,
    580                                 22,
    581                                 strTemp,
    582                                 &SampleApp_TransID,
    583                                 AF_DISCV_ROUTE,
    584                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000165                ; Setup parameters for call to function AF_DataRequest
   \   000165   75..1E       MOV     ?V0 + 0,#0x1e
   \   000168   78..         MOV     R0,#?V0 + 0
   \   00016A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00016D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000170   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000173   78..         MOV     R0,#?V0 + 0
   \   000175   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000178   7409         MOV     A,#0x9
   \   00017A   12....       LCALL   ?XSTACK_DISP0_8
   \   00017D   8582..       MOV     ?V0 + 0,DPL
   \   000180   8583..       MOV     ?V0 + 1,DPH
   \   000183   78..         MOV     R0,#?V0 + 0
   \   000185   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000188   75..16       MOV     ?V0 + 0,#0x16
   \   00018B   75..00       MOV     ?V0 + 1,#0x0
   \   00018E   78..         MOV     R0,#?V0 + 0
   \   000190   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000193   75..04       MOV     ?V0 + 0,#0x4
   \   000196   78..         MOV     R0,#?V0 + 0
   \   000198   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019B   7920         MOV     R1,#0x20
   \   00019D   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00019F   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0001A1   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   0001A3   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   0001A5   12....       LCALL   ??AF_DataRequest?relay
   \   0001A8   7409         MOV     A,#0x9
   \   0001AA   12....       LCALL   ?DEALLOC_XSTACK8
    585            {
    586            }
    587            else
    588            {
    589              // Error occurred in request to send.
    590            }
    591          }
   \   0001AD   741C         MOV     A,#0x1c
   \   0001AF   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine7_0
   \   000004                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for flat>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UART0\\r\\n">`:
   \   000000   55415254     DB "UART0\015\012"
   \            300D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "T&H:">`:
   \   000000   5426483A     DB "T&H:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "{\\"temp1\\":">`:
   \   000000   7B227465     DB "{\"temp1\":"
   \            6D703122
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",\\"hum1\\":">`:
   \   000000   2C226875     DB ",\"hum1\":"
   \            6D31223A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "}">`:
   \   000000   7D00         DB "}"
    592          
    593          /*********************************************************************
    594          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0    114
       -> MT_UartInit                   0      0    222
       -> MT_UartRegisterTaskID         0      0    222
       -> HalUARTWrite                  0      0    222
       -> osal_memset                   0      0    222
       -> HalUARTWrite                  0      0    222
       -> osal_msg_allocate             0      0    222
       -> afRegister                    0      0    222
       -> RegisterForKeys               0      0    222
       -> osal_memcpy                   0      0    228
       -> aps_AddGroup                  0      0    222
       -> HalLcdWriteString             0      0    222
     SampleApp_MessageMSGCB             0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalLedBlink                   0      0     24
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> HalUARTWrite                  0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_P2P_Message         1      0     60
       -> Delay_ms                      0      0     78
       -> DHT11                         0      0     78
       -> Delay_ms                      0      0     78
       -> osal_memcpy                   0      0     84
       -> osal_memcpy                   0      0     84
       -> osal_memcpy                   0      0     84
       -> osal_memcpy                   0      0     84
       -> osal_memcpy                   0      0     84
       -> HalUARTWrite                  0      0     78
       -> HalUARTWrite                  0      0     78
       -> HalUARTWrite                  0      0     78
       -> LCD_P16x16Ch                  0      0     78
       -> LCD_P16x16Ch                  0      0     78
       -> LCD_P16x16Ch                  0      0     78
       -> LCD_P16x16Ch                  0      0     78
       -> LCD_P8x16Str                  0      0     78
       -> LCD_P8x16Str                  0      0     78
       -> AF_DataRequest                0      0     96


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     P0SEL                                    1
     line                                     2
     len_rcv                                  1
     flat                                     1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         279
     ?Subroutine0                             8
     ??Subroutine7_0                          6
     SampleApp_ProcessEvent                 206
     ?Subroutine1                             5
     ?Subroutine5                            10
     SampleApp_HandleKeys                    62
     ??Subroutine6_0                          5
     SampleApp_MessageMSGCB                 146
     ?Subroutine3                            19
     SampleApp_SendPeriodicMessage           66
     ?Subroutine2                             3
     SampleApp_SendFlashMessage             117
     SampleApp_Send_P2P_Message             434
     ?Subroutine4                             4
     ?<Initializer for flat>                  1
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ?<Constant "UART0\r\n">                  8
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "T&H:">                       5
     ?<Constant "\n">                         2
     ?<Constant "{\"temp1\":">               10
     ?<Constant ",\"hum1\":">                 9
     ?<Constant "}">                          2

 
 1 370 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    70 bytes in segment XDATA_ROM_C
    68 bytes in segment XDATA_Z
 
 1 413 bytes of CODE  memory
    70 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    69 bytes of XDATA memory

Errors: none
Warnings: 4
