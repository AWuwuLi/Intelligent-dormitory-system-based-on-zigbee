###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         27/Jun/2025  14:44:51 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\EndDeviceEB1.c                           #
#    Command line       =  -f "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ #
#                          ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg #
#                          " (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f  #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"  #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00020000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\EndDeviceEB1.c" -D ZIGBEEPRO -D         #
#                          NWK_AUTO_POLL -D xMT_TASK -D ZTOOL_P1 -D           #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC "D:\Program                #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\E #
#                          ndDeviceEB-1\List\" -lA "D:\Program                #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\E #
#                          ndDeviceEB-1\List\" --diag_suppress Pe001,Pa010    #
#                          -o "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ #
#                          ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB-1\Obj\" -e --debug       #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\Program                #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\" #
#                           -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍ #
#                          µ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZSta #
#                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\SOURCE\" -I "D:\Program          #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\ZMAIN\TI2530DB\" -I "D:\Program            #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MT\" -I "D:\Program       #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I          #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC #
#                          2530EB\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍø #
#                          WiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\O #
#                          SAL\MCU\CCSOC\" -I "D:\Program                     #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I         #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"    #
#                          -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ #
#                          ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ #
#                          " -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢Ë #
#                          Íµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZSt #
#                          ack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi· #
#                          ¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ #
#                          SAPI\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWi #
#                          Fi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENE #
#                          T\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\SYS\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍø #
#                          WiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S #
#                          TACK\ZDO\" -I "D:\Program                          #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\ZMAC\F8W\" -I             #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I     #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADD #
#                          R\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi· #
#                          ¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVIC #
#                          ES\SDATA\" -I "D:\Program                          #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MAC\INCLUDE\" -I          #
#                          "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ON #
#                          ENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVE #
#                          L\" -I "D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi· #
#                          ¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LO #
#                          W_LEVEL\srf04\" -I "D:\Program                     #
#                          field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊ #
#                          ý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGL #
#                          E_CHIP\" -Ohz --require_prototypes                 #
#    List file          =  D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\EndDeviceEB-1\List\EndDeviceEB1.lst      #
#    Object file        =  D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONE #
#                          NET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\EndDeviceEB-1\Obj\EndDeviceEB1.r51       #
#                                                                             #
#                                                                             #
###############################################################################

D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB1.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.cst x
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED  AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "DHT11.h"
     78          #include "stdio.h"
     79          #include "string.h"
     80          
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */
     96          #define DATA_PIN P0_7

   \                                 In  segment XDATA_I, align 1, keep-with-next
     97          uint8 guang = 1;
   \                     guang:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for guang>`
   \   000001                REQUIRE __INIT_XDATA_I
     98          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     99          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    100          {
    101            SAMPLEAPP_PERIODIC_CLUSTERID,
    102            SAMPLEAPP_FLASH_CLUSTERID
    103          };
    104          

   \                                 In  segment XDATA_ROM_C, align 1
    105          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    106          {
    107            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    108            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    109            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    110            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    111            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    112            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    113            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    114            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    115            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    116          };
    117          
    118          // This is the Endpoint/Interface description.  It is defined here, but
    119          // filled-in in SampleApp_Init().  Another way to go would be to fill
    120          // in the structure here and make it a "const" (in code space).  The
    121          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    123          
    124          /*********************************************************************
    125           * EXTERNAL VARIABLES
    126           */
    127          
    128          /*********************************************************************
    129           * EXTERNAL FUNCTIONS
    130           */
    131          
    132          /*********************************************************************
    133           * LOCAL VARIABLES
    134           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136                                    // This variable will be received when
    137                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t SampleApp_Periodic_DstAddr; // ¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          afAddrType_t SampleApp_Flash_DstAddr;    // ×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t SampleApp_P2P_DstAddr;      // µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    150          
    151          
    152          
    153          /*********************************************************************
    154           * LOCAL FUNCTIONS
    155           */
    156          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    157          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    158          void SampleApp_SendPeriodicMessage( void );
    159          void SampleApp_SendFlashMessage( uint16 flashTime );
    160          void SampleApp_Send_P2P_Message(void);
    161          void ReSetWifi(void);
    162          /*********************************************************************
    163           * NETWORK LAYER CALLBACKS
    164           */
    165          
    166          /*********************************************************************
    167           * PUBLIC FUNCTIONS
    168           */
    169          
    170          /****************************************************************************
    171          * Ãû    ³Æ: ReSetWifi()
    172          * ¹¦    ÄÜ: µÍµçÆ½¸´Î»wifiÄ£¿é
    173          * Èë¿Ú²ÎÊý: ÎÞ
    174          * ³ö¿Ú²ÎÊý: ÎÞ
    175          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          void ReSetWifi(void)
   \                     ReSetWifi:
    177          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    178            //P0DIR |= 0x40;           //P0.6¶¨ÒåÎªÊä³ö
    179            //WIFIRESET = 0;                 //¸ßµçÆ½¸´Î»---------------------¸Ä 0
    180            //Delay_ms(500);
    181            //WIFIRESET = 1;                 //µÍµçÆ½¹¤×÷------------
    182             Delay_ms(500);
   \   000004                ; Setup parameters for call to function Delay_ms
   \   000004   7AF4         MOV     R2,#-0xc
   \   000006   7B01         MOV     R3,#0x1
   \   000008   12....       LCALL   ??Delay_ms?relay
    183          }
   \   00000B   D083         POP     DPH
   \   00000D   D082         POP     DPL
   \   00000F   02....       LJMP    ?BRET
    184          /*********************************************************************
    185           * @fn      SampleApp_Init
    186           *
    187           * @brief   Initialization function for the Generic App Task.
    188           *          This is called during initialization and should contain
    189           *          any application specific initialization (ie. hardware
    190           *          initialization/setup, table initialization, power up
    191           *          notificaiton ... ).
    192           *
    193           * @param   task_id - the ID assigned by OSAL.  This ID should be
    194           *                    used to send messages and set timers.
    195           *
    196           * @return  none
    197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    199          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    200            
    201            unsigned char tmp[10];
    202            SampleApp_TaskID = task_id;
   \   00000C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000F   F0           MOVX    @DPTR,A
    203            SampleApp_NwkState = DEV_INIT;
   \   000010   90....       MOV     DPTR,#SampleApp_NwkState
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    204            SampleApp_TransID = 0;
   \   000016   90....       MOV     DPTR,#SampleApp_TransID
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    205            
    206            
    207            MT_UartInit();                  //   ´®¿Ú³õÊ¼»¯  
   \   00001B                ; Setup parameters for call to function MT_UartInit
   \   00001B   12....       LCALL   ??MT_UartInit?relay
    208            MT_UartRegisterTaskID(task_id); //   ×¢²á´®¿ÚÈÎÎñ    
   \   00001E                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00001E   EE           MOV     A,R6
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??MT_UartRegisterTaskID?relay
    209            HalUARTWrite(0, "EndDevice-1\r\n", 13);
   \   000023                ; Setup parameters for call to function HalUARTWrite
   \   000023   7C0D         MOV     R4,#0xd
   \   000025   7D00         MOV     R5,#0x0
   \   000027   7A..         MOV     R2,#`?<Constant "EndDevice-1\\r\\n">` & 0xff
   \   000029   7B..         MOV     R3,#(`?<Constant "EndDevice-1\\r\\n">` >> 8) & 0xff
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   12....       LCALL   ??HalUARTWrite?relay
    210            osal_memset(tmp,0,10);
   \   000030                ; Setup parameters for call to function osal_memset
   \   000030   7C0A         MOV     R4,#0xa
   \   000032   7D00         MOV     R5,#0x0
   \   000034   7900         MOV     R1,#0x0
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   AA82         MOV     R2,DPL
   \   00003E   AB83         MOV     R3,DPH
   \   000040   12....       LCALL   ??osal_memset?relay
    211            tmp[0] = HAL_UART_DMA+0x30;
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   7431         MOV     A,#0x31
   \   00004B   F0           MOVX    @DPTR,A
    212            tmp[1] = HAL_UART_ISR+0x30;
   \   00004C   7401         MOV     A,#0x1
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7432         MOV     A,#0x32
   \   000053   F0           MOVX    @DPTR,A
    213            tmp[2] = HAL_UART_USB+0x30;
   \   000054   7402         MOV     A,#0x2
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   7430         MOV     A,#0x30
   \   00005B   F0           MOVX    @DPTR,A
    214            HalUARTWrite(0, tmp, 6);
   \   00005C                ; Setup parameters for call to function HalUARTWrite
   \   00005C   7C06         MOV     R4,#0x6
   \   00005E   7D00         MOV     R5,#0x0
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   7900         MOV     R1,#0x0
   \   00006C   12....       LCALL   ??HalUARTWrite?relay
    215            //P0SEL &= 0x7f;                  //P0_7 ÅäÖÃ³ÉÍ¨ÓÃ io
    216          
    217            // Device hardware initialization can be added here or in main() (Zmain.c).
    218            // If the hardware is application specific - add it here.
    219            // If the hardware is other parts of the device add it in main().
    220          
    221           #if defined ( BUILD_ALL_DEVICES )
    222            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    223            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    224            // together - if they are - we will start up a coordinator. Otherwise,
    225            // the device will start as a router.
    226            if ( readCoordinatorJumper() )
    227              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    228            else
    229              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    230          #endif // BUILD_ALL_DEVICES
    231          
    232          #if defined ( HOLD_AUTO_START )
    233            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    234            //  from starting the device and wait for the application to
    235            //  start the device.
    236            ZDOInitDevice(0);
    237          #endif
    238          
    239            // Setup for the periodic message's destination address
    240            // Broadcast to everyone
    241            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00006F   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000072   7402         MOV     A,#0x2
   \   000074   F0           MOVX    @DPTR,A
    242            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000075   A3           INC     DPTR
   \   000076   7414         MOV     A,#0x14
   \   000078   F0           MOVX    @DPTR,A
    243            SampleApp_Periodic_DstAddr.addr.shortAddr =0x0000;
   \   000079   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00007C   E4           CLR     A
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   F0           MOVX    @DPTR,A
    244          
    245            // Setup for the flash command's destination address - Group 1
    246            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000080   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000083   04           INC     A
   \   000084   F0           MOVX    @DPTR,A
    247            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000085   A3           INC     DPTR
   \   000086   7414         MOV     A,#0x14
   \   000088   F0           MOVX    @DPTR,A
    248            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000089   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00008C   7401         MOV     A,#0x1
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   E4           CLR     A
   \   000091   F0           MOVX    @DPTR,A
    249            
    250            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast; // ? 
   \   000092   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000095   740F         MOV     A,#0xf
   \   000097   F0           MOVX    @DPTR,A
    251            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000098   A3           INC     DPTR
   \   000099   7414         MOV     A,#0x14
   \   00009B   F0           MOVX    @DPTR,A
    252            SampleApp_P2P_DstAddr.addr.shortAddr = 0xFFFF;            //    §¿    
   \   00009C   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   00009F   74FF         MOV     A,#-0x1
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   F0           MOVX    @DPTR,A
    253          
    254            // Fill out the endpoint description.
    255            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   0000A4   90....       MOV     DPTR,#SampleApp_epDesc
   \   0000A7   7414         MOV     A,#0x14
   \   0000A9   F0           MOVX    @DPTR,A
    256            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   0000AA   A3           INC     DPTR
   \   0000AB   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   0000B1   F0           MOVX    @DPTR,A
    257            SampleApp_epDesc.simpleDesc
    258                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   0000B2   A3           INC     DPTR
   \   0000B3   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   0000B9   F0           MOVX    @DPTR,A
    259            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   0000BA   A3           INC     DPTR
   \   0000BB   E4           CLR     A
   \   0000BC   F0           MOVX    @DPTR,A
    260          
    261            // Register the endpoint description with the AF
    262            afRegister( &SampleApp_epDesc );
   \   0000BD                ; Setup parameters for call to function afRegister
   \   0000BD   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   0000BF   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   0000C1   12....       LCALL   ??afRegister?relay
    263          
    264            // Register for all key events - This app will handle all key events
    265            RegisterForKeys( SampleApp_TaskID );
   \   0000C4                ; Setup parameters for call to function RegisterForKeys
   \   0000C4   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F9           MOV     R1,A
   \   0000C9   12....       LCALL   ??RegisterForKeys?relay
    266          
    267            // By default, all devices start out in Group 1
    268            SampleApp_Group.ID = 0x0001;
   \   0000CC   90....       MOV     DPTR,#SampleApp_Group
   \   0000CF   7401         MOV     A,#0x1
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   E4           CLR     A
   \   0000D4   F0           MOVX    @DPTR,A
    269            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   0000D5                ; Setup parameters for call to function osal_memcpy
   \   0000D5   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000D8   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000DB   F5..         MOV     ?V0 + 2,A
   \   0000DD   78..         MOV     R0,#?V0 + 0
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E2   7C07         MOV     R4,#0x7
   \   0000E4   7D00         MOV     R5,#0x0
   \   0000E6   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000E8   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000EA   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
    270            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000F0                ; Setup parameters for call to function aps_AddGroup
   \   0000F0   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000F2   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000F4   7914         MOV     R1,#0x14
   \   0000F6   12....       LCALL   ??aps_AddGroup?relay
    271          
    272          #if defined ( LCD_SUPPORTED )
    273            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000F9                ; Setup parameters for call to function HalLcdWriteString
   \   0000F9   7901         MOV     R1,#0x1
   \   0000FB   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000FD   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000FF   12....       LCALL   ??HalLcdWriteString?relay
    274          #endif
    275          }
   \   000102   740A         MOV     A,#0xa
   \   000104                REQUIRE ?Subroutine0
   \   000104                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F03         MOV     R7,#0x3
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    276          
    277          
    278          /*********************************************************************
    279           * @fn      SampleApp_ProcessEvent
    280           *
    281           * @brief   Generic Application Task event processor.  This function
    282           *          is called to process all events for the task.  Events
    283           *          include timers, messages and any other user defined events.
    284           *
    285           * @param   task_id  - The OSAL assigned task ID.
    286           * @param   events - events to process.  This is a bit map and can
    287           *                   contain more than one event.
    288           *
    289           * @return  none
    290           */
    291          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    292          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    293          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    294            afIncomingMSGPacket_t *MSGpkt;
    295            (void)task_id;  // Intentionally unreferenced parameter
    296          
    297            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    298            {
    299              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   8026         SJMP    ??SampleApp_ProcessEvent_1
    300              while ( MSGpkt )
    301              {
    302                switch ( MSGpkt->hdr.event )
    303                {
    304                  // Received when a key is pressed
    305                  case KEY_CHANGE:
    306                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    307                    break;
    308          
    309                  // Received when a messages is received (OTA) for this endpoint
    310                  case AF_INCOMING_MSG_CMD:
    311                    SampleApp_MessageMSGCB( MSGpkt );
    312                    break;
    313                case CMD_SERIAL_MSG:
    314                  mtOSALSerialData_t *p = (mtOSALSerialData_t *)MSGpkt;
                         ^
Warning[Pe1072]: a declaration cannot have a label

        switch ( MSGpkt->hdr.event )
        ^
"D:\Program field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB1.c",302  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "p" (declared at line 314 of "D:\Program
                      field\¶àÖÕ¶ËÊý¾ÝZigbee×éÍøWiFi·¢ËÍµ½ONENET\¶àÖÕ¶ËÊý¾ÝZigb
                      ee×éÍøWiFi·¢ËÍµ½ONENET\ZStack-CC2530-2.3.0-1.4.0\Projects
                      \zstack\Samples\SampleApp\CC2530DB\EndDeviceEB1.c")
    315                  HalUARTWrite(HAL_UART_PORT_0, &p->msg[1], p->msg[0]); // ?  ?          ¡¤   ? 
    316          
    317                   break;
    318                  // Received whenever the device changes state in the network
    319                  case ZDO_STATE_CHANGE:
    320                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#SampleApp_NwkState
   \   000017   F0           MOVX    @DPTR,A
    321                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    322                           (SampleApp_NwkState == DEV_ROUTER)
    323                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000018   6407         XRL     A,#0x7
   \   00001A   6005         JZ      ??SampleApp_ProcessEvent_3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6406         XRL     A,#0x6
   \   00001F   7010         JNZ     ??SampleApp_ProcessEvent_4
    324                    {
    325                      // Start sending the periodic message in a regular interval.
    326                      osal_start_timerEx( SampleApp_TaskID,
    327                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    328                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000021                ; Setup parameters for call to function osal_start_timerEx
   \   000021   7CB8         MOV     R4,#-0x48
   \   000023   7D0B         MOV     R5,#0xb
   \   000025   7A01         MOV     R2,#0x1
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??osal_start_timerEx?relay
    329                    }
    330                    else
    331                    {
    332                      // Device is no longer in the network
    333                    }
    334                    break;
    335          
    336                  default:
    337                    break;
    338                }
    339          
    340                // Release the memory
    341                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000031                ; Setup parameters for call to function osal_msg_deallocate
   \   000031   AA..         MOV     R2,?V0 + 0
   \   000033   AB..         MOV     R3,?V0 + 1
   \   000035   12....       LCALL   ??osal_msg_deallocate?relay
    342          
    343                // Next - if one is available
    344                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000038                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000038   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??osal_msg_receive?relay
   \   000040   8A..         MOV     ?V0 + 0,R2
   \   000042   8B..         MOV     ?V0 + 1,R3
   \   000044   E5..         MOV     A,?V0 + 0
   \   000046   45..         ORL     A,?V0 + 1
   \   000048   6052         JZ      ??SampleApp_ProcessEvent_5
   \   00004A   E5..         MOV     A,?V0 + 0
   \   00004C   2402         ADD     A,#0x2
   \   00004E   F8           MOV     R0,A
   \   00004F   E5..         MOV     A,?V0 + 1
   \   000051   3400         ADDC    A,#0x0
   \   000053   F9           MOV     R1,A
   \   000054   85..82       MOV     DPL,?V0 + 0
   \   000057   85..83       MOV     DPH,?V0 + 1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   14           DEC     A
   \   00005C   6027         JZ      ??SampleApp_ProcessEvent_6
   \   00005E   24E7         ADD     A,#-0x19
   \   000060   601A         JZ      ??SampleApp_ProcessEvent_7
   \   000062   245A         ADD     A,#0x5a
   \   000064   6006         JZ      ??SampleApp_ProcessEvent_8
   \   000066   24EF         ADD     A,#-0x11
   \   000068   60A8         JZ      ??SampleApp_ProcessEvent_2
   \   00006A   80C5         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_8:
   \   00006C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   FA           MOV     R2,A
   \   000071   8882         MOV     DPL,R0
   \   000073   8983         MOV     DPH,R1
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F9           MOV     R1,A
   \   000077   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00007A   80B5         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00007C                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00007C   AA..         MOV     R2,?V0 + 0
   \   00007E   AB..         MOV     R3,?V0 + 1
   \   000080   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000083   80AC         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000085   8882         MOV     DPL,R0
   \   000087   8983         MOV     DPH,R1
   \   000089   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00008C                ; Setup parameters for call to function HalUARTWrite
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FC           MOV     R4,A
   \   00008E   7D00         MOV     R5,#0x0
   \   000090   A3           INC     DPTR
   \   000091   AA82         MOV     R2,DPL
   \   000093   AB83         MOV     R3,DPH
   \   000095   7900         MOV     R1,#0x0
   \   000097   12....       LCALL   ??HalUARTWrite?relay
   \   00009A   8095         SJMP    ??SampleApp_ProcessEvent_4
    345              }
    346          
    347              // return unprocessed events
    348              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00009C   EE           MOV     A,R6
   \   00009D   FA           MOV     R2,A
   \   00009E   EF           MOV     A,R7
   \   00009F   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_9:
   \   0000A1   FB           MOV     R3,A
   \   0000A2   8023         SJMP    ??SampleApp_ProcessEvent_10
    349            }
    350          
    351            // Send a message out - This event is generated by a timer
    352            //  (setup in SampleApp_Init()).
    353            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   0000A4   EE           MOV     A,R6
   \   0000A5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000A7   501A         JNC     ??SampleApp_ProcessEvent_11
    354            {
    355              // Send the periodic message
    356              SampleApp_SendPeriodicMessage();//? ¨´???
   \   0000A9                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   0000A9   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    357          
    358              // Setup to send message again in normal period (+ a little jitter)
    359              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    360                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + 1000) );
   \   0000AC                ; Setup parameters for call to function osal_start_timerEx
   \   0000AC   7CA0         MOV     R4,#-0x60
   \   0000AE   7D0F         MOV     R5,#0xf
   \   0000B0   7A01         MOV     R2,#0x1
   \   0000B2   7B00         MOV     R3,#0x0
   \   0000B4   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F9           MOV     R1,A
   \   0000B9   12....       LCALL   ??osal_start_timerEx?relay
    361          
    362              // return unprocessed events
    363              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000BC   EE           MOV     A,R6
   \   0000BD   6401         XRL     A,#0x1
   \   0000BF   FA           MOV     R2,A
   \   0000C0   EF           MOV     A,R7
   \   0000C1   80DE         SJMP    ??SampleApp_ProcessEvent_9
    364            }
    365          
    366            // Discard unknown events
    367            return 0;
   \                     ??SampleApp_ProcessEvent_11:
   \   0000C3   7A00         MOV     R2,#0x0
   \   0000C5   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000C7                REQUIRE ?Subroutine1
   \   0000C7                ; // Fall through to label ?Subroutine1
    368          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005                ; Setup parameters for call to function HalLedBlink
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET
    369          
    370          /*********************************************************************
    371           * Event Generation Functions
    372           */
    373          /*********************************************************************
    374           * @fn      SampleApp_HandleKeys
    375           *
    376           * @brief   Handles all key events for this device.
    377           *
    378           * @param   shift - true if in shift/alt.
    379           * @param   keys - bit field for key events. Valid entries:
    380           *                 HAL_KEY_SW_2
    381           *                 HAL_KEY_SW_1
    382           *
    383           * @return  none
    384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    385          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    386          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    387            (void)shift;  // Intentionally unreferenced parameter
    388            
    389            if ( keys & HAL_KEY_SW_1 )
   \   000006   A2E0         MOV     C,0xE0 /* A   */.0
   \   000008   5007         JNC     ??SampleApp_HandleKeys_0
    390            {
    391              /* This key sends the Flash Command is sent to Group 1.
    392               * This device will not receive the Flash Command from this
    393               * device (even if it belongs to group 1).
    394               */
    395              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000A                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000A   7AE8         MOV     R2,#-0x18
   \   00000C   7B03         MOV     R3,#0x3
   \   00000E   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    396            }
    397          
    398          }
   \                     ??SampleApp_HandleKeys_0:
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
    399          
    400          /*********************************************************************
    401           * LOCAL FUNCTIONS
    402           */
    403          
    404          /*********************************************************************
    405           * @fn      SampleApp_MessageMSGCB
    406           *
    407           * @brief   Data message processor callback.  This function processes
    408           *          any incoming data - probably from other devices.  So, based
    409           *          on cluster ID, perform the intended action.
    410           *
    411           * @param   none
    412           *
    413           * @return  none
    414           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    415          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    416          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    417            uint16 flashTime;
    418            switch ( pkt->clusterId )
   \   000009   EE           MOV     A,R6
   \   00000A   2421         ADD     A,#0x21
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 3,A
   \   000022   78..         MOV     R0,#?V0 + 2
   \   000024   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000027   0200         DW        2
   \   000029   02           DB        2
   \   00002A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00002E   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000030   ....         DW        ??SampleApp_MessageMSGCB_2
    419            {
    420              case SAMPLEAPP_P2P_CLUSTERID:
    421                HalUARTWrite(0, "T&H:", 4);       //  ?   ?     
   \                     ??SampleApp_MessageMSGCB_2:
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032   7C04         MOV     R4,#0x4
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A..         MOV     R2,#`?<Constant "T&H:">` & 0xff
   \   000038   7B..         MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??HalUARTWrite?relay
    422                HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //      ?       
   \   00003F                ; Setup parameters for call to function HalUARTWrite
   \   00003F   EE           MOV     A,R6
   \   000040   241F         ADD     A,#0x1f
   \   000042   F582         MOV     DPL,A
   \   000044   EF           MOV     A,R7
   \   000045   3400         ADDC    A,#0x0
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FC           MOV     R4,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FD           MOV     R5,A
   \   00004E   85..82       MOV     DPL,?V0 + 0
   \   000051   85..83       MOV     DPH,?V0 + 1
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FA           MOV     R2,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FB           MOV     R3,A
   \   000059   12....       LCALL   ?Subroutine2 & 0xFFFF
    423                HalUARTWrite(0, "\n", 1);         //  ?     
    424                
    425                break;    
   \                     ??CrossCallReturnLabel_0:
   \   00005C   8031         SJMP    ??SampleApp_MessageMSGCB_0
    426              case SAMPLEAPP_PERIODIC_CLUSTERID:
    427                break;
    428          
    429              case SAMPLEAPP_FLASH_CLUSTERID:
    430                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    431                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   00005E   85..82       MOV     DPL,?V0 + 0
   \   000061   85..83       MOV     DPH,?V0 + 1
   \   000064   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FA           MOV     R2,A
   \   00006A   8882         MOV     DPL,R0
   \   00006C   8983         MOV     DPH,R1
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   EA           MOV     A,R2
   \   000073   2400         ADD     A,#0x0
   \   000075   F5..         MOV     ?V0 + 0,A
   \   000077   E4           CLR     A
   \   000078   39           ADDC    A,R1
   \   000079   F5..         MOV     ?V0 + 1,A
   \   00007B   7402         MOV     A,#0x2
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?US_SHR
   \   000082   AC..         MOV     R4,?V0 + 0
   \   000084   AD..         MOV     R5,?V0 + 1
   \   000086   7B32         MOV     R3,#0x32
   \   000088   7A04         MOV     R2,#0x4
   \   00008A   7908         MOV     R1,#0x8
   \   00008C   12....       LCALL   ??HalLedBlink?relay
    432                break;
    433            }
    434          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   00008F   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET
    435          
    436          /*********************************************************************
    437           * @fn      SampleApp_SendPeriodicMessage
    438           *
    439           * @brief   Send the periodic message.
    440           *
    441           * @param   none
    442           *
    443           * @return  none
    444           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    445          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    446          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV     A,#-0x26
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    447            byte i, temp[3], humidity[3], strTemp[30],guangzhao[2];
    448            Delay_ms(500);
   \   00000A                ; Setup parameters for call to function Delay_ms
   \   00000A   7AF4         MOV     R2,#-0xc
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   12....       LCALL   ??Delay_ms?relay
    449            DHT11();             //  ?  ?  
   \   000011                ; Setup parameters for call to function DHT11
   \   000011   12....       LCALL   ??DHT11?relay
    450            Delay_ms(500);
   \   000014                ; Setup parameters for call to function Delay_ms
   \   000014   7AF4         MOV     R2,#-0xc
   \   000016   7B01         MOV     R3,#0x1
   \   000018   12....       LCALL   ??Delay_ms?relay
    451            guang = DATA_PIN;
   \   00001B   A287         MOV     C,0x80.7
   \   00001D   E4           CLR     A
   \   00001E   33           RLC     A
   \   00001F   90....       MOV     DPTR,#guang
   \   000022   F0           MOVX    @DPTR,A
    452            
    453            //    ? ? ?     ?   ,  LCD  ?  
    454            temp[0] = wendu_shi+0x30;
   \   000023   90....       MOV     DPTR,#wendu_shi
   \   000026   E0           MOVX    A,@DPTR
   \   000027   2430         ADD     A,#0x30
   \   000029   C0E0         PUSH    A
   \   00002B   7405         MOV     A,#0x5
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   D0E0         POP     A
   \   000032   F0           MOVX    @DPTR,A
    455            temp[1] = wendu_ge+0x30;
   \   000033   90....       MOV     DPTR,#wendu_ge
   \   000036   E0           MOVX    A,@DPTR
   \   000037   2430         ADD     A,#0x30
   \   000039   C0E0         PUSH    A
   \   00003B   7406         MOV     A,#0x6
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   D0E0         POP     A
   \   000042   F0           MOVX    @DPTR,A
    456            temp[2] = '\0';
   \   000043   7407         MOV     A,#0x7
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
    457            humidity[0] = shidu_shi+0x30;
   \   00004A   90....       MOV     DPTR,#shidu_shi
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   2430         ADD     A,#0x30
   \   000050   C0E0         PUSH    A
   \   000052   7402         MOV     A,#0x2
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   D0E0         POP     A
   \   000059   F0           MOVX    @DPTR,A
    458            humidity[1] = shidu_ge+0x30;
   \   00005A   90....       MOV     DPTR,#shidu_ge
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   2430         ADD     A,#0x30
   \   000060   C0E0         PUSH    A
   \   000062   7403         MOV     A,#0x3
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   D0E0         POP     A
   \   000069   F0           MOVX    @DPTR,A
    459            humidity[2] = '\0';
   \   00006A   7404         MOV     A,#0x4
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   E4           CLR     A
   \   000070   F0           MOVX    @DPTR,A
    460            guangzhao[0] = guang + 0x30;
   \   000071   90....       MOV     DPTR,#guang
   \   000074   E0           MOVX    A,@DPTR
   \   000075   2430         ADD     A,#0x30
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   F0           MOVX    @DPTR,A
    461            guangzhao[1] = '\0';
   \   00007E   7401         MOV     A,#0x1
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   E4           CLR     A
   \   000084   F0           MOVX    @DPTR,A
    462             //memset(strTemp,0,22);
    463            //         ????  §¿      ?
    464             osal_memcpy(strTemp,"{\"tem1\":", 8); 
   \   000085                ; Setup parameters for call to function osal_memcpy
   \   000085   75....       MOV     ?V0 + 0,#`?<Constant "{\\"tem1\\":">` & 0xff
   \   000088   75....       MOV     ?V0 + 1,#(`?<Constant "{\\"tem1\\":">` >> 8) & 0xff
   \   00008B   F5..         MOV     ?V0 + 2,A
   \   00008D   78..         MOV     R0,#?V0 + 0
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000092   7C08         MOV     R4,#0x8
   \   000094   7D00         MOV     R5,#0x0
   \   000096   740B         MOV     A,#0xb
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
    465             osal_memcpy(&strTemp[8],temp, 2);
   \   0000A1                ; Setup parameters for call to function osal_memcpy
   \   0000A1   7405         MOV     A,#0x5
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   A982         MOV     R1,DPL
   \   0000A8   AA83         MOV     R2,DPH
   \   0000AA   89..         MOV     ?V0 + 0,R1
   \   0000AC   8A..         MOV     ?V0 + 1,R2
   \   0000AE   78..         MOV     R0,#?V0 + 0
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B3   7C02         MOV     R4,#0x2
   \   0000B5   7D00         MOV     R5,#0x0
   \   0000B7   7413         MOV     A,#0x13
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
    466             osal_memcpy(&strTemp[10],",\"hum1\":",8);
   \   0000C2                ; Setup parameters for call to function osal_memcpy
   \   0000C2   75....       MOV     ?V0 + 0,#`?<Constant ",\\"hum1\\":">` & 0xff
   \   0000C5   75....       MOV     ?V0 + 1,#(`?<Constant ",\\"hum1\\":">` >> 8) & 0xff
   \   0000C8   78..         MOV     R0,#?V0 + 0
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CD   7C08         MOV     R4,#0x8
   \   0000CF   7D00         MOV     R5,#0x0
   \   0000D1   7415         MOV     A,#0x15
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
    467             osal_memcpy(&strTemp[18],humidity, 2);
   \   0000DC                ; Setup parameters for call to function osal_memcpy
   \   0000DC   7402         MOV     A,#0x2
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   A982         MOV     R1,DPL
   \   0000E3   AA83         MOV     R2,DPH
   \   0000E5   89..         MOV     ?V0 + 0,R1
   \   0000E7   8A..         MOV     ?V0 + 1,R2
   \   0000E9   78..         MOV     R0,#?V0 + 0
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000EE   7C02         MOV     R4,#0x2
   \   0000F0   7D00         MOV     R5,#0x0
   \   0000F2   741D         MOV     A,#0x1d
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000FA   12....       LCALL   ?DEALLOC_XSTACK8
    468             osal_memcpy(&strTemp[20],",\"gua1\":",8);
   \   0000FD                ; Setup parameters for call to function osal_memcpy
   \   0000FD   75....       MOV     ?V0 + 0,#`?<Constant ",\\"gua1\\":">` & 0xff
   \   000100   75....       MOV     ?V0 + 1,#(`?<Constant ",\\"gua1\\":">` >> 8) & 0xff
   \   000103   78..         MOV     R0,#?V0 + 0
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000108   7C08         MOV     R4,#0x8
   \   00010A   7D00         MOV     R5,#0x0
   \   00010C   741F         MOV     A,#0x1f
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000114   12....       LCALL   ?DEALLOC_XSTACK8
    469             osal_memcpy(&strTemp[28],guangzhao, 1);
   \   000117                ; Setup parameters for call to function osal_memcpy
   \   000117   85..82       MOV     DPL,?XSP + 0
   \   00011A   85..83       MOV     DPH,?XSP + 1
   \   00011D   A982         MOV     R1,DPL
   \   00011F   AA83         MOV     R2,DPH
   \   000121   89..         MOV     ?V0 + 0,R1
   \   000123   8A..         MOV     ?V0 + 1,R2
   \   000125   78..         MOV     R0,#?V0 + 0
   \   000127   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00012A   7C01         MOV     R4,#0x1
   \   00012C   7D00         MOV     R5,#0x0
   \   00012E   7427         MOV     A,#0x27
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000136   12....       LCALL   ?DEALLOC_XSTACK8
    470             osal_memcpy(&strTemp[29],"}", 1);
   \   000139                ; Setup parameters for call to function osal_memcpy
   \   000139   75....       MOV     ?V0 + 0,#`?<Constant "}">` & 0xff
   \   00013C   75....       MOV     ?V0 + 1,#(`?<Constant "}">` >> 8) & 0xff
   \   00013F   78..         MOV     R0,#?V0 + 0
   \   000141   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000144   7C01         MOV     R4,#0x1
   \   000146   7D00         MOV     R5,#0x0
   \   000148   7428         MOV     A,#0x28
   \   00014A   12....       LCALL   ?XSTACK_DISP0_8
   \   00014D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000150   12....       LCALL   ?DEALLOC_XSTACK8
    471            
    472            //  ?   ?  ?                 ?
    473            HalUARTWrite(0, "T&H:", 4);
   \   000153                ; Setup parameters for call to function HalUARTWrite
   \   000153   7C04         MOV     R4,#0x4
   \   000155   7D00         MOV     R5,#0x0
   \   000157   7A..         MOV     R2,#`?<Constant "T&H:">` & 0xff
   \   000159   7B..         MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
   \   00015B   7900         MOV     R1,#0x0
   \   00015D   12....       LCALL   ??HalUARTWrite?relay
    474            HalUARTWrite(0, strTemp, 21);
   \   000160                ; Setup parameters for call to function HalUARTWrite
   \   000160   7C15         MOV     R4,#0x15
   \   000162   7D00         MOV     R5,#0x0
   \   000164   7408         MOV     A,#0x8
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   AA82         MOV     R2,DPL
   \   00016B   AB83         MOV     R3,DPH
   \   00016D   12....       LCALL   ?Subroutine2 & 0xFFFF
    475            HalUARTWrite(0, "\n",1);
    476          
    477            //     LCD  ?
    478            for(i=0; i<3; i++)
    479            {   
    480              if(i==0)
    481              {
    482                LCD_P16x16Ch(i*16,4,i*16);
   \                     ??CrossCallReturnLabel_1:
   \   000170                ; Setup parameters for call to function LCD_P16x16Ch
   \   000170   7B00         MOV     R3,#0x0
   \   000172   7A04         MOV     R2,#0x4
   \   000174   7900         MOV     R1,#0x0
   \   000176   12....       LCALL   ??LCD_P16x16Ch?relay
    483                LCD_P16x16Ch(i*16,6,(i+3)*16);
   \   000179                ; Setup parameters for call to function LCD_P16x16Ch
   \   000179   7B30         MOV     R3,#0x30
   \   00017B   7A06         MOV     R2,#0x6
   \   00017D   7900         MOV     R1,#0x0
   \   00017F   12....       LCALL   ??LCD_P16x16Ch?relay
    484              }
   \   000182   7F01         MOV     R7,#0x1
    485              else
    486              {
    487                LCD_P16x16Ch(i*16,4,i*16);
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   000184   EF           MOV     A,R7
   \   000185   C4           SWAP    A
   \   000186   54F0         ANL     A,#0xf0
   \   000188   FE           MOV     R6,A
   \   000189                ; Setup parameters for call to function LCD_P16x16Ch
   \   000189   FB           MOV     R3,A
   \   00018A   7A04         MOV     R2,#0x4
   \   00018C   F9           MOV     R1,A
   \   00018D   12....       LCALL   ??LCD_P16x16Ch?relay
    488                LCD_P16x16Ch(i*16,6,i*16);        
   \   000190                ; Setup parameters for call to function LCD_P16x16Ch
   \   000190   EE           MOV     A,R6
   \   000191   FB           MOV     R3,A
   \   000192   7A06         MOV     R2,#0x6
   \   000194   F9           MOV     R1,A
   \   000195   12....       LCALL   ??LCD_P16x16Ch?relay
    489              }
    490            } 
   \   000198   0F           INC     R7
   \   000199   EF           MOV     A,R7
   \   00019A   C3           CLR     C
   \   00019B   9403         SUBB    A,#0x3
   \   00019D   40E5         JC      ??SampleApp_SendPeriodicMessage_0
    491            LCD_P8x16Str(44, 4, temp);
   \   00019F                ; Setup parameters for call to function LCD_P8x16Str
   \   00019F   7405         MOV     A,#0x5
   \   0001A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A4   AC82         MOV     R4,DPL
   \   0001A6   AD83         MOV     R5,DPH
   \   0001A8   7A04         MOV     R2,#0x4
   \   0001AA   792C         MOV     R1,#0x2c
   \   0001AC   12....       LCALL   ??LCD_P8x16Str?relay
    492            LCD_P8x16Str(44, 6, humidity);
   \   0001AF                ; Setup parameters for call to function LCD_P8x16Str
   \   0001AF   7402         MOV     A,#0x2
   \   0001B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B4   AC82         MOV     R4,DPL
   \   0001B6   AD83         MOV     R5,DPH
   \   0001B8   7A06         MOV     R2,#0x6
   \   0001BA   792C         MOV     R1,#0x2c
   \   0001BC   12....       LCALL   ??LCD_P8x16Str?relay
    493            LCD_P8x16Str(80, 6, "ZB1");
   \   0001BF                ; Setup parameters for call to function LCD_P8x16Str
   \   0001BF   7C..         MOV     R4,#`?<Constant "ZB1">` & 0xff
   \   0001C1   7D..         MOV     R5,#(`?<Constant "ZB1">` >> 8) & 0xff
   \   0001C3   7A06         MOV     R2,#0x6
   \   0001C5   7950         MOV     R1,#0x50
   \   0001C7   12....       LCALL   ??LCD_P8x16Str?relay
    494            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    495                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    496                                 30,
    497                                 strTemp,
    498                                 &SampleApp_TransID,
    499                                 AF_DISCV_ROUTE,
    500                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0001CA                ; Setup parameters for call to function AF_DataRequest
   \   0001CA   75..1E       MOV     ?V0 + 0,#0x1e
   \   0001CD   78..         MOV     R0,#?V0 + 0
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D2   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0001D5   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0001D8   78..         MOV     R0,#?V0 + 0
   \   0001DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DD   740B         MOV     A,#0xb
   \   0001DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E2   8582..       MOV     ?V0 + 0,DPL
   \   0001E5   8583..       MOV     ?V0 + 1,DPH
   \   0001E8   78..         MOV     R0,#?V0 + 0
   \   0001EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001ED   75..1E       MOV     ?V0 + 0,#0x1e
   \   0001F0   75..00       MOV     ?V0 + 1,#0x0
   \   0001F3   78..         MOV     R0,#?V0 + 0
   \   0001F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F8   75..01       MOV     ?V0 + 0,#0x1
   \   0001FB   78..         MOV     R0,#?V0 + 0
   \   0001FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000200   7920         MOV     R1,#0x20
   \   000202   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000204   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000206   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000208   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00020A   12....       LCALL   ??AF_DataRequest?relay
   \   00020D   7409         MOV     A,#0x9
   \   00020F   12....       LCALL   ?DEALLOC_XSTACK8
    501            {
    502            }
    503            else
    504            {
    505              // Error occurred in request to send.
    506            }
    507          }
   \   000212   7426         MOV     A,#0x26
   \   000214   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000217                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine5_0
   \   000004                ; // Fall through to label ??Subroutine5_0
    508          
    509          /*********************************************************************
    510           * @fn      SampleApp_SendFlashMessage
    511           *
    512           * @brief   Send the flash message to group 1.
    513           *
    514           * @param   flashTime - in milliseconds
    515           *
    516           * @return  none
    517           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    518          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    519          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    520            uint8 buffer[3];
    521            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    522            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    523            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    524          
    525            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    526                                 SAMPLEAPP_FLASH_CLUSTERID,
    527                                 3,
    528                                 buffer,
    529                                 &SampleApp_TransID,
    530                                 AF_DISCV_ROUTE,
    531                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    532            {
    533            }
    534            else
    535            {
    536              // Error occurred in request to send.
    537            }
    538          }
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   7F02         MOV     R7,#0x2
   \   000078   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for guang>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReSetWifi?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReSetWifi

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EndDevice-1\\r\\n">`:
   \   000000   456E6444     DB "EndDevice-1\015\012"
   \            65766963
   \            652D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "T&H:">`:
   \   000000   5426483A     DB "T&H:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "{\\"tem1\\":">`:
   \   000000   7B227465     DB "{\"tem1\":"
   \            6D31223A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",\\"hum1\\":">`:
   \   000000   2C226875     DB ",\"hum1\":"
   \            6D31223A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",\\"gua1\\":">`:
   \   000000   2C226775     DB ",\"gua1\":"
   \            6131223A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "}">`:
   \   000000   7D00         DB "}"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZB1">`:
   \   000000   5A423100     DB "ZB1"
    539          
    540          
    541          /*********************************************************************
    542          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReSetWifi                          2      0      0
       -> Delay_ms                      4      0      0
     SampleApp_HandleKeys               0      0     21
       -> SampleApp_SendFlashMessage
                                        0      0     18
     SampleApp_Init                     0      0     24
       -> MT_UartInit                   0      0     42
       -> MT_UartRegisterTaskID         0      0     42
       -> HalUARTWrite                  0      0     42
       -> osal_memset                   0      0     42
       -> HalUARTWrite                  0      0     42
       -> afRegister                    0      0     42
       -> RegisterForKeys               0      0     42
       -> osal_memcpy                   0      0     48
       -> aps_AddGroup                  0      0     42
       -> HalLcdWriteString             0      0     42
     SampleApp_MessageMSGCB             0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalLedBlink                   0      0     24
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> HalUARTWrite                  0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     31
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      1      0     70
       -> Delay_ms                      0      0     98
       -> DHT11                         0      0     98
       -> Delay_ms                      0      0     98
       -> osal_memcpy                   0      0    104
       -> osal_memcpy                   0      0    104
       -> osal_memcpy                   0      0    104
       -> osal_memcpy                   0      0    104
       -> osal_memcpy                   0      0    104
       -> osal_memcpy                   0      0    104
       -> osal_memcpy                   0      0    104
       -> HalUARTWrite                  0      0     98
       -> HalUARTWrite                  0      0     98
       -> HalUARTWrite                  0      0     98
       -> LCD_P16x16Ch                  0      0     98
       -> LCD_P16x16Ch                  0      0     98
       -> LCD_P16x16Ch                  0      0     98
       -> LCD_P16x16Ch                  0      0     98
       -> LCD_P8x16Str                  0      0     98
       -> LCD_P8x16Str                  0      0     98
       -> LCD_P8x16Str                  0      0     98
       -> AF_DataRequest                0      0    116


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     guang                                    1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     ReSetWifi                               18
     SampleApp_Init                         260
     ?Subroutine0                             8
     ??Subroutine5_0                          6
     SampleApp_ProcessEvent                 199
     ?Subroutine1                             5
     ?Subroutine4                            10
     SampleApp_HandleKeys                    22
     SampleApp_MessageMSGCB                 146
     ?Subroutine2                            19
     SampleApp_SendPeriodicMessage          535
     ?Subroutine3                             4
     SampleApp_SendFlashMessage             123
     ?<Initializer for guang>                 1
     ??ReSetWifi?relay                        6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ?<Constant "EndDevice-1\r\n">           14
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "T&H:">                       5
     ?<Constant "\n">                         2
     ?<Constant "{\"tem1\":">                 9
     ?<Constant ",\"hum1\":">                 9
     ?<Constant ",\"gua1\":">                 9
     ?<Constant "}">                          2
     ?<Constant "ZB1">                        4

 
 1 355 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    88 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
 1 398 bytes of CODE  memory
    88 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    66 bytes of XDATA memory

Errors: none
Warnings: 2
